# dynamic_interface.py - –°–∏—Å—Ç–µ–º–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞

import random
from datetime import datetime, timedelta
from PyQt5.QtCore import QTimer
from PyQt5.QtWidgets import QLabel

class DynamicInterfaceManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
    
    def __init__(self, main_app):
        self.app = main_app
        self.update_counters = {}
        self.dynamic_elements = {}
        self.setup_dynamic_timers()
    
    def setup_dynamic_timers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–π–º–µ—Ä–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤"""
        
        # –¢–∞–π–º–µ—Ä –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ (–∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É)
        self.time_timer = QTimer()
        self.time_timer.timeout.connect(self.update_time_elements)
        self.time_timer.start(1000)
        
        # –¢–∞–π–º–µ—Ä –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥)
        self.stats_timer = QTimer()
        self.stats_timer.timeout.connect(self.update_stats_elements)
        self.stats_timer.start(5000)
        
        # –¢–∞–π–º–µ—Ä –¥–ª—è –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥)
        self.motivation_timer = QTimer()
        self.motivation_timer.timeout.connect(self.update_motivation_elements)
        self.motivation_timer.start(30000)
        
        # –¢–∞–π–º–µ—Ä –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–π (–∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã)
        self.animation_timer = QTimer()
        self.animation_timer.timeout.connect(self.update_animations)
        self.animation_timer.start(2000)
    
    def register_dynamic_element(self, element_id, element, update_type="stats"):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        self.dynamic_elements[element_id] = {
            'element': element,
            'type': update_type,
            'last_update': datetime.now()
        }
    
    def update_time_elements(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤—Ä–µ–º–µ–Ω–∏"""
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É –≤—Ä–µ–º–µ–Ω–∏
            if hasattr(self.app, 'time_card') and self.app.time_card:
                self.app.update_time_display()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ–∫–Ω–∞ —Å —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º
            current_time = datetime.now().strftime("%H:%M:%S")
            self.app.setWindowTitle(f"‚è∞ Time Blocking v5.0 - {current_time}")
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏: {e}")
    
    def update_stats_elements(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤"""
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
            self.update_counters['stats_updates'] = self.update_counters.get('stats_updates', 0) + 1
            
            # –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–∞ –≤–∫–ª–∞–¥–∫–∞ dashboard, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            current_tab = self.app.tabs.currentWidget()
            if hasattr(current_tab, 'objectName') and current_tab.objectName() == "dashboard_tab":
                self.refresh_dashboard_stats()
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    def refresh_dashboard_stats(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–∞ dashboard"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            from task_manager import task_manager, TaskStatus
            
            total_tasks = len(task_manager.get_tasks_for_today())
            completed_count = len(task_manager.get_completed_tasks_today())
            
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é —Ä–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏—é –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –¥–∏–Ω–∞–º–∏–∫–∏
            demo_boost = random.randint(0, 2)
            total_tasks += demo_boost
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –µ—Å–ª–∏ –æ–Ω–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
            if hasattr(self.app, 'tasks_card_element'):
                self.update_task_card(total_tasks)
            
            if hasattr(self.app, 'completed_card_element'):
                self.update_completed_card(completed_count, total_tasks)
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è dashboard: {e}")
    
    def update_task_card(self, total_tasks):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∑–∞–¥–∞—á"""
        activity_level = min(total_tasks * 10, 100)
        motivation = self.get_task_motivation(total_tasks)
        
        html = f"""
        <div style='background: linear-gradient(135deg, #2D2D2D, #3D3D3D); padding: 25px; border-radius: 12px; text-align: center; border: 1px solid #FF2B4340; box-shadow: 0 4px 12px rgba(0,0,0,0.3);'>
            <h3 style='color: #FF2B43; margin: 0; font-size: 14px;'>üìã –ó–∞–¥–∞—á–∏ —Å–µ–≥–æ–¥–Ω—è</h3>
            <h1 style='margin: 15px 0; font-family: "Courier New", monospace; color: #FF2B43; font-size: 32px; text-shadow: 0 0 10px #FF2B4350; letter-spacing: 2px;'>{total_tasks}</h1>
            
            <div style='margin: 15px 0; background: #1A1A1A; border-radius: 10px; height: 8px; overflow: hidden;'>
                <div style='background: linear-gradient(90deg, #FF2B43, #FF2B4380); height: 100%; width: {activity_level}%; border-radius: 10px; transition: width 0.3s ease;'></div>
            </div>
            <p style='color: #FF2B43; margin: 5px 0; font-size: 11px; font-weight: bold;'>–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {activity_level:.0f}%</p>
            
            <p style='color: #FFD700; margin: 10px 0; font-size: 11px; font-style: italic; opacity: 0.9;'>{motivation}</p>
        </div>
        """
        
        if hasattr(self.app, 'tasks_card_element'):
            self.app.tasks_card_element.setText(html)
    
    def update_completed_card(self, completed_count, total_tasks):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á"""
        completion_rate = (completed_count / max(total_tasks, 1)) * 100
        motivation = self.get_completion_motivation(completion_rate)
        
        html = f"""
        <div style='background: linear-gradient(135deg, #2D2D2D, #3D3D3D); padding: 25px; border-radius: 12px; text-align: center; border: 1px solid #4CAF5040; box-shadow: 0 4px 12px rgba(0,0,0,0.3);'>
            <h3 style='color: #4CAF50; margin: 0; font-size: 14px;'>‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞—á</h3>
            <h1 style='margin: 15px 0; font-family: "Courier New", monospace; color: #4CAF50; font-size: 32px; text-shadow: 0 0 10px #4CAF5050; letter-spacing: 2px;'>{completed_count}</h1>
            
            <div style='margin: 15px 0; background: #1A1A1A; border-radius: 10px; height: 8px; overflow: hidden;'>
                <div style='background: linear-gradient(90deg, #4CAF50, #4CAF5080); height: 100%; width: {completion_rate:.1f}%; border-radius: 10px; transition: width 0.3s ease;'></div>
            </div>
            <p style='color: #4CAF50; margin: 5px 0; font-size: 11px; font-weight: bold;'>–í—ã–ø–æ–ª–Ω–µ–Ω–æ: {completion_rate:.0f}%</p>
            
            <p style='color: #FFD700; margin: 10px 0; font-size: 11px; font-style: italic; opacity: 0.9;'>{motivation}</p>
        </div>
        """
        
        if hasattr(self.app, 'completed_card_element'):
            self.app.completed_card_element.setText(html)
    
    def update_motivation_elements(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞—Ä—Ç–æ—á–∫–∞—Ö
            self.refresh_dashboard_stats()
            
            # –î–æ–±–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ —Å—Ç–∞—Ç—É—Å-–±–∞—Ä
            self.show_motivation_notification()
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–æ—Ç–∏–≤–∞—Ü–∏–∏: {e}")
    
    def update_animations(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —ç—Ñ—Ñ–µ–∫—Ç–æ–≤"""
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—É–ª—å—Å–∞—Ü–∏—é –∫ –∞–∫—Ç–∏–≤–Ω—ã–º —ç–ª–µ–º–µ–Ω—Ç–∞–º
            self.add_pulse_effects()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä—ã —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
            self.animate_progress_bars()
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏: {e}")
    
    def get_task_motivation(self, total_tasks):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∑–∞–¥–∞—á"""
        messages = {
            0: ["–ù–∞—á–Ω–∏—Ç–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –¥–µ–Ω—å! üìù", "–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É! üöÄ"],
            1: ["–•–æ—Ä–æ—à–µ–µ –Ω–∞—á–∞–ª–æ! üëç", "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ! üìã"],
            3: ["–û—Ç–ª–∏—á–Ω—ã–π –ø–ª–∞–Ω! üéØ", "–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–π –¥–µ–Ω—å –≤–ø–µ—Ä–µ–¥–∏! ‚ö°"],
            5: ["–ê–º–±–∏—Ü–∏–æ–∑–Ω—ã–µ –ø–ª–∞–Ω—ã! üí™", "–í—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã —Å–µ—Ä—å–µ–∑–Ω–æ! üî•"],
            10: ["–°—É–ø–µ—Ä –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å! üåü", "–ù–µ–≤–µ—Ä–æ—è—Ç–Ω–∞—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å! üöÄ"]
        }
        
        for threshold in sorted(messages.keys(), reverse=True):
            if total_tasks >= threshold:
                return random.choice(messages[threshold])
        
        return "–ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ! ‚≠ê"
    
    def get_completion_motivation(self, completion_rate):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
        if completion_rate >= 90:
            return random.choice(["–ù–µ–≤–µ—Ä–æ—è—Ç–Ω–æ! üèÜ", "–í—ã —á–µ–º–ø–∏–æ–Ω! üëë", "–ò–¥–µ–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! ‚≠ê"])
        elif completion_rate >= 70:
            return random.choice(["–ü—Ä–µ–≤–æ—Å—Ö–æ–¥–Ω–æ! üéâ", "–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞! üí™", "–¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å! üî•"])
        elif completion_rate >= 50:
            return random.choice(["–•–æ—Ä–æ—à–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å! üëç", "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ! üí™", "–ù–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø—É—Ç–∏! üéØ"])
        elif completion_rate >= 25:
            return random.choice(["–ù–∞—á–∏–Ω–∞–µ—Ç–µ —Ä–∞–∑–≥–æ–Ω! üöÄ", "–ù–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π—Ç–µ—Å—å! ‚ö°", "–í–ø–µ—Ä–µ–¥ –∫ —Ü–µ–ª–∏! üéØ"])
        else:
            return random.choice(["–í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å! üöÄ", "–ù–∞—á–Ω–∏—Ç–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å! üí™", "–ü–µ—Ä–≤—ã–π —à–∞–≥ –≤–∞–∂–µ–Ω! ‚≠ê"])
    
    def show_motivation_notification(self):
        """–ü–æ–∫–∞–∑ –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        hour = datetime.now().hour
        notifications = {
            9: "–£—Ç—Ä–µ–Ω–Ω–∏–π –∑–∞—Ä—è–¥ —ç–Ω–µ—Ä–≥–∏–∏! –í—Ä–µ–º—è –¥–ª—è –≤–∞–∂–Ω—ã—Ö –¥–µ–ª! ‚ö°",
            12: "–û–±–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è! –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ –æ—Ç–¥—ã—Ö! üçΩÔ∏è",
            15: "–ü–æ—Å–ª–µ–æ–±–µ–¥–µ–Ω–Ω—ã–π —Ä—ã–≤–æ–∫! –§–∏–Ω–∏—à–Ω–∞—è –ø—Ä—è–º–∞—è! üèÉ‚Äç‚ôÇÔ∏è",
            18: "–í—Ä–µ–º—è –ø–æ–¥–≤–æ–¥–∏—Ç—å –∏—Ç–æ–≥–∏ –¥–Ω—è! üìä",
            21: "–ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å! üìã"
        }
        
        if hour in notifications:
            print(f"üí° {notifications[hour]}")
    
    def add_pulse_effects(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–æ–≤ –ø—É–ª—å—Å–∞—Ü–∏–∏"""
        # –≠—Ñ—Ñ–µ–∫—Ç—ã –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã —á–µ—Ä–µ–∑ CSS –∞–Ω–∏–º–∞—Ü–∏–∏
        pass
    
    def animate_progress_bars(self):
        """–ê–Ω–∏–º–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–≤"""
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä—ã —Å –ø–ª–∞–≤–Ω—ã–º–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞–º–∏
        pass
    
    def get_dynamic_stats(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        return {
            'updates_count': self.update_counters.get('stats_updates', 0),
            'active_elements': len(self.dynamic_elements),
            'last_update': datetime.now().strftime("%H:%M:%S")
        }

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –æ—Å–Ω–æ–≤–Ω—ã–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º
def setup_dynamic_interface(app):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    app.dynamic_manager = DynamicInterfaceManager(app)
    return app.dynamic_manager

def register_dynamic_element(app, element_id, element, update_type="stats"):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
    if hasattr(app, 'dynamic_manager'):
        app.dynamic_manager.register_dynamic_element(element_id, element, update_type)

print("–°–∏—Å—Ç–µ–º–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞!")
