# settings.py - –°–∏—Å—Ç–µ–º–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–µ–º–∏—É–º-–∫–ª–∞—Å—Å–∞
import json
import os
from datetime import datetime
from PyQt5.QtCore import QSettings, QStandardPaths
from PyQt5.QtWidgets import (QDialog, QVBoxLayout, QHBoxLayout, QFormLayout, 
                             QGroupBox, QCheckBox, QComboBox, QSpinBox, 
                             QDoubleSpinBox, QLineEdit, QPushButton, 
                             QDialogButtonBox, QLabel, QTabWidget, QWidget,
                             QListWidget, QListWidgetItem, QScrollArea, QSlider, QMessageBox, QFileDialog)
from PyQt5.QtGui import QIcon, QFont, QPalette, QColor
from PyQt5.QtCore import Qt, pyqtSignal

class AppSettings:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    def __init__(self, app_name="TimeBlockingPlanner"):
        self.app_name = app_name
        self.settings = QSettings("PremiumSoft", app_name)
        self.default_settings = self.get_default_settings()
        
    def get_default_settings(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        return {
            "appearance": {
                "theme": "dark",
                "language": "ru",
                "font_size": 12,
                "font_family": "Segoe UI",
                "animations_enabled": True,
                "smooth_scrolling": True,
                "opacity": 1.0
            },
            "notifications": {
                "enabled": True,
                "sound_enabled": True,
                "popup_enabled": True,
                "early_minutes": 2,
                "snooze_minutes": 5,
                "working_hours_start": "08:00",
                "working_hours_end": "22:00"
            },
            "behavior": {
                "auto_save": True,
                "auto_save_interval": 5,
                "minimize_to_tray": True,
                "start_minimized": False,
                "confirm_deletions": True,
                "backup_on_start": True
            },
            "time_blocks": {
                "default_duration": 60,
                "default_color": "#FF2B43",
                "show_duration": True,
                "allow_overlap": False,
                "snap_to_grid": True,
                "grid_size": 15
            },
            "integration": {
                "calendar_sync": False,
                "export_format": "json",
                "auto_export": False,
                "cloud_sync": False
            },
            "privacy": {
                "analytics": False,
                "crash_reports": True,
                "auto_update": True
            }
        }
    
    def get(self, key, default=None):
        """–ü–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        keys = key.split('/')
        current = self.default_settings
        
        # –ù–∞—Ö–æ–¥–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        for k in keys:
            if k in current:
                current = current[k]
            else:
                return default
        
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        value = self.settings.value(key, current)
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
        if isinstance(current, bool):
            return value.lower() == 'true' if isinstance(value, str) else bool(value)
        elif isinstance(current, int):
            return int(value) if value is not None else current
        elif isinstance(current, float):
            return float(value) if value is not None else current
        else:
            return value if value is not None else current
    
    def set(self, key, value):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        self.settings.setValue(key, value)
        self.settings.sync()
    
    def reset_to_defaults(self):
        """–°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        self.settings.clear()
        self.settings.sync()
    
    def export_settings(self, filename):
        """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ —Ñ–∞–π–ª"""
        try:
            all_settings = {}
            for key in self.settings.allKeys():
                all_settings[key] = self.settings.value(key)
            
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(all_settings, f, indent=2, ensure_ascii=False)
            
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
            return False
    
    def import_settings(self, filename):
        """–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            with open(filename, 'r', encoding='utf-8') as f:
                imported_settings = json.load(f)
            
            for key, value in imported_settings.items():
                self.settings.setValue(key, value)
            
            self.settings.sync()
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
            return False
    
    def get_all_settings(self):
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        settings = {}
        for key in self.settings.allKeys():
            settings[key] = self.settings.value(key)
        return settings

class SettingsDialog(QDialog):
    """–î–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    settings_changed = pyqtSignal(dict)
    
    def __init__(self, parent=None, settings_manager=None):
        super().__init__(parent)
        self.settings_manager = settings_manager or AppSettings()
        self.setWindowTitle("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ - Time Blocking Planner")
        self.setMinimumSize(800, 600)
        self.setup_ui()
        self.load_settings()
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏
        self.apply_styles()
    
    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        layout = QVBoxLayout(self)
        
        # –í–∫–ª–∞–¥–∫–∏
        self.tab_widget = QTabWidget()
        layout.addWidget(self.tab_widget)
        
        # –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏
        self.create_appearance_tab()
        self.create_notifications_tab()
        self.create_behavior_tab()
        self.create_blocks_tab()
        self.create_integration_tab()
        self.create_privacy_tab()
        
        # –ö–Ω–æ–ø–∫–∏
        button_layout = QHBoxLayout()
        
        self.reset_btn = QPushButton("üîÑ –°–±—Ä–æ—Å–∏—Ç—å")
        self.reset_btn.clicked.connect(self.reset_settings)
        
        self.export_btn = QPushButton("üì§ –≠–∫—Å–ø–æ—Ä—Ç")
        self.export_btn.clicked.connect(self.export_settings)
        
        self.import_btn = QPushButton("üì• –ò–º–ø–æ—Ä—Ç")
        self.import_btn.clicked.connect(self.import_settings)
        
        button_layout.addWidget(self.reset_btn)
        button_layout.addStretch()
        button_layout.addWidget(self.export_btn)
        button_layout.addWidget(self.import_btn)
        
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–∏–∞–ª–æ–≥–∞
        self.button_box = QDialogButtonBox(
            QDialogButtonBox.Ok | QDialogButtonBox.Cancel | QDialogButtonBox.Apply
        )
        self.button_box.accepted.connect(self.accept)
        self.button_box.rejected.connect(self.reject)
        self.button_box.button(QDialogButtonBox.Apply).clicked.connect(self.apply_settings)
        
        layout.addLayout(button_layout)
        layout.addWidget(self.button_box)
    
    def create_appearance_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞"""
        tab = QWidget()
        layout = QVBoxLayout(tab)
        
        # –ì—Ä—É–ø–ø–∞ —Ç–µ–º—ã
        theme_group = QGroupBox("üé® –¢–µ–º–∞ –∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ")
        theme_layout = QFormLayout(theme_group)
        
        self.theme_combo = QComboBox()
        self.theme_combo.addItems(["–¢–µ–º–Ω–∞—è", "–°–≤–µ—Ç–ª–∞—è", "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"])
        theme_layout.addRow("–¶–≤–µ—Ç–æ–≤–∞—è —Ç–µ–º–∞:", self.theme_combo)
        
        self.language_combo = QComboBox()
        self.language_combo.addItems(["–†—É—Å—Å–∫–∏–π", "English", "Deutsch"])
        theme_layout.addRow("–Ø–∑—ã–∫:", self.language_combo)
        
        self.animations_check = QCheckBox("–í–∫–ª—é—á–∏—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏")
        theme_layout.addRow(self.animations_check)
        
        self.smooth_scroll_check = QCheckBox("–ü–ª–∞–≤–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞")
        theme_layout.addRow(self.smooth_scroll_check)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —à—Ä–∏—Ñ—Ç–∞
        font_group = QGroupBox("üî§ –®—Ä–∏—Ñ—Ç –∏ —Ç–µ–∫—Å—Ç")
        font_layout = QFormLayout(font_group)
        
        self.font_size_spin = QSpinBox()
        self.font_size_spin.setRange(8, 24)
        self.font_size_spin.setSuffix(" px")
        font_layout.addRow("–†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞:", self.font_size_spin)
        
        self.font_family_combo = QComboBox()
        self.font_family_combo.addItems(["Segoe UI", "Arial", "Helvetica", "Inter", "Roboto"])
        font_layout.addRow("–®—Ä–∏—Ñ—Ç:", self.font_family_combo)
        
        self.opacity_slider = QSlider(Qt.Horizontal)
        self.opacity_slider.setRange(50, 100)
        self.opacity_slider.setTickPosition(QSlider.TicksBelow)
        self.opacity_slider.setTickInterval(10)
        font_layout.addRow("–ù–µ–ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å:", self.opacity_slider)
        
        self.opacity_label = QLabel("100%")
        self.opacity_slider.valueChanged.connect(
            lambda v: self.opacity_label.setText(f"{v}%")
        )
        font_layout.addRow("", self.opacity_label)
        
        layout.addWidget(theme_group)
        layout.addWidget(font_group)
        layout.addStretch()
        
        self.tab_widget.addTab(tab, "üé® –í–Ω–µ—à–Ω–∏–π –≤–∏–¥")
    
    def create_notifications_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        tab = QWidget()
        layout = QVBoxLayout(tab)
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        notify_group = QGroupBox("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
        notify_layout = QFormLayout(notify_group)
        
        self.notify_enabled_check = QCheckBox("–í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
        self.notify_enabled_check.toggled.connect(self.toggle_notification_settings)
        notify_layout.addRow(self.notify_enabled_check)
        
        self.sound_check = QCheckBox("–ó–≤—É–∫–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
        notify_layout.addRow(self.sound_check)
        
        self.popup_check = QCheckBox("–í—Å–ø–ª—ã–≤–∞—é—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
        notify_layout.addRow(self.popup_check)
        
        # –í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        time_group = QGroupBox("‚è∞ –í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        time_layout = QFormLayout(time_group)
        
        self.early_minutes_spin = QSpinBox()
        self.early_minutes_spin.setRange(1, 60)
        self.early_minutes_spin.setSuffix(" –º–∏–Ω—É—Ç")
        time_layout.addRow("–£–≤–µ–¥–æ–º–ª—è—Ç—å –∑–∞:", self.early_minutes_spin)
        
        self.snooze_minutes_spin = QSpinBox()
        self.snooze_minutes_spin.setRange(1, 30)
        self.snooze_minutes_spin.setSuffix(" –º–∏–Ω—É—Ç")
        time_layout.addRow("–û—Ç–∫–ª–∞–¥—ã–≤–∞—Ç—å –Ω–∞:", self.snooze_minutes_spin)
        
        # –†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è
        hours_group = QGroupBox("üïê –†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è")
        hours_layout = QFormLayout(hours_group)
        
        self.work_start_edit = QLineEdit()
        self.work_start_edit.setPlaceholderText("08:00")
        hours_layout.addRow("–ù–∞—á–∞–ª–æ:", self.work_start_edit)
        
        self.work_end_edit = QLineEdit()
        self.work_end_edit.setPlaceholderText("22:00")
        hours_layout.addRow("–û–∫–æ–Ω—á–∞–Ω–∏–µ:", self.work_end_edit)
        
        layout.addWidget(notify_group)
        layout.addWidget(time_group)
        layout.addWidget(hours_group)
        layout.addStretch()
        
        self.tab_widget.addTab(tab, "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
    
    def create_behavior_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ –ø–æ–≤–µ–¥–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        tab = QWidget()
        layout = QVBoxLayout(tab)
        
        # –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        autosave_group = QGroupBox("üíæ –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ")
        autosave_layout = QFormLayout(autosave_group)
        
        self.autosave_check = QCheckBox("–í–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ")
        autosave_layout.addRow(self.autosave_check)
        
        self.autosave_interval_spin = QSpinBox()
        self.autosave_interval_spin.setRange(1, 60)
        self.autosave_interval_spin.setSuffix(" –º–∏–Ω—É—Ç")
        autosave_layout.addRow("–ò–Ω—Ç–µ—Ä–≤–∞–ª:", self.autosave_interval_spin)
        
        self.backup_check = QCheckBox("–°–æ–∑–¥–∞–≤–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏")
        autosave_layout.addRow(self.backup_check)
        
        # –ü–æ–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        startup_group = QGroupBox("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
        startup_layout = QFormLayout(startup_group)
        
        self.start_minimized_check = QCheckBox("–ó–∞–ø—É—Å–∫–∞—Ç—å —Å–≤–µ—Ä–Ω—É—Ç—ã–º")
        startup_layout.addRow(self.start_minimized_check)
        
        self.minimize_to_tray_check = QCheckBox("–°–≤–æ—Ä–∞—á–∏–≤–∞—Ç—å –≤ —Ç—Ä–µ–π")
        startup_layout.addRow(self.minimize_to_tray_check)
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        confirm_group = QGroupBox("‚ùì –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
        confirm_layout = QFormLayout(confirm_group)
        
        self.confirm_deletions_check = QCheckBox("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ")
        confirm_layout.addRow(self.confirm_deletions_check)
        
        self.confirm_exit_check = QCheckBox("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—Ç—å –≤—ã—Ö–æ–¥")
        confirm_layout.addRow(self.confirm_exit_check)
        
        layout.addWidget(autosave_group)
        layout.addWidget(startup_group)
        layout.addWidget(confirm_group)
        layout.addStretch()
        
        self.tab_widget.addTab(tab, "‚öôÔ∏è –ü–æ–≤–µ–¥–µ–Ω–∏–µ")
    
    def create_blocks_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –±–ª–æ–∫–æ–≤"""
        tab = QWidget()
        layout = QVBoxLayout(tab)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        default_group = QGroupBox("‚ö° –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
        default_layout = QFormLayout(default_group)
        
        self.default_duration_spin = QSpinBox()
        self.default_duration_spin.setRange(15, 240)
        self.default_duration_spin.setSuffix(" –º–∏–Ω—É—Ç")
        default_layout.addRow("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:", self.default_duration_spin)
        
        self.default_color_combo = QComboBox()
        colors = ["–ö—Ä–∞—Å–Ω—ã–π", "–°–∏–Ω–∏–π", "–ó–µ–ª–µ–Ω—ã–π", "–û—Ä–∞–Ω–∂–µ–≤—ã–π", "–§–∏–æ–ª–µ—Ç–æ–≤—ã–π"]
        self.default_color_combo.addItems(colors)
        default_layout.addRow("–¶–≤–µ—Ç:", self.default_color_combo)
        
        # –ü–æ–≤–µ–¥–µ–Ω–∏–µ –±–ª–æ–∫–æ–≤
        behavior_group = QGroupBox("üéØ –ü–æ–≤–µ–¥–µ–Ω–∏–µ –±–ª–æ–∫–æ–≤")
        behavior_layout = QFormLayout(behavior_group)
        
        self.show_duration_check = QCheckBox("–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å")
        behavior_layout.addRow(self.show_duration_check)
        
        self.allow_overlap_check = QCheckBox("–†–∞–∑—Ä–µ—à–∏—Ç—å –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ")
        behavior_layout.addRow(self.allow_overlap_check)
        
        self.snap_to_grid_check = QCheckBox("–ü—Ä–∏–≤—è–∑–∫–∞ –∫ —Å–µ—Ç–∫–µ")
        behavior_layout.addRow(self.snap_to_grid_check)
        
        self.grid_size_spin = QSpinBox()
        self.grid_size_spin.setRange(5, 60)
        self.grid_size_spin.setSuffix(" –º–∏–Ω—É—Ç")
        behavior_layout.addRow("–†–∞–∑–º–µ—Ä —Å–µ—Ç–∫–∏:", self.grid_size_spin)
        
        layout.addWidget(default_group)
        layout.addWidget(behavior_group)
        layout.addStretch()
        
        self.tab_widget.addTab(tab, "‚è±Ô∏è –ë–ª–æ–∫–∏")
    
    def create_integration_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π"""
        tab = QWidget()
        layout = QVBoxLayout(tab)
        
        # –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
        export_group = QGroupBox("üì§ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö")
        export_layout = QFormLayout(export_group)
        
        self.export_format_combo = QComboBox()
        self.export_format_combo.addItems(["JSON", "CSV", "XML", "PDF"])
        export_layout.addRow("–§–æ—Ä–º–∞—Ç:", self.export_format_combo)
        
        self.auto_export_check = QCheckBox("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —ç–∫—Å–ø–æ—Ä—Ç")
        export_layout.addRow(self.auto_export_check)
        
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
        sync_group = QGroupBox("‚òÅÔ∏è –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è")
        sync_layout = QFormLayout(sync_group)
        
        self.calendar_sync_check = QCheckBox("–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–º")
        sync_layout.addRow(self.calendar_sync_check)
        
        self.cloud_sync_check = QCheckBox("–û–±–ª–∞—á–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è")
        sync_layout.addRow(self.cloud_sync_check)
        
        layout.addWidget(export_group)
        layout.addWidget(sync_group)
        layout.addStretch()
        
        self.tab_widget.addTab(tab, "üîó –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è")
    
    def create_privacy_tab(self):
        """–í–∫–ª–∞–¥–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏"""
        tab = QWidget()
        layout = QVBoxLayout(tab)
        
        # –ê–Ω–∞–ª–∏—Ç–∏–∫–∞
        analytics_group = QGroupBox("üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞")
        analytics_layout = QFormLayout(analytics_group)
        
        self.analytics_check = QCheckBox("–û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∞–Ω–æ–Ω–∏–º–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
        analytics_layout.addRow(self.analytics_check)
        
        self.crash_reports_check = QCheckBox("–û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ—Ç—á–µ—Ç—ã –æ–± –æ—à–∏–±–∫–∞—Ö")
        analytics_layout.addRow(self.crash_reports_check)
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏—è
        update_group = QGroupBox("üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏—è")
        update_layout = QFormLayout(update_group)
        
        self.auto_update_check = QCheckBox("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
        update_layout.addRow(self.auto_update_check)
        
        self.beta_updates_check = QCheckBox("–ë–µ—Ç–∞-–≤–µ—Ä—Å–∏–∏")
        update_layout.addRow(self.beta_updates_check)
        
        # –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å
        privacy_group = QGroupBox("üîí –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å")
        privacy_layout = QFormLayout(privacy_group)
        
        self.clear_history_btn = QPushButton("–û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é")
        self.clear_history_btn.clicked.connect(self.clear_history)
        privacy_layout.addRow("–ò—Å—Ç–æ—Ä–∏—è:", self.clear_history_btn)
        
        self.clear_cache_btn = QPushButton("–û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à")
        self.clear_cache_btn.clicked.connect(self.clear_cache)
        privacy_layout.addRow("–ö—ç—à:", self.clear_cache_btn)
        
        layout.addWidget(analytics_group)
        layout.addWidget(update_group)
        layout.addWidget(privacy_group)
        layout.addStretch()
        
        self.tab_widget.addTab(tab, "üîí –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å")
    
    def apply_styles(self):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π –∫ –¥–∏–∞–ª–æ–≥—É"""
        self.setStyleSheet("""
            QDialog {
                background: qlineargradient(x1:0, y1:0, x2:1, y2:1,
                    stop:0 #1A1A1A, stop:1 #2A2A2A);
                color: white;
            }
            QGroupBox {
                color: #FF2B43;
                font-weight: bold;
                font-size: 14px;
                border: 2px solid #333;
                border-radius: 8px;
                margin-top: 10px;
                padding-top: 10px;
            }
            QGroupBox::title {
                subcontrol-origin: margin;
                left: 10px;
                padding: 0 5px;
            }
            QTabWidget::pane {
                border: 1px solid #333;
                border-radius: 8px;
            }
            QTabBar::tab {
                background: #333;
                color: #CCC;
                padding: 8px 16px;
                margin: 2px;
                border-radius: 4px;
            }
            QTabBar::tab:selected {
                background: #FF2B43;
                color: white;
            }
            QTabBar::tab:hover {
                background: #FF4C63;
            }
        """)
    
    def load_settings(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ UI"""
        # –í–Ω–µ—à–Ω–∏–π –≤–∏–¥
        theme_map = {"dark": 0, "light": 1, "auto": 2}
        self.theme_combo.setCurrentIndex(
            theme_map.get(self.settings_manager.get("appearance/theme"), 0)
        )
        
        self.language_combo.setCurrentIndex(
            {"ru": 0, "en": 1, "de": 2}.get(self.settings_manager.get("appearance/language"), 0)
        )
        
        self.animations_check.setChecked(
            self.settings_manager.get("appearance/animations_enabled", True)
        )
        self.smooth_scroll_check.setChecked(
            self.settings_manager.get("appearance/smooth_scrolling", True)
        )
        self.font_size_spin.setValue(
            self.settings_manager.get("appearance/font_size", 12)
        )
        self.opacity_slider.setValue(
            int(self.settings_manager.get("appearance/opacity", 1.0) * 100)
        )
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        self.notify_enabled_check.setChecked(
            self.settings_manager.get("notifications/enabled", True)
        )
        self.sound_check.setChecked(
            self.settings_manager.get("notifications/sound_enabled", True)
        )
        self.popup_check.setChecked(
            self.settings_manager.get("notifications/popup_enabled", True)
        )
        self.early_minutes_spin.setValue(
            self.settings_manager.get("notifications/early_minutes", 2)
        )
        self.snooze_minutes_spin.setValue(
            self.settings_manager.get("notifications/snooze_minutes", 5)
        )
        self.work_start_edit.setText(
            self.settings_manager.get("notifications/working_hours_start", "08:00")
        )
        self.work_end_edit.setText(
            self.settings_manager.get("notifications/working_hours_end", "22:00")
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        self.toggle_notification_settings(self.notify_enabled_check.isChecked())
    
    def toggle_notification_settings(self, enabled):
        """–í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        self.sound_check.setEnabled(enabled)
        self.popup_check.setEnabled(enabled)
        self.early_minutes_spin.setEnabled(enabled)
        self.snooze_minutes_spin.setEnabled(enabled)
        self.work_start_edit.setEnabled(enabled)
        self.work_end_edit.setEnabled(enabled)
    
    def collect_settings(self):
        """–°–±–æ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ UI"""
        settings = {
            "appearance/theme": ["dark", "light", "auto"][self.theme_combo.currentIndex()],
            "appearance/language": ["ru", "en", "de"][self.language_combo.currentIndex()],
            "appearance/animations_enabled": self.animations_check.isChecked(),
            "appearance/smooth_scrolling": self.smooth_scroll_check.isChecked(),
            "appearance/font_size": self.font_size_spin.value(),
            "appearance/opacity": self.opacity_slider.value() / 100.0,
            
            "notifications/enabled": self.notify_enabled_check.isChecked(),
            "notifications/sound_enabled": self.sound_check.isChecked(),
            "notifications/popup_enabled": self.popup_check.isChecked(),
            "notifications/early_minutes": self.early_minutes_spin.value(),
            "notifications/snooze_minutes": self.snooze_minutes_spin.value(),
            "notifications/working_hours_start": self.work_start_edit.text(),
            "notifications/working_hours_end": self.work_end_edit.text(),
            
            "behavior/auto_save": self.autosave_check.isChecked(),
            "behavior/auto_save_interval": self.autosave_interval_spin.value(),
            "behavior/minimize_to_tray": self.minimize_to_tray_check.isChecked(),
            "behavior/start_minimized": self.start_minimized_check.isChecked(),
            "behavior/confirm_deletions": self.confirm_deletions_check.isChecked(),
            "behavior/backup_on_start": self.backup_check.isChecked(),
            
            "time_blocks/default_duration": self.default_duration_spin.value(),
            "time_blocks/default_color": ["#FF2B43", "#2B43FF", "#2BFF43", "#FFA52B", "#A52BFF"][self.default_color_combo.currentIndex()],
            "time_blocks/show_duration": self.show_duration_check.isChecked(),
            "time_blocks/allow_overlap": self.allow_overlap_check.isChecked(),
            "time_blocks/snap_to_grid": self.snap_to_grid_check.isChecked(),
            "time_blocks/grid_size": self.grid_size_spin.value(),
            
            "integration/export_format": ["json", "csv", "xml", "pdf"][self.export_format_combo.currentIndex()],
            "integration/auto_export": self.auto_export_check.isChecked(),
            "integration/calendar_sync": self.calendar_sync_check.isChecked(),
            "integration/cloud_sync": self.cloud_sync_check.isChecked(),
            
            "privacy/analytics": self.analytics_check.isChecked(),
            "privacy/crash_reports": self.crash_reports_check.isChecked(),
            "privacy/auto_update": self.auto_update_check.isChecked()
        }
        
        return settings
    
    def apply_settings(self):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        try:
            settings = self.collect_settings()
            
            for key, value in settings.items():
                self.settings_manager.set(key, value)
            
            # –°–∏–≥–Ω–∞–ª –æ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
            self.settings_changed.emit(settings)
            
            return True
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
            return False
    
    def reset_settings(self):
        """–°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        reply = QMessageBox.question(
            self, 
            "–°–±—Ä–æ—Å –Ω–∞—Å—Ç—Ä–æ–µ–∫", 
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é?",
            QMessageBox.Yes | QMessageBox.No
        )
        
        if reply == QMessageBox.Yes:
            self.settings_manager.reset_to_defaults()
            self.load_settings()
    
    def export_settings(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ —Ñ–∞–π–ª"""
        filename, _ = QFileDialog.getSaveFileName(
            self, 
            "–≠–∫—Å–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫", 
            f"timeblocking_settings_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json",
            "JSON Files (*.json)"
        )
        
        if filename:
            if self.settings_manager.export_settings(filename):
                QMessageBox.information(self, "–£—Å–ø–µ—Ö", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
            else:
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
    
    def import_settings(self):
        """–ò–º–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ —Ñ–∞–π–ª–∞"""
        filename, _ = QFileDialog.getOpenFileName(
            self, 
            "–ò–º–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫", 
            "", 
            "JSON Files (*.json)"
        )
        
        if filename:
            if self.settings_manager.import_settings(filename):
                self.load_settings()
                QMessageBox.information(self, "–£—Å–ø–µ—Ö", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
            else:
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
    
    def clear_history(self):
        """–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏"""
        reply = QMessageBox.question(
            self,
            "–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏",
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è?",
            QMessageBox.Yes | QMessageBox.No
        )
        
        if reply == QMessageBox.Yes:
            # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏
            pass
    
    def clear_cache(self):
        """–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞"""
        reply = QMessageBox.question(
            self,
            "–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞",
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –∫—ç—à –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è?",
            QMessageBox.Yes | QMessageBox.No
        )
        
        if reply == QMessageBox.Yes:
            # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞
            pass
    
    def accept(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –¥–∏–∞–ª–æ–≥–∞"""
        if self.apply_settings():
            super().accept()
    
    def reject(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –¥–∏–∞–ª–æ–≥–∞"""
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—ã
        super().reject()

# –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
class SettingsUtils:
    """–£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
    
    @staticmethod
    def migrate_old_settings(old_settings_path, new_settings_manager):
        """–ú–∏–≥—Ä–∞—Ü–∏—è —Å—Ç–∞—Ä—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        try:
            if os.path.exists(old_settings_path):
                with open(old_settings_path, 'r') as f:
                    old_settings = json.load(f)
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Å—Ç–∞—Ä—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç
                for key, value in old_settings.items():
                    new_settings_manager.set(key, value)
                
                return True
        except:
            return False
    
    @staticmethod
    def validate_settings(settings):
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        errors = []
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
        try:
            datetime.strptime(settings.get('notifications/working_hours_start', '08:00'), '%H:%M')
            datetime.strptime(settings.get('notifications/working_hours_end', '22:00'), '%H:%M')
        except ValueError:
            errors.append("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        if not 0 <= settings.get('appearance/opacity', 1.0) <= 1.0:
            errors.append("–ù–µ–ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–µ–∂–¥—É 0 –∏ 1")
        
        return errors
    
    @staticmethod
    def create_backup(settings_manager, backup_dir="backups"):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        try:
            os.makedirs(backup_dir, exist_ok=True)
            backup_file = os.path.join(
                backup_dir, 
                f"settings_backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
            )
            return settings_manager.export_settings(backup_file)
        except:
            return False

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
app_settings = AppSettings()

def get_settings():
    """–ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    return app_settings

if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    import sys
    from PyQt5.QtWidgets import QApplication
    
    app = QApplication(sys.argv)
    dialog = SettingsDialog()
    dialog.show()
    sys.exit(app.exec_())