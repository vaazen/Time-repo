"""
üîî –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–º–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—É—é –¥–æ—Å—Ç–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞–º–∏
"""

import asyncio
import json
import logging
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Callable, Any
from dataclasses import dataclass, asdict
from enum import Enum
import threading
import queue
from pathlib import Path
import uuid

from PyQt5.QtCore import QObject, pyqtSignal, QTimer, QThread
from PyQt5.QtWidgets import QSystemTrayIcon, QMessageBox, QApplication
from PyQt5.QtGui import QIcon

from config_manager import get_config
from cache_manager import cached, get_cache_manager

class NotificationType(Enum):
    """–¢–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    TASK_REMINDER = "task_reminder"
    BREAK_SUGGESTION = "break_suggestion"
    PRODUCTIVITY_ALERT = "productivity_alert"
    DEADLINE_WARNING = "deadline_warning"
    FOCUS_TIME = "focus_time"
    ACHIEVEMENT = "achievement"
    SYSTEM_INFO = "system_info"
    ERROR = "error"

class NotificationPriority(Enum):
    """–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    LOW = 1
    MEDIUM = 2
    HIGH = 3
    URGENT = 4

class NotificationChannel(Enum):
    """–ö–∞–Ω–∞–ª—ã –¥–æ—Å—Ç–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    SYSTEM_TRAY = "system_tray"
    POPUP = "popup"
    SLACK = "slack"
    EMAIL = "email"
    SOUND = "sound"
    DESKTOP = "desktop"

@dataclass
class Notification:
    """–ú–æ–¥–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    id: str
    type: NotificationType
    priority: NotificationPriority
    title: str
    message: str
    channels: List[NotificationChannel]
    scheduled_time: datetime
    created_at: datetime
    task_id: Optional[str] = None
    user_id: Optional[str] = None
    metadata: Dict[str, Any] = None
    retry_count: int = 0
    max_retries: int = 3
    delivered: bool = False
    read: bool = False
    
    def __post_init__(self):
        if self.metadata is None:
            self.metadata = {}

class NotificationRule:
    """–ü—Ä–∞–≤–∏–ª–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    
    def __init__(self, name: str, condition: Callable, 
                 notification_factory: Callable, enabled: bool = True):
        self.name = name
        self.condition = condition
        self.notification_factory = notification_factory
        self.enabled = enabled
        self.last_triggered = None

class NotificationDeliveryService:
    """–°–µ—Ä–≤–∏—Å –¥–æ—Å—Ç–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    
    def __init__(self):
        self.logger = logging.getLogger(__name__)
        self.delivery_handlers = {}
        self._register_default_handlers()
    
    def _register_default_handlers(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        self.delivery_handlers[NotificationChannel.SYSTEM_TRAY] = self._deliver_system_tray
        self.delivery_handlers[NotificationChannel.POPUP] = self._deliver_popup
        self.delivery_handlers[NotificationChannel.DESKTOP] = self._deliver_desktop
        self.delivery_handlers[NotificationChannel.SOUND] = self._deliver_sound
    
    async def deliver(self, notification: Notification) -> bool:
        """–î–æ—Å—Ç–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ –≤—Å–µ–º –∫–∞–Ω–∞–ª–∞–º"""
        success = True
        
        for channel in notification.channels:
            try:
                handler = self.delivery_handlers.get(channel)
                if handler:
                    await handler(notification)
                else:
                    self.logger.warning(f"–ù–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel}")
                    success = False
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ —á–µ—Ä–µ–∑ {channel}: {e}")
                success = False
        
        return success
    
    async def _deliver_system_tray(self, notification: Notification):
        """–î–æ—Å—Ç–∞–≤–∫–∞ —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º–Ω—ã–π —Ç—Ä–µ–π"""
        try:
            app = QApplication.instance()
            if app and hasattr(app, 'tray_icon'):
                app.tray_icon.showMessage(
                    notification.title,
                    notification.message,
                    QSystemTrayIcon.Information,
                    5000  # 5 —Å–µ–∫—É–Ω–¥
                )
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Ç—Ä–µ—è: {e}")
    
    async def _deliver_popup(self, notification: Notification):
        """–î–æ—Å—Ç–∞–≤–∫–∞ —á–µ—Ä–µ–∑ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ –æ–∫–Ω–æ"""
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ Qt
            def show_popup():
                QMessageBox.information(
                    None,
                    notification.title,
                    notification.message
                )
            
            # –ü–ª–∞–Ω–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            QTimer.singleShot(0, show_popup)
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ popup: {e}")
    
    async def _deliver_desktop(self, notification: Notification):
        """–î–æ—Å—Ç–∞–≤–∫–∞ —á–µ—Ä–µ–∑ desktop notification (Windows/Linux)"""
        try:
            import plyer
            plyer.notification.notify(
                title=notification.title,
                message=notification.message,
                timeout=5
            )
        except ImportError:
            self.logger.warning("plyer –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è desktop —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ desktop —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
    
    async def _deliver_sound(self, notification: Notification):
        """–î–æ—Å—Ç–∞–≤–∫–∞ –∑–≤—É–∫–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        try:
            import winsound
            if notification.priority == NotificationPriority.URGENT:
                winsound.MessageBeep(winsound.MB_ICONEXCLAMATION)
            else:
                winsound.MessageBeep(winsound.MB_ICONINFORMATION)
        except ImportError:
            pass  # winsound –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –Ω–∞ Windows
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∑–≤—É–∫–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

class AsyncNotificationManager(QObject):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    
    notification_sent = pyqtSignal(str)  # ID —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    notification_failed = pyqtSignal(str, str)  # ID, –æ—à–∏–±–∫–∞
    
    def __init__(self):
        super().__init__()
        self.logger = logging.getLogger(__name__)
        self.config = get_config()
        
        # –û—á–µ—Ä–µ–¥–∏ –∏ —Å–µ—Ä–≤–∏—Å—ã
        self.notification_queue = asyncio.Queue()
        self.scheduled_notifications = []
        self.delivery_service = NotificationDeliveryService()
        
        # –ü—Ä–∞–≤–∏–ª–∞ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.rules = []
        self.notification_history = []
        self.user_preferences = self._load_user_preferences()
        
        # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ü–∏–∫–ª
        self.loop = None
        self.running = False
        
        # –ö—ç—à –¥–ª—è —á–∞—Å—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        self.cache = get_cache_manager()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        self._start_async_processor()
    
    def _start_async_processor(self):
        """–ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞"""
        def run_async_loop():
            self.loop = asyncio.new_event_loop()
            asyncio.set_event_loop(self.loop)
            self.running = True
            
            try:
                self.loop.run_until_complete(self._async_processor())
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–µ: {e}")
            finally:
                self.running = False
        
        thread = threading.Thread(target=run_async_loop, daemon=True)
        thread.start()
    
    async def _async_processor(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫"""
        while self.running:
            try:
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—á–µ—Ä–µ–¥—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                await self._process_notification_queue()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                await self._check_scheduled_notifications()
                
                # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª–∞
                await self._apply_notification_rules()
                
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞
                await asyncio.sleep(1)
                
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")
                await asyncio.sleep(5)
    
    async def _process_notification_queue(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        try:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –æ—á–µ—Ä–µ–¥–∏
            while not self.notification_queue.empty():
                notification = await asyncio.wait_for(
                    self.notification_queue.get(), timeout=0.1
                )
                await self._deliver_notification(notification)
                
        except asyncio.TimeoutError:
            pass  # –û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏: {e}")
    
    async def _deliver_notification(self, notification: Notification):
        """–î–æ—Å—Ç–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            if not self._should_deliver(notification):
                return
            
            # –î–æ—Å—Ç–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            success = await self.delivery_service.deliver(notification)
            
            if success:
                notification.delivered = True
                self.notification_sent.emit(notification.id)
                self.logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {notification.id} –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ")
            else:
                notification.retry_count += 1
                if notification.retry_count < notification.max_retries:
                    # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è
                    await asyncio.sleep(2 ** notification.retry_count)
                    await self.notification_queue.put(notification)
                else:
                    self.notification_failed.emit(notification.id, "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            self.notification_history.append(notification)
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
            if len(self.notification_history) > 1000:
                self.notification_history = self.notification_history[-500:]
                
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {notification.id}: {e}")
            self.notification_failed.emit(notification.id, str(e))
    
    async def _check_scheduled_notifications(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        now = datetime.now()
        ready_notifications = []
        
        for notification in self.scheduled_notifications[:]:
            if notification.scheduled_time <= now:
                ready_notifications.append(notification)
                self.scheduled_notifications.remove(notification)
        
        for notification in ready_notifications:
            await self.notification_queue.put(notification)
    
    async def _apply_notification_rules(self):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        for rule in self.rules:
            if not rule.enabled:
                continue
            
            try:
                if rule.condition():
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–ª–æ –ª–∏ –ø—Ä–∞–≤–∏–ª–æ –Ω–µ–¥–∞–≤–Ω–æ
                    if (rule.last_triggered and 
                        datetime.now() - rule.last_triggered < timedelta(minutes=5)):
                        continue
                    
                    notification = rule.notification_factory()
                    if notification:
                        await self.send_notification(notification)
                        rule.last_triggered = datetime.now()
                        
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø—Ä–∞–≤–∏–ª–µ {rule.name}: {e}")
    
    def _should_deliver(self, notification: Notification) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —Å–ª–µ–¥—É–µ—Ç –ª–∏ –¥–æ—Å—Ç–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if not self.config.ui.show_notifications:
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è "–Ω–µ –±–µ—Å–ø–æ–∫–æ–∏—Ç—å"
        now = datetime.now().time()
        if hasattr(self.user_preferences, 'quiet_hours'):
            start, end = self.user_preferences['quiet_hours']
            if start <= now <= end:
                return notification.priority == NotificationPriority.URGENT
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Å—Ç–æ—Ç—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        recent_count = sum(1 for n in self.notification_history[-10:] 
                          if n.type == notification.type)
        if recent_count >= 3:  # –ù–µ –±–æ–ª–µ–µ 3 —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–¥–Ω–æ–≥–æ —Ç–∏–ø–∞ –ø–æ–¥—Ä—è–¥
            return notification.priority >= NotificationPriority.HIGH
        
        return True
    
    def _load_user_preferences(self) -> Dict:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        try:
            prefs_file = Path("user_notification_preferences.json")
            if prefs_file.exists():
                with open(prefs_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        
        return {
            'quiet_hours': None,
            'preferred_channels': [NotificationChannel.SYSTEM_TRAY.value],
            'priority_threshold': NotificationPriority.MEDIUM.value
        }
    
    # –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    
    async def send_notification(self, notification: Notification):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        await self.notification_queue.put(notification)
    
    def send_notification_sync(self, notification: Notification):
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        if self.loop and self.running:
            asyncio.run_coroutine_threadsafe(
                self.send_notification(notification), self.loop
            )
    
    def schedule_notification(self, notification: Notification):
        """–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        self.scheduled_notifications.append(notification)
        self.scheduled_notifications.sort(key=lambda n: n.scheduled_time)
    
    def add_rule(self, rule: NotificationRule):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        self.rules.append(rule)
    
    def remove_rule(self, rule_name: str):
        """–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        self.rules = [r for r in self.rules if r.name != rule_name]
    
    @cached(ttl=60)  # –ö—ç—à–∏—Ä—É–µ–º –Ω–∞ 1 –º–∏–Ω—É—Ç—É
    def get_statistics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        total = len(self.notification_history)
        if total == 0:
            return {'total': 0}
        
        delivered = sum(1 for n in self.notification_history if n.delivered)
        by_type = {}
        by_priority = {}
        
        for notification in self.notification_history:
            # –ü–æ —Ç–∏–ø–∞–º
            type_name = notification.type.value
            by_type[type_name] = by_type.get(type_name, 0) + 1
            
            # –ü–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º
            priority_name = notification.priority.name
            by_priority[priority_name] = by_priority.get(priority_name, 0) + 1
        
        return {
            'total': total,
            'delivered': delivered,
            'delivery_rate': (delivered / total) * 100,
            'by_type': by_type,
            'by_priority': by_priority,
            'queue_size': self.notification_queue.qsize(),
            'scheduled_count': len(self.scheduled_notifications)
        }
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        self.running = False
        if self.loop:
            self.loop.call_soon_threadsafe(self.loop.stop)

# –§–∞–±—Ä–∏—á–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

def create_task_reminder(task_id: str, task_title: str, 
                        scheduled_time: datetime) -> Notification:
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∑–∞–¥–∞—á–µ"""
    return Notification(
        id=str(uuid.uuid4()),
        type=NotificationType.TASK_REMINDER,
        priority=NotificationPriority.MEDIUM,
        title="–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–¥–∞—á–µ",
        message=f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å: {task_title}",
        channels=[NotificationChannel.SYSTEM_TRAY, NotificationChannel.SOUND],
        scheduled_time=scheduled_time,
        created_at=datetime.now(),
        task_id=task_id
    )

def create_break_suggestion(work_duration: int) -> Notification:
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ –ø–µ—Ä–µ—Ä—ã–≤–µ"""
    return Notification(
        id=str(uuid.uuid4()),
        type=NotificationType.BREAK_SUGGESTION,
        priority=NotificationPriority.LOW,
        title="–í—Ä–µ–º—è –¥–ª—è –ø–µ—Ä–µ—Ä—ã–≤–∞",
        message=f"–í—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ —É–∂–µ {work_duration} –º–∏–Ω—É—Ç. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º —Å–¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ—Ä—ã–≤.",
        channels=[NotificationChannel.SYSTEM_TRAY],
        scheduled_time=datetime.now(),
        created_at=datetime.now(),
        metadata={'work_duration': work_duration}
    )

def create_deadline_warning(task_title: str, hours_left: int) -> Notification:
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –¥–µ–¥–ª–∞–π–Ω–µ"""
    priority = NotificationPriority.URGENT if hours_left <= 2 else NotificationPriority.HIGH
    
    return Notification(
        id=str(uuid.uuid4()),
        type=NotificationType.DEADLINE_WARNING,
        priority=priority,
        title="–ü—Ä–∏–±–ª–∏–∂–∞–µ—Ç—Å—è –¥–µ–¥–ª–∞–π–Ω!",
        message=f"–î–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è '{task_title}' –æ—Å—Ç–∞–ª–æ—Å—å {hours_left} —á–∞—Å–æ–≤",
        channels=[NotificationChannel.SYSTEM_TRAY, NotificationChannel.POPUP, NotificationChannel.SOUND],
        scheduled_time=datetime.now(),
        created_at=datetime.now(),
        metadata={'hours_left': hours_left}
    )

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
notification_manager = AsyncNotificationManager()

def get_notification_manager() -> AsyncNotificationManager:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    return notification_manager
