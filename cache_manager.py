"""
üíæ –°–∏—Å—Ç–µ–º–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –±—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–º –¥–∞–Ω–Ω—ã–º
"""

import json
import pickle
import hashlib
import time
from typing import Any, Optional, Dict, Callable, Union
from pathlib import Path
from datetime import datetime, timedelta
import threading
import logging
from functools import wraps
import weakref

class CacheEntry:
    """–ó–∞–ø–∏—Å—å –≤ –∫—ç—à–µ"""
    
    def __init__(self, value: Any, ttl: Optional[float] = None):
        self.value = value
        self.created_at = time.time()
        self.ttl = ttl
        self.access_count = 0
        self.last_accessed = self.created_at
    
    def is_expired(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è"""
        if self.ttl is None:
            return False
        return time.time() - self.created_at > self.ttl
    
    def access(self) -> Any:
        """–î–æ—Å—Ç—É–ø –∫ –∑–Ω–∞—á–µ–Ω–∏—é —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        self.access_count += 1
        self.last_accessed = time.time()
        return self.value

class MemoryCache:
    """–ö—ç—à –≤ –ø–∞–º—è—Ç–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π TTL –∏ LRU"""
    
    def __init__(self, max_size: int = 1000, default_ttl: Optional[float] = None):
        self.max_size = max_size
        self.default_ttl = default_ttl
        self._cache: Dict[str, CacheEntry] = {}
        self._lock = threading.RLock()
        self.logger = logging.getLogger(__name__)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.hits = 0
        self.misses = 0
        self.evictions = 0
    
    def get(self, key: str) -> Optional[Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –∫—ç—à–∞"""
        with self._lock:
            if key not in self._cache:
                self.misses += 1
                return None
            
            entry = self._cache[key]
            
            if entry.is_expired():
                del self._cache[key]
                self.misses += 1
                return None
            
            self.hits += 1
            return entry.access()
    
    def set(self, key: str, value: Any, ttl: Optional[float] = None) -> None:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –∫—ç—à"""
        with self._lock:
            if ttl is None:
                ttl = self.default_ttl
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞
            if len(self._cache) >= self.max_size and key not in self._cache:
                self._evict_lru()
            
            self._cache[key] = CacheEntry(value, ttl)
    
    def delete(self, key: str) -> bool:
        """–£–¥–∞–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –∫—ç—à–∞"""
        with self._lock:
            if key in self._cache:
                del self._cache[key]
                return True
            return False
    
    def clear(self) -> None:
        """–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞"""
        with self._lock:
            self._cache.clear()
            self.hits = 0
            self.misses = 0
            self.evictions = 0
    
    def _evict_lru(self) -> None:
        """–£–¥–∞–ª–µ–Ω–∏–µ –Ω–∞–∏–º–µ–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞"""
        if not self._cache:
            return
        
        # –ù–∞—Ö–æ–¥–∏–º —ç–ª–µ–º–µ–Ω—Ç —Å –Ω–∞–∏–º–µ–Ω—å—à–∏–º –≤—Ä–µ–º–µ–Ω–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–æ—Å—Ç—É–ø–∞
        lru_key = min(self._cache.keys(), 
                     key=lambda k: self._cache[k].last_accessed)
        
        del self._cache[lru_key]
        self.evictions += 1
    
    def cleanup_expired(self) -> int:
        """–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –∑–∞–ø–∏—Å–µ–π"""
        with self._lock:
            expired_keys = [key for key, entry in self._cache.items() 
                          if entry.is_expired()]
            
            for key in expired_keys:
                del self._cache[key]
            
            return len(expired_keys)
    
    def get_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞"""
        with self._lock:
            total_requests = self.hits + self.misses
            hit_rate = (self.hits / total_requests * 100) if total_requests > 0 else 0
            
            return {
                'size': len(self._cache),
                'max_size': self.max_size,
                'hits': self.hits,
                'misses': self.misses,
                'evictions': self.evictions,
                'hit_rate': hit_rate
            }

class FileCache:
    """–§–∞–π–ª–æ–≤—ã–π –∫—ç—à –¥–ª—è –¥–æ–ª–≥–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è"""
    
    def __init__(self, cache_dir: str = "cache", max_size_mb: int = 100):
        self.cache_dir = Path(cache_dir) if isinstance(cache_dir, str) else cache_dir
        self.cache_dir.mkdir(exist_ok=True)
        self.max_size_bytes = max_size_mb * 1024 * 1024
        self.logger = logging.getLogger(__name__)
    
    def _get_file_path(self, key: str) -> Path:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É –∫—ç—à–∞"""
        # –°–æ–∑–¥–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ –∫–ª—é—á–∞
        safe_key = hashlib.md5(key.encode()).hexdigest()
        return self.cache_dir / f"{safe_key}.cache"
    
    def get(self, key: str) -> Optional[Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–æ–≤–æ–≥–æ –∫—ç—à–∞"""
        try:
            file_path = self._get_file_path(key)
            
            if not file_path.exists():
                return None
            
            with open(file_path, 'rb') as f:
                data = pickle.load(f)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º TTL
            if 'ttl' in data and data['ttl'] is not None:
                if time.time() - data['created_at'] > data['ttl']:
                    file_path.unlink()  # –£–¥–∞–ª—è–µ–º –∏—Å—Ç–µ–∫—à–∏–π —Ñ–∞–π–ª
                    return None
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –¥–æ—Å—Ç—É–ø–∞
            file_path.touch()
            
            return data['value']
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–æ–≤–æ–≥–æ –∫—ç—à–∞: {e}")
            return None
    
    def set(self, key: str, value: Any, ttl: Optional[float] = None) -> bool:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Ñ–∞–π–ª–æ–≤—ã–π –∫—ç—à"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞
            self._cleanup_if_needed()
            
            file_path = self._get_file_path(key)
            
            data = {
                'value': value,
                'created_at': time.time(),
                'ttl': ttl
            }
            
            with open(file_path, 'wb') as f:
                pickle.dump(data, f)
            
            return True
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª–æ–≤—ã–π –∫—ç—à: {e}")
            return False
    
    def delete(self, key: str) -> bool:
        """–£–¥–∞–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–æ–≤–æ–≥–æ –∫—ç—à–∞"""
        try:
            file_path = self._get_file_path(key)
            if file_path.exists():
                file_path.unlink()
                return True
            return False
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–æ–≤–æ–≥–æ –∫—ç—à–∞: {e}")
            return False
    
    def clear(self) -> None:
        """–û—á–∏—Å—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–≥–æ –∫—ç—à–∞"""
        try:
            for file_path in self.cache_dir.glob("*.cache"):
                file_path.unlink()
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤–æ–≥–æ –∫—ç—à–∞: {e}")
    
    def _cleanup_if_needed(self) -> None:
        """–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞"""
        try:
            total_size = sum(f.stat().st_size for f in self.cache_dir.glob("*.cache"))
            
            if total_size > self.max_size_bytes:
                # –£–¥–∞–ª—è–µ–º —Å–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã
                files = list(self.cache_dir.glob("*.cache"))
                files.sort(key=lambda f: f.stat().st_atime)
                
                while total_size > self.max_size_bytes * 0.8 and files:
                    file_to_remove = files.pop(0)
                    total_size -= file_to_remove.stat().st_size
                    file_to_remove.unlink()
                    
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤–æ–≥–æ –∫—ç—à–∞: {e}")

class CacheManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–æ–≥–æ –∫—ç—à–∞"""
    
    def __init__(self, memory_cache_size: int = 1000, 
                 file_cache_size_mb: int = 100,
                 default_ttl: Optional[float] = None):
        
        self.memory_cache = MemoryCache(memory_cache_size, default_ttl)
        self.file_cache = FileCache(max_size_mb=file_cache_size_mb)
        self.logger = logging.getLogger(__name__)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –æ—á–∏—Å—Ç–∫—É
        self._start_cleanup_thread()
    
    def get(self, key: str, use_file_cache: bool = True) -> Optional[Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –∫—ç—à–∞ (—Å–Ω–∞—á–∞–ª–∞ –ø–∞–º—è—Ç—å, –ø–æ—Ç–æ–º —Ñ–∞–π–ª)"""
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–º—è—Ç—å
        value = self.memory_cache.get(key)
        if value is not None:
            return value
        
        # –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª–æ–≤—ã–π –∫—ç—à
        if use_file_cache:
            value = self.file_cache.get(key)
            if value is not None:
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤ –ø–∞–º—è—Ç—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
                self.memory_cache.set(key, value)
                return value
        
        return None
    
    def set(self, key: str, value: Any, ttl: Optional[float] = None,
            use_file_cache: bool = True) -> None:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –∫—ç—à"""
        # –í—Å–µ–≥–¥–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç—å
        self.memory_cache.set(key, value, ttl)
        
        # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        if use_file_cache:
            self.file_cache.set(key, value, ttl)
    
    def delete(self, key: str) -> bool:
        """–£–¥–∞–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ –≤—Å–µ—Ö —É—Ä–æ–≤–Ω–µ–π –∫—ç—à–∞"""
        memory_deleted = self.memory_cache.delete(key)
        file_deleted = self.file_cache.delete(key)
        return memory_deleted or file_deleted
    
    def clear(self) -> None:
        """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —É—Ä–æ–≤–Ω–µ–π –∫—ç—à–∞"""
        self.memory_cache.clear()
        self.file_cache.clear()
    
    def get_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è"""
        return {
            'memory_cache': self.memory_cache.get_stats(),
            'file_cache_dir': str(self.file_cache.cache_dir),
            'file_cache_size_mb': self.file_cache.max_size_bytes / (1024 * 1024)
        }
    
    def _start_cleanup_thread(self) -> None:
        """–ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø–æ—Ç–æ–∫–∞ –æ—á–∏—Å—Ç–∫–∏"""
        def cleanup_worker():
            while True:
                try:
                    time.sleep(300)  # –ö–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
                    expired_count = self.memory_cache.cleanup_expired()
                    if expired_count > 0:
                        self.logger.debug(f"–û—á–∏—â–µ–Ω–æ {expired_count} –∏—Å—Ç–µ–∫—à–∏—Ö –∑–∞–ø–∏—Å–µ–π –∏–∑ –∫—ç—à–∞")
                except Exception as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–π –æ—á–∏—Å—Ç–∫–µ –∫—ç—à–∞: {e}")
        
        cleanup_thread = threading.Thread(target=cleanup_worker, daemon=True)
        cleanup_thread.start()

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ñ—É–Ω–∫—Ü–∏–π
def cached(ttl: Optional[float] = None, use_file_cache: bool = False, 
          key_func: Optional[Callable] = None):
    """
    –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ñ—É–Ω–∫—Ü–∏–π
    
    Args:
        ttl: –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫—ç—à–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        use_file_cache: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–∞–π–ª–æ–≤—ã–π –∫—ç—à
        key_func: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–∞ –∫—ç—à–∞
    """
    def decorator(func):
        @wraps(func)
        def wrapper(*args, **kwargs):
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á –∫—ç—à–∞
            if key_func:
                cache_key = key_func(*args, **kwargs)
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è —Ñ—É–Ω–∫—Ü–∏–∏ –∏ —Ö—ç—à –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
                args_str = str(args) + str(sorted(kwargs.items()))
                cache_key = f"{func.__name__}:{hashlib.md5(args_str.encode()).hexdigest()}"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            cached_result = cache_manager.get(cache_key, use_file_cache)
            if cached_result is not None:
                return cached_result
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏ –∫—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result = func(*args, **kwargs)
            cache_manager.set(cache_key, result, ttl, use_file_cache)
            
            return result
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫—ç—à–µ–º
        wrapper.clear_cache = lambda: cache_manager.clear()
        wrapper.cache_stats = lambda: cache_manager.get_stats()
        
        return wrapper
    return decorator

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫—ç—à–∞
cache_manager = CacheManager()

def get_cache_manager() -> CacheManager:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∫—ç—à–∞"""
    return cache_manager
