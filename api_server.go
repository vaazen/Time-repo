// api_server.go - Go –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å –¥–ª—è Time Blocking API
package main

import (
    "encoding/json"
    "fmt"
    "log"
    "net/http"
    "time"
)

// TaskStats –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞–¥–∞—á
type TaskStats struct {
    TotalTasks     int       `json:"total_tasks"`
    CompletedTasks int       `json:"completed_tasks"`
    Efficiency     float64   `json:"efficiency"`
    LastUpdated    time.Time `json:"last_updated"`
}

// Task –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∑–∞–¥–∞—á—É
type Task struct {
    ID          string    `json:"id"`
    Title       string    `json:"title"`
    Description string    `json:"description"`
    Priority    string    `json:"priority"`
    Status      string    `json:"status"`
    StartTime   time.Time `json:"start_time"`
    EndTime     time.Time `json:"end_time"`
    CreatedAt   time.Time `json:"created_at"`
}

// –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –∑–∞–¥–∞—á (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ - –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö)
var tasks []Task
var taskStats TaskStats

func main() {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    initTestData()
    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤
    http.HandleFunc("/api/tasks", tasksHandler)
    http.HandleFunc("/api/stats", statsHandler)
    http.HandleFunc("/api/health", healthHandler)
    
    // CORS middleware
    http.HandleFunc("/", corsMiddleware)
    
    fmt.Println("üöÄ Time Blocking API Server –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8080")
    fmt.Println("üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã:")
    fmt.Println("   GET  /api/tasks  - –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏")
    fmt.Println("   GET  /api/stats  - –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
    fmt.Println("   GET  /api/health - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞")
    
    log.Fatal(http.ListenAndServe(":8080", nil))
}

func initTestData() {
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
    now := time.Now()
    
    tasks = []Task{
        {
            ID:          "1",
            Title:       "–ò–∑—É—á–∏—Ç—å Go",
            Description: "–û—Å–≤–æ–∏—Ç—å –æ—Å–Ω–æ–≤—ã —è–∑—ã–∫–∞ Go –¥–ª—è –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤",
            Priority:    "high",
            Status:      "completed",
            StartTime:   now.Add(-2 * time.Hour),
            EndTime:     now.Add(-1 * time.Hour),
            CreatedAt:   now.Add(-3 * time.Hour),
        },
        {
            ID:          "2", 
            Title:       "–ù–∞–ø–∏—Å–∞—Ç—å API",
            Description: "–°–æ–∑–¥–∞—Ç—å REST API –¥–ª—è Time Blocking –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è",
            Priority:    "urgent",
            Status:      "in_progress",
            StartTime:   now,
            EndTime:     now.Add(2 * time.Hour),
            CreatedAt:   now.Add(-1 * time.Hour),
        },
        {
            ID:          "3",
            Title:       "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ",
            Description: "–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã API",
            Priority:    "medium",
            Status:      "planned",
            StartTime:   now.Add(2 * time.Hour),
            EndTime:     now.Add(4 * time.Hour),
            CreatedAt:   now,
        },
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    updateStats()
}

func updateStats() {
    completed := 0
    for _, task := range tasks {
        if task.Status == "completed" {
            completed++
        }
    }
    
    efficiency := 0.0
    if len(tasks) > 0 {
        efficiency = float64(completed) / float64(len(tasks)) * 100
    }
    
    taskStats = TaskStats{
        TotalTasks:     len(tasks),
        CompletedTasks: completed,
        Efficiency:     efficiency,
        LastUpdated:    time.Now(),
    }
}

func tasksHandler(w http.ResponseWriter, r *http.Request) {
    setCORSHeaders(w)
    
    switch r.Method {
    case "GET":
        w.Header().Set("Content-Type", "application/json")
        json.NewEncoder(w).Encode(tasks)
        
    case "POST":
        var newTask Task
        if err := json.NewDecoder(r.Body).Decode(&newTask); err != nil {
            http.Error(w, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON", http.StatusBadRequest)
            return
        }
        
        newTask.ID = fmt.Sprintf("%d", len(tasks)+1)
        newTask.CreatedAt = time.Now()
        tasks = append(tasks, newTask)
        updateStats()
        
        w.Header().Set("Content-Type", "application/json")
        w.WriteHeader(http.StatusCreated)
        json.NewEncoder(w).Encode(newTask)
        
    default:
        http.Error(w, "–ú–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è", http.StatusMethodNotAllowed)
    }
}

func statsHandler(w http.ResponseWriter, r *http.Request) {
    setCORSHeaders(w)
    
    if r.Method != "GET" {
        http.Error(w, "–¢–æ–ª—å–∫–æ GET –∑–∞–ø—Ä–æ—Å—ã", http.StatusMethodNotAllowed)
        return
    }
    
    updateStats()
    w.Header().Set("Content-Type", "application/json")
    json.NewEncoder(w).Encode(taskStats)
}

func healthHandler(w http.ResponseWriter, r *http.Request) {
    setCORSHeaders(w)
    
    health := map[string]interface{}{
        "status":    "healthy",
        "timestamp": time.Now(),
        "version":   "1.0.0",
        "service":   "time-blocking-api",
        "uptime":    "running",
    }
    
    w.Header().Set("Content-Type", "application/json")
    json.NewEncoder(w).Encode(health)
}

func setCORSHeaders(w http.ResponseWriter) {
    w.Header().Set("Access-Control-Allow-Origin", "*")
    w.Header().Set("Access-Control-Allow-Methods", "GET, POST, PUT, DELETE, OPTIONS")
    w.Header().Set("Access-Control-Allow-Headers", "Content-Type, Authorization")
}

func corsMiddleware(w http.ResponseWriter, r *http.Request) {
    setCORSHeaders(w)
    
    if r.Method == "OPTIONS" {
        w.WriteHeader(http.StatusOK)
        return
    }
    
    // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ API –∑–∞–ø—Ä–æ—Å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 404
    if r.URL.Path != "/" {
        http.NotFound(w, r)
        return
    }
    
    // –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    fmt.Fprintf(w, `
    <html>
    <head>
        <title>Time Blocking API</title>
        <style>
            body { font-family: Arial, sans-serif; margin: 40px; background: #1e1e1e; color: white; }
            .endpoint { background: #2d2d2d; padding: 15px; margin: 10px 0; border-radius: 8px; }
            .method { color: #4CAF50; font-weight: bold; }
        </style>
    </head>
    <body>
        <h1>üöÄ Time Blocking API Server</h1>
        <p>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ API —Å–µ—Ä–≤–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏!</p>
        
        <h2>üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã:</h2>
        
        <div class="endpoint">
            <span class="method">GET</span> /api/tasks - –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏
        </div>
        
        <div class="endpoint">
            <span class="method">POST</span> /api/tasks - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
        </div>
        
        <div class="endpoint">
            <span class="method">GET</span> /api/stats - –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        </div>
        
        <div class="endpoint">
            <span class="method">GET</span> /api/health - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞
        </div>
        
        <p><em>–°–æ–∑–¥–∞–Ω–æ –Ω–∞ Go –¥–ª—è –≤—ã—Å–æ–∫–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏! üêπ</em></p>
    </body>
    </html>
    `)
}
