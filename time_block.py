# time_block.py - –£–ª—É—á—à–µ–Ω–Ω—ã–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π –±–ª–æ–∫ —Å –∞–Ω–∏–º–∞—Ü–∏—è–º–∏
from PyQt5.QtWidgets import (QWidget, QLabel, QVBoxLayout, QHBoxLayout, 
                             QMenu, QAction, QGraphicsDropShadowEffect, QDialog, QSlider)
from PyQt5.QtCore import Qt, pyqtSignal, QPoint, QPropertyAnimation, QEasingCurve
from PyQt5.QtGui import QMouseEvent, QFont, QPainter, QColor, QPen, QLinearGradient
from animations import PremiumTimeBlockAnimator

class PremiumTimeBlock(QWidget):
    """–í—Ä–µ–º–µ–Ω–Ω–æ–π –±–ª–æ–∫ —Å –ø—Ä–µ–º–∏—É–º –∞–Ω–∏–º–∞—Ü–∏—è–º–∏ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏"""
    deleted = pyqtSignal(object)
    edited = pyqtSignal(object)
    color_changed = pyqtSignal(object, str)
    time_changed = pyqtSignal(object)
    
    def __init__(self, start_time, end_time, title="", color=None, notify=True, parent=None):
        super().__init__(parent)
        self.start_time = start_time
        self.end_time = end_time
        self.title = title
        self.color = color or "#FF2B43"
        self.notify = notify
        self.is_dragging = False
        self.is_resizing = False
        self.resize_edge = None
        self.drag_start_pos = None
        self.block_id = id(self)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ UI
        self.init_ui()
        self.setup_animations()
        self.apply_styles()
        
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é
        self.setContextMenuPolicy(Qt.CustomContextMenu)
        self.customContextMenuRequested.connect(self.show_context_menu)
        
        # –°–æ–±—ã—Ç–∏—è –º—ã—à–∏
        self.setMouseTracking(True)
    
    def init_ui(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        self.setMinimumHeight(40)
        self.setMinimumWidth(200)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π layout
        layout = QVBoxLayout()
        layout.setContentsMargins(12, 8, 12, 8)
        layout.setSpacing(6)
        self.setLayout(layout)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        header_layout = QHBoxLayout()
        
        self.title_label = QLabel(self.title)
        self.title_label.setAlignment(Qt.AlignLeft)
        self.title_label.setWordWrap(True)
        header_layout.addWidget(self.title_label)
        
        self.notify_indicator = QLabel("üîî" if self.notify else "üîï")
        self.notify_indicator.setToolTip("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã" if self.notify else "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã")
        header_layout.addWidget(self.notify_indicator)
        
        layout.addLayout(header_layout)
        
        # –í—Ä–µ–º—è –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        time_text = f"{self.start_time.strftime('%H:%M')} - {self.end_time.strftime('%H:%M')}"
        duration = (self.end_time - self.start_time).total_seconds() / 60
        time_text += f" ({int(duration)} –º–∏–Ω)"
        
        self.time_label = QLabel(time_text)
        self.time_label.setAlignment(Qt.AlignLeft)
        layout.addWidget(self.time_label)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–µ—Å–ª–∏ –∑–∞–¥–∞—á–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ)
        self.progress_layout = QHBoxLayout()
        self.progress_label = QLabel("–í—ã–ø–æ–ª–Ω–µ–Ω–æ:")
        self.progress_slider = QSlider(Qt.Horizontal)
        self.progress_slider.setRange(0, 100)
        self.progress_slider.setValue(0)
        self.progress_slider.valueChanged.connect(self.on_progress_changed)
        
        self.progress_layout.addWidget(self.progress_label)
        self.progress_layout.addWidget(self.progress_slider)
        self.progress_layout.setContentsMargins(0, 5, 0, 0)
        
        # –°–∫—Ä—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.progress_label.hide()
        self.progress_slider.hide()
        
        layout.addLayout(self.progress_layout)
    
    def setup_animations(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–π"""
        self.animator = PremiumTimeBlockAnimator(self)
        
        # –¢–µ–Ω—å –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
        self.shadow_effect = QGraphicsDropShadowEffect()
        self.shadow_effect.setBlurRadius(20)
        self.shadow_effect.setColor(QColor(0, 0, 0, 80))
        self.shadow_effect.setOffset(0, 5)
        self.setGraphicsEffect(self.shadow_effect)
        
        # –ê–Ω–∏–º–∞—Ü–∏—è —Ç–µ–Ω–∏
        self.shadow_animation = QPropertyAnimation(self.shadow_effect, b"blurRadius")
        self.shadow_animation.setDuration(300)
        self.shadow_animation.setEasingCurve(QEasingCurve.OutCubic)
    
    def apply_styles(self):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π"""
        self.setStyleSheet(f"""
            PremiumTimeBlock {{
                background: qlineargradient(x1:0, y1:0, x2:1, y2:0,
                    stop:0 {self.color}33, stop:0.5 {self.color}22, stop:1 {self.color}11);
                border: 2px solid {self.color};
                border-radius: 12px;
                margin: 2px;
            }}
            PremiumTimeBlock:hover {{
                border: 2px solid {self.color}CC;
                background: qlineargradient(x1:0, y1:0, x2:1, y2:0,
                    stop:0 {self.color}55, stop:0.5 {self.color}44, stop:1 {self.color}33);
            }}
            QLabel {{
                color: #FFFFFF;
                font-size: 11px;
                background: transparent;
            }}
            QLabel[objectName="title_label"] {{
                font-weight: bold;
                font-size: 12px;
                color: #FFFFFF;
            }}
            QSlider::groove:horizontal {{
                background: #333333;
                height: 4px;
                border-radius: 2px;
            }}
            QSlider::handle:horizontal {{
                background: {self.color};
                width: 12px;
                height: 12px;
                border-radius: 6px;
                margin: -4px 0;
            }}
        """)
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
        self.title_label.setStyleSheet(f"""
            background: {self.color};
            padding: 4px 8px;
            border-radius: 6px;
            color: white;
            font-weight: bold;
        """)
    
    def enterEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥–∞ –∫—É—Ä—Å–æ—Ä–∞"""
        self.animator.animate_hover_enter()
        self.shadow_animation.setStartValue(20)
        self.shadow_animation.setEndValue(40)
        self.shadow_animation.start()
        super().enterEvent(event)
    
    def leaveEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã—Ö–æ–¥–∞ –∫—É—Ä—Å–æ—Ä–∞"""
        self.animator.animate_hover_leave()
        self.shadow_animation.setStartValue(40)
        self.shadow_animation.setEndValue(20)
        self.shadow_animation.start()
        super().leaveEvent(event)
    
    def mousePressEvent(self, event: QMouseEvent):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –º—ã—à–∏"""
        if event.button() == Qt.LeftButton:
            pos = event.pos()
            height = self.height()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–ª–∏–∫–Ω—É–ª–∏ –ª–∏ –Ω–∞ –≥—Ä–∞–Ω–∏—Ü—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
            if pos.y() < 10:
                self.is_resizing = True
                self.resize_edge = 'top'
            elif pos.y() > height - 10:
                self.is_resizing = True
                self.resize_edge = 'bottom'
            else:
                self.is_dragging = True
                self.drag_start_pos = event.globalPos() - self.frameGeometry().topLeft()
            
            event.accept()
    
    def mouseMoveEvent(self, event: QMouseEvent):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏"""
        pos = event.pos()
        height = self.height()
        
        # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–∞ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏ –Ω–∞ –≥—Ä–∞–Ω–∏—Ü—ã
        if pos.y() < 8 or pos.y() > height - 8:
            self.setCursor(Qt.SizeVerCursor)
        else:
            self.setCursor(Qt.ArrowCursor)
        
        if self.is_dragging and event.buttons() == Qt.LeftButton:
            new_pos = event.globalPos() - self.drag_start_pos
            self.move(new_pos)
            self.time_changed.emit(self)
            event.accept()
        elif self.is_resizing and event.buttons() == Qt.LeftButton:
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
            event.accept()
    
    def mouseReleaseEvent(self, event: QMouseEvent):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—É—Å–∫–∞–Ω–∏—è –º—ã—à–∏"""
        self.is_dragging = False
        self.is_resizing = False
        self.resize_edge = None
        event.accept()
    
    def mouseDoubleClickEvent(self, event: QMouseEvent):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–≤–æ–π–Ω–æ–≥–æ –∫–ª–∏–∫–∞"""
        self.edit_block()
        event.accept()
    
    def show_context_menu(self, pos):
        """–ü–æ–∫–∞–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é"""
        menu = QMenu(self)
        menu.setStyleSheet("""
            QMenu {
                background: #2B2B2B;
                color: white;
                border: 1px solid #FF2B43;
                border-radius: 8px;
            }
            QMenu::item {
                padding: 8px 16px;
            }
            QMenu::item:selected {
                background: #FF2B43;
            }
        """)
        
        # –î–µ–π—Å—Ç–≤–∏—è –º–µ–Ω—é
        edit_action = QAction("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", self)
        edit_action.triggered.connect(self.edit_block)
        menu.addAction(edit_action)
        
        color_menu = QMenu("üé® –ò–∑–º–µ–Ω–∏—Ç—å —Ü–≤–µ—Ç", self)
        colors = ["#FF2B43", "#FF4C63", "#FF6B7F", "#FF8A99", 
                 "#FF4C43", "#FF6B5F", "#FF8A79", "#FFA999"]
        
        for color in colors:
            color_action = QAction("‚ñ†", self)
            color_action.setStyleSheet(f"color: {color}; font-size: 16px;")
            color_action.triggered.connect(lambda checked, c=color: self.set_color(c))
            color_menu.addAction(color_action)
        
        menu.addMenu(color_menu)
        
        progress_action = QAction("üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å", self)
        progress_action.setCheckable(True)
        progress_action.setChecked(self.progress_slider.isVisible())
        progress_action.triggered.connect(self.toggle_progress_tracking)
        menu.addAction(progress_action)
        
        notify_action = QAction("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", self)
        notify_action.setCheckable(True)
        notify_action.setChecked(self.notify)
        notify_action.triggered.connect(self.toggle_notifications)
        menu.addAction(notify_action)
        
        menu.addSeparator()
        
        delete_action = QAction("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", self)
        delete_action.triggered.connect(lambda: self.deleted.emit(self))
        menu.addAction(delete_action)
        
        menu.exec_(self.mapToGlobal(pos))
    
    def edit_block(self):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–ª–æ–∫–∞"""
        from .modals import BlockEditorModal
        modal = BlockEditorModal(self, self.parent().parent())
        if modal.exec_() == QDialog.Accepted:
            self.update_from_modal(modal.get_data())
    
    def update_from_modal(self, data):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞"""
        self.title = data['title']
        self.start_time = data['start_time']
        self.end_time = data['end_time']
        self.color = data['color']
        self.notify = data['notify']
        
        self.update_display()
        self.apply_styles()
        
        self.edited.emit(self)
    
    def update_display(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        time_text = f"{self.start_time.strftime('%H:%M')} - {self.end_time.strftime('%H:%M')}"
        duration = (self.end_time - self.start_time).total_seconds() / 60
        time_text += f" ({int(duration)} –º–∏–Ω)"
        
        self.title_label.setText(self.title)
        self.time_label.setText(time_text)
        self.notify_indicator.setText("üîî" if self.notify else "üîï")
        self.notify_indicator.setToolTip("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã" if self.notify else "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã")
    
    def set_color(self, color):
        """–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –±–ª–æ–∫–∞"""
        self.color = color
        self.apply_styles()
        self.color_changed.emit(self, color)
    
    def toggle_notifications(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        self.notify = not self.notify
        self.notify_indicator.setText("üîî" if self.notify else "üîï")
        self.notify_indicator.setToolTip("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã" if self.notify else "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã")
    
    def toggle_progress_tracking(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        visible = not self.progress_label.isVisible()
        self.progress_label.setVisible(visible)
        self.progress_slider.setVisible(visible)
    
    def on_progress_changed(self, value):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞"""
        self.progress_label.setText(f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ: {value}%")
    
    def get_duration_minutes(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö"""
        return int((self.end_time - self.start_time).total_seconds() / 60)
    
    def paintEvent(self, event):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤"""
        super().paintEvent(event)
        
        # –†–∏—Å—É–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
        painter = QPainter(self)
        painter.setPen(QPen(QColor(255, 255, 255, 150), 2))
        
        # –í–µ—Ä—Ö–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞
        painter.drawLine(15, 6, self.width() - 15, 6)
        # –ù–∏–∂–Ω—è—è –≥—Ä–∞–Ω–∏—Ü–∞
        painter.drawLine(15, self.height() - 6, self.width() - 15, self.height() - 6)
        
        # –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ, —Ä–∏—Å—É–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        if self.progress_slider.isVisible() and self.progress_slider.value() > 0:
            progress = self.progress_slider.value()
            painter.setPen(QPen(QColor(0, 255, 0, 100), 3))
            painter.drawLine(0, self.height() - 2, 
                           self.width() * progress / 100, self.height() - 2)