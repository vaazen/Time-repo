from datetime import datetime, time
import datetime as dt
import sys
import os
from datetime import datetime, timedelta
from PyQt5.QtWidgets import (QApplication, QMainWindow, QVBoxLayout, QHBoxLayout, 
                             QWidget, QPushButton, QLabel, QScrollArea, QMessageBox,
                             QInputDialog, QMenuBar, QAction, QFileDialog, QDialog,
                             QSplitter, QSizePolicy, QFrame, QStackedWidget, QTabWidget,
                             QGraphicsDropShadowEffect, QSystemTrayIcon, QMenu, QStatusBar)
from PyQt5.QtCore import Qt, QTimer, QPoint, QPropertyAnimation, QEasingCurve, QSize, QTimer
from PyQt5.QtGui import QIcon, QPainter, QPalette, QLinearGradient, QFont, QFontDatabase, QColor

from styles import PremiumTheme
from animations import (FadeAnimation, SlideAnimation, NotificationAnimator, 
                        BouncyAnimation, PulseAnimation, SlideStackedAnimation)
from modern_widgets import PremiumButton, GlassFrame, GradientLabel, StatisticsCard, NavigationBar
from time_block import PremiumTimeBlock
from time_scale import PremiumTimeScale
from data_manager import PremiumDataManager
from notification_manager import PremiumNotificationManager
from settings import SettingsDialog, get_settings

class SplashScreen(QDialog):
    """–≠–∫—Ä–∞–Ω –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    def __init__(self):
        super().__init__()
        self.setWindowFlags(Qt.FramelessWindowHint | Qt.WindowStaysOnTopHint)
        self.setAttribute(Qt.WA_TranslucentBackground)
        self.setFixedSize(400, 300)
        
        self.setup_ui()
        self.start_animation()
    
    def setup_ui(self):
        layout = QVBoxLayout()
        layout.setAlignment(Qt.AlignCenter)
        
        # –õ–æ–≥–æ—Ç–∏–ø
        self.logo_label = QLabel("‚è∞")
        self.logo_label.setStyleSheet("font-size: 80px;")
        self.logo_label.setAlignment(Qt.AlignCenter)
        
        # –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        self.title_label = GradientLabel("Time Blocking Planner")
        self.title_label.setStyleSheet("font-size: 28px; font-weight: bold; margin: 20px;")
        
        # –í–µ—Ä—Å–∏—è
        self.version_label = QLabel("Premium Edition v2.0")
        self.version_label.setStyleSheet("color: #FF6B7F; font-size: 14px;")
        self.version_label.setAlignment(Qt.AlignCenter)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
        self.progress_frame = QFrame()
        self.progress_frame.setFixedSize(200, 4)
        self.progress_frame.setStyleSheet("""
            QFrame {
                background: #333;
                border-radius: 2px;
            }
        """)
        
        self.progress_bar = QFrame(self.progress_frame)
        self.progress_bar.setGeometry(0, 0, 0, 4)
        self.progress_bar.setStyleSheet("""
            QFrame {
                background: qlineargradient(x1:0, y1:0, x2:1, y2:0,
                    stop:0 #FF2B43, stop:1 #FF6B7F);
                border-radius: 2px;
            }
        """)
        
        layout.addWidget(self.logo_label)
        layout.addWidget(self.title_label)
        layout.addWidget(self.version_label)
        layout.addSpacing(40)
        layout.addWidget(self.progress_frame)
        layout.setAlignment(self.progress_frame, Qt.AlignCenter)
        
        self.setLayout(layout)
        
        # –°—Ç–µ–∫–ª—è–Ω–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç
        self.setStyleSheet("""
            QDialog {
                background: rgba(13, 13, 13, 0.95);
                border: 1px solid rgba(255, 43, 67, 0.3);
                border-radius: 20px;
            }
        """)
        
        # –¢–µ–Ω—å
        shadow = QGraphicsDropShadowEffect()
        shadow.setBlurRadius(30)
        shadow.setColor(QColor(0, 0, 0, 150))
        shadow.setOffset(0, 0)
        self.setGraphicsEffect(shadow)
    
    def start_animation(self):
        """–ê–Ω–∏–º–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ —ç—Ñ—Ñ–µ–∫—Ç–∞–º–∏"""
        # –ê–Ω–∏–º–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
        self.progress_animation = QPropertyAnimation(self.progress_bar, b"geometry")
        self.progress_animation.setDuration(2000)
        self.progress_animation.setStartValue(self.progress_bar.geometry())
        self.progress_animation.setEndValue(self.progress_frame.rect())
        self.progress_animation.setEasingCurve(QEasingCurve.InOutQuad)
        
        # –ê–Ω–∏–º–∞—Ü–∏—è –ø—É–ª—å—Å–∞—Ü–∏–∏ –ª–æ–≥–æ—Ç–∏–ø–∞
        self.logo_pulse = QPropertyAnimation(self.logo_label, b"size")
        self.logo_pulse.setDuration(1500)
        self.logo_pulse.setEasingCurve(QEasingCurve.InOutSine)
        self.logo_pulse.setLoopCount(-1)
        
        original_size = self.logo_label.size()
        pulse_size = QSize(int(original_size.width() * 1.1), int(original_size.height() * 1.1))
        
        self.logo_pulse.setKeyValueAt(0, original_size)
        self.logo_pulse.setKeyValueAt(0.5, pulse_size)
        self.logo_pulse.setKeyValueAt(1, original_size)
        
        # –ó–∞–ø—É—Å–∫ –∞–Ω–∏–º–∞—Ü–∏–π
        self.progress_animation.start()
        self.logo_pulse.start()
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É–ª—å—Å–∞—Ü–∏—é –ª–æ–≥–æ—Ç–∏–ø–∞ —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
        QTimer.singleShot(2000, self.logo_pulse.stop)

class MainWindow(QMainWindow):
    """–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø—Ä–µ–º–∏—É–º-–∫–ª–∞—Å—Å–∞"""
    def __init__(self):
        super().__init__()

        self.setMinimumSize(800, 600)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
        self.setMaximumSize(1920, 1080)  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä


        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω –∑–∞–≥—Ä—É–∑–∫–∏
        self.splash = SplashScreen()
        self.splash.show()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.time_blocks = []
        self.current_date = datetime.now().date()
        self.settings_manager = get_settings()
        
        # –ú–µ–Ω–µ–¥–∂–µ—Ä—ã
        self.data_manager = PremiumDataManager()
        self.notification_manager = PremiumNotificationManager(self)
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        self.load_settings()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ UI
        self.init_ui()
        self.setup_animations()
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        QTimer.singleShot(2000, self.finish_loading)
    
    def resizeEvent(self, event):
        # –ü—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –æ–±–Ω–æ–≤–ª—è–µ–º –æ—Ç—Ä–∏—Å–æ–≤–∫—É
        super().resizeEvent(event)
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        QTimer.singleShot(10, self.update_widgets)
    
    def update_widgets(self):
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –∫–∞—Å—Ç–æ–º–Ω—ã–µ –≤–∏–¥–∂–µ—Ç—ã
        for widget in self.findChildren(QWidget):
            widget.update()
    
    def finish_loading(self):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        self.splash.close()
        self.show()
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è
        self.load_current_day()
        
        # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
        self.start_services()
        
        # –ü–æ–∫–∞–∑ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        self.show_welcome_message()
    
    def init_ui(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        self.setWindowTitle("Time Blocking Planner - Premium Edition")
        self.setGeometry(100, 50, 1600, 1000)
        self.setMinimumSize(1200, 700)
        
        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º—ã
        PremiumTheme.apply_dark_palette(QApplication.instance())
        self.setStyleSheet(PremiumTheme.get_stylesheet())
        
        # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –≤–∏–¥–∂–µ—Ç
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        
        # –ì–ª–∞–≤–Ω—ã–π layout
        main_layout = QVBoxLayout()
        main_layout.setContentsMargins(20, 10, 20, 10)
        main_layout.setSpacing(15)
        central_widget.setLayout(main_layout)
        
        # –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å
        self.setup_header(main_layout)
        
        # –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å
        self.setup_navigation(main_layout)
        
        # –û—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ
        self.setup_content(main_layout)
        
        # –°—Ç–∞—Ç—É—Å –±–∞—Ä
        self.setup_status_bar()
        
        # –ú–µ–Ω—é
        self.setup_menu()
        
        # –°–∏—Å—Ç–µ–º–Ω—ã–π —Ç—Ä–µ–π
        self.setup_tray()
    
    def setup_header(self, layout):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ—Ä—Ö–Ω–µ–π –ø–∞–Ω–µ–ª–∏"""
        header_frame = GlassFrame()
        header_layout = QHBoxLayout(header_frame)
        
        # –õ–æ–≥–æ—Ç–∏–ø –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ
        logo_layout = QHBoxLayout()
        logo_label = QLabel("‚è∞")
        logo_label.setStyleSheet("font-size: 32px; margin-right: 10px;")
        
        title_label = GradientLabel("Time Blocking Planner")
        title_label.setStyleSheet("font-size: 24px; font-weight: bold;")
        
        logo_layout.addWidget(logo_label)
        logo_layout.addWidget(title_label)
        logo_layout.addStretch()
        
        # –î–∞—Ç–∞
        self.date_label = QLabel()
        self.update_date_display()
        self.date_label.setStyleSheet("font-size: 16px; color: #FF6B7F; font-weight: bold;")
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        controls_layout = QHBoxLayout()
        controls_layout.setSpacing(10)
        
        control_buttons = [
            ("üéØ –ù–æ–≤—ã–π –¥–µ–Ω—å", self.new_day, "secondary"),
            ("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", self.save_current_day, "secondary"),
            ("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", self.show_statistics, ""),
            ("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", self.show_settings, ""),
            ("üé® –¢–µ–º–∞", self.change_theme, "")
        ]
        
        for text, slot, style in control_buttons:
            btn = PremiumButton(text)
            if style:
                btn.setProperty("class", style)
            btn.clicked.connect(slot)
            btn.setFixedHeight(35)
            controls_layout.addWidget(btn)
        
        header_layout.addLayout(logo_layout)
        header_layout.addSpacing(20)
        header_layout.addWidget(self.date_label)
        header_layout.addStretch()
        header_layout.addLayout(controls_layout)
        
        layout.addWidget(header_frame)
    
    def setup_navigation(self, layout):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–π –ø–∞–Ω–µ–ª–∏"""
        self.nav_bar = NavigationBar()
        self.nav_bar.tabChanged.connect(self.switch_tab)
        layout.addWidget(self.nav_bar)
    
    def setup_content(self, layout):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
        content_splitter = QSplitter(Qt.Horizontal)
        
        # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å (—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞)
        self.sidebar = self.create_sidebar()
        content_splitter.addWidget(self.sidebar)
        content_splitter.setStretchFactor(0, 0)
        content_splitter.setStretchFactor(1, 1)
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å
        self.stacked_widget = QStackedWidget()
        
        # –í–∫–ª–∞–¥–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        self.schedule_tab = self.create_schedule_tab()
        self.stacked_widget.addWidget(self.schedule_tab)
        
        # –í–∫–ª–∞–¥–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self.stats_tab = self.create_stats_tab()
        self.stacked_widget.addWidget(self.stats_tab)
        
        # –í–∫–ª–∞–¥–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        self.settings_tab = self.create_settings_tab()
        self.stacked_widget.addWidget(self.settings_tab)
        
        content_splitter.addWidget(self.stacked_widget)
        content_splitter.setSizes([300, 1000])
        
        layout.addWidget(content_splitter)
    
    def create_sidebar(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏"""
        sidebar = QScrollArea()
        sidebar.setWidgetResizable(True)
        sidebar.setFixedWidth(300)
        sidebar.setStyleSheet("QScrollArea { border: none; background: transparent; }")
        
        sidebar_widget = QWidget()
        sidebar_layout = QVBoxLayout(sidebar_widget)
        sidebar_layout.setSpacing(15)
        
        # –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        quick_actions = GlassFrame()
        quick_layout = QVBoxLayout(quick_actions)
        
        quick_title = QLabel("–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è")
        quick_title.setStyleSheet("font-size: 16px; font-weight: bold; color: #FF2B43;")
        quick_layout.addWidget(quick_title)
        
        quick_buttons = [
            ("‚ûï –ë—ã—Å—Ç—Ä—ã–π –±–ª–æ–∫", self.quick_add_block),
            ("üìÖ –ù–∞ —Å–µ–≥–æ–¥–Ω—è", self.focus_today),
            ("üöÄ –ê–≤—Ç–æ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", self.auto_schedule),
            ("üßπ –û—á–∏—Å—Ç–∏—Ç—å –¥–µ–Ω—å", self.clear_day)
        ]
        
        for text, slot in quick_buttons:
            btn = PremiumButton(text)
            btn.clicked.connect(slot)
            btn.setFixedHeight(35)
            quick_layout.addWidget(btn)
        
        sidebar_layout.addWidget(quick_actions)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–Ω—è
        self.stats_cards = GlassFrame()
        stats_layout = QVBoxLayout(self.stats_cards)
        
        stats_title = QLabel("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–Ω—è")
        stats_title.setStyleSheet("font-size: 16px; font-weight: bold; color: #FF2B43;")
        stats_layout.addWidget(stats_title)
        
        self.blocks_card = StatisticsCard("–ë–ª–æ–∫–∏", "0", "—à—Ç")
        self.time_card = StatisticsCard("–í—Ä–µ–º—è", "0:00", "—á–∞—Å–æ–≤")
        self.productivity_card = StatisticsCard("–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", "0", "%")
        
        stats_layout.addWidget(self.blocks_card)
        stats_layout.addWidget(self.time_card)
        stats_layout.addWidget(self.productivity_card)
        
        sidebar_layout.addWidget(self.stats_cards)
        sidebar_layout.addStretch()
        
        sidebar.setWidget(sidebar_widget)
        return sidebar
    
    def create_schedule_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        tab_widget = QWidget()
        layout = QHBoxLayout(tab_widget)
        layout.setContentsMargins(0, 0, 0, 0)
        layout.setSpacing(0)
        
        # –®–∫–∞–ª–∞ –≤—Ä–µ–º–µ–Ω–∏
        self.time_scale = PremiumTimeScale()
        self.time_scale.setFixedWidth(120)
        layout.addWidget(self.time_scale)
        
        # –û–±–ª–∞—Å—Ç—å –±–ª–æ–∫–æ–≤
        blocks_container = QWidget()
        blocks_layout = QVBoxLayout(blocks_container)
        blocks_layout.setContentsMargins(0, 0, 0, 0)
        
        # –ü–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –±–ª–æ–∫–æ–≤
        tools_frame = QFrame()
        tools_layout = QHBoxLayout(tools_frame)
        
        view_buttons = [
            ("üìã –°–ø–∏—Å–æ–∫", self.switch_to_list_view),
            ("‚è∞ –í—Ä–µ–º—è", self.switch_to_time_view),
            ("üéØ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç", self.switch_to_priority_view)
        ]
        
        for text, slot in view_buttons:
            btn = PremiumButton(text)
            btn.clicked.connect(slot)
            btn.setFixedHeight(30)
            tools_layout.addWidget(btn)
        
        tools_layout.addStretch()
        
        # –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        add_btn = PremiumButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –±–ª–æ–∫")
        add_btn.clicked.connect(self.add_time_block_dialog)
        add_btn.setFixedHeight(30)
        tools_layout.addWidget(add_btn)
        
        blocks_layout.addWidget(tools_frame)
        
        # –û–±–ª–∞—Å—Ç—å –¥–ª—è –±–ª–æ–∫–æ–≤
        self.blocks_scroll = QScrollArea()
        self.blocks_scroll.setWidgetResizable(True)
        self.blocks_scroll.setVerticalScrollBarPolicy(Qt.ScrollBarAsNeeded)
        
        self.blocks_widget = QWidget()
        self.blocks_widget.setMouseTracking(True)
        self.blocks_widget.mousePressEvent = self.handle_canvas_click
        self.blocks_layout = QVBoxLayout(self.blocks_widget)
        self.blocks_layout.setAlignment(Qt.AlignTop)
        self.blocks_layout.setSpacing(10)
        
        self.blocks_scroll.setWidget(self.blocks_widget)
        blocks_layout.addWidget(self.blocks_scroll)
        
        layout.addWidget(blocks_container)
        
        return tab_widget
    
    def create_stats_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        tab_widget = QWidget()
        layout = QVBoxLayout(tab_widget)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = QLabel("üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        title.setStyleSheet("font-size: 24px; font-weight: bold; color: #FF2B43; margin: 20px;")
        title.setAlignment(Qt.AlignCenter)
        layout.addWidget(title)
        
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats_info = QLabel("–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏")
        stats_info.setStyleSheet("font-size: 16px; color: #CCCCCC;")
        stats_info.setAlignment(Qt.AlignCenter)
        layout.addWidget(stats_info)
        
        return tab_widget
    
    def create_settings_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        tab_widget = QWidget()
        layout = QVBoxLayout(tab_widget)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = QLabel("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        title.setStyleSheet("font-size: 24px; font-weight: bold; color: #FF2B43; margin: 20px;")
        title.setAlignment(Qt.AlignCenter)
        layout.addWidget(title)
        
        # –ó–¥–µ—Å—å –±—É–¥—É—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        settings_info = QLabel("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏")
        settings_info.setStyleSheet("font-size: 16px; color: #CCCCCC;")
        settings_info.setAlignment(Qt.AlignCenter)
        layout.addWidget(settings_info)
        
        return tab_widget
    
    def setup_status_bar(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∞—Ç—É—Å –±–∞—Ä–∞"""
        status_bar = QStatusBar()
        self.setStatusBar(status_bar)
        
        # –õ–µ–≤–∞—è —á–∞—Å—Ç—å - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–Ω–µ
        self.day_info_label = QLabel("–ó–∞–≥—Ä—É–∑–∫–∞...")
        status_bar.addWidget(self.day_info_label, 1)
        
        # –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å - —Å–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        self.sys_info_label = QLabel("–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        status_bar.addPermanentWidget(self.sys_info_label)
    
    def setup_menu(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–µ–Ω—é"""
        menubar = self.menuBar()
        
        # –ú–µ–Ω—é –§–∞–π–ª
        file_menu = menubar.addMenu("üìÅ –§–∞–π–ª")
        file_menu.addAction("üìÖ –ù–æ–≤—ã–π –¥–µ–Ω—å", self.new_day, "Ctrl+N")
        file_menu.addAction("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", self.save_current_day, "Ctrl+S")
        file_menu.addSeparator()
        file_menu.addAction("üì§ –≠–∫—Å–ø–æ—Ä—Ç", self.export_data)
        file_menu.addAction("üì• –ò–º–ø–æ—Ä—Ç", self.import_data)
        file_menu.addSeparator()
        file_menu.addAction("üö™ –í—ã—Ö–æ–¥", self.close, "Ctrl+Q")
        
        # –ú–µ–Ω—é –ü—Ä–∞–≤–∫–∞
        edit_menu = menubar.addMenu("‚úèÔ∏è –ü—Ä–∞–≤–∫–∞")
        edit_menu.addAction("‚ûï –î–æ–±–∞–≤–∏—Ç—å –±–ª–æ–∫", self.add_time_block_dialog, "Insert")
        edit_menu.addAction("üéØ –ê–≤—Ç–æ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", self.auto_schedule)
        edit_menu.addSeparator()
        edit_menu.addAction("üßπ –û—á–∏—Å—Ç–∏—Ç—å –¥–µ–Ω—å", self.clear_day)
        
        # –ú–µ–Ω—é –í–∏–¥
        view_menu = menubar.addMenu("üëÅÔ∏è –í–∏–¥")
        view_menu.addAction("üìã –°–ø–∏—Å–æ–∫", self.switch_to_list_view)
        view_menu.addAction("‚è∞ –í—Ä–µ–º—è", self.switch_to_time_view)
        view_menu.addAction("üéØ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç", self.switch_to_priority_view)
        view_menu.addSeparator()
        view_menu.addAction("üé® –°–º–µ–Ω–∏—Ç—å —Ç–µ–º—É", self.change_theme)
        
        # –ú–µ–Ω—é –°–µ—Ä–≤–∏—Å
        tool_menu = menubar.addMenu("‚öôÔ∏è –°–µ—Ä–≤–∏—Å")
        tool_menu.addAction("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", self.show_statistics)
        tool_menu.addAction("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", self.toggle_notifications)
        tool_menu.addAction("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", self.show_settings)
        
        # –ú–µ–Ω—é –ü–æ–º–æ—â—å
        help_menu = menubar.addMenu("‚ùì –ü–æ–º–æ—â—å")
        help_menu.addAction("üìñ –û –ø—Ä–æ–≥—Ä–∞–º–º–µ", self.show_about)
        help_menu.addAction("üéØ –°–æ–≤–µ—Ç—ã", self.show_tips)
    
    def setup_tray(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ —Ç—Ä–µ—è"""
        if not QSystemTrayIcon.isSystemTrayAvailable():
            return
        
        self.tray_icon = QSystemTrayIcon(self)
        self.tray_icon.setIcon(QApplication.windowIcon())
        
        tray_menu = QMenu()
        tray_menu.addAction("–ü–æ–∫–∞–∑–∞—Ç—å", self.show)
        tray_menu.addAction("–°–∫—Ä—ã—Ç—å", self.hide)
        tray_menu.addSeparator()
        tray_menu.addAction("–í—ã—Ö–æ–¥", QApplication.quit)
        
        self.tray_icon.setContextMenu(tray_menu)
        self.tray_icon.activated.connect(self.tray_icon_activated)
        self.tray_icon.show()
    
    def setup_animations(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–π"""
        self.fade_animation = FadeAnimation(self)
        self.slide_animation = SlideAnimation(self)
        self.bouncy_animation = BouncyAnimation(self)
        self.slide_stacked_animation = SlideStackedAnimation(self.stacked_widget)
        
        # –ê–Ω–∏–º–∞—Ü–∏–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
        self.button_animations = {}
        
        # –ü—É–ª—å—Å–∞—Ü–∏—è –¥–ª—è –≤–∞–∂–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        self.pulse_animations = {}
    
    def switch_tab(self, index):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É –≤–∫–ª–∞–¥–∫–∞–º–∏ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π"""
        current_index = self.stacked_widget.currentIndex()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏
        direction = "left" if index > current_index else "right"
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é –∞–Ω–∏–º–∞—Ü–∏—é —Å–∫–æ–ª—å–∂–µ–Ω–∏—è
        self.slide_stacked_animation.slide_to_widget(index, direction)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—É—é –ø–∞–Ω–µ–ª—å
        if hasattr(self, 'nav_bar'):
            self.nav_bar.setCurrentIndex(index)
    
    def handle_canvas_click(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –æ–±–ª–∞—Å—Ç–∏ –±–ª–æ–∫–æ–≤"""
        if event.button() == Qt.LeftButton:
            # –†–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –ø–æ –ø–æ–∑–∏—Ü–∏–∏ –∫–ª–∏–∫–∞
            y_pos = event.pos().y()
            start_minutes = 8 * 60 + (y_pos // 2)
            duration = 60  # 1 —á–∞—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            
            start_time = datetime.now().replace(hour=0, minute=0) + timedelta(minutes=start_minutes)
            end_time = start_time + timedelta(minutes=duration)
            
            self.add_time_block(start_time, end_time)
    
    def add_time_block_dialog(self):
        """–î–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –±–ª–æ–∫–∞"""
        from PyQt5.QtWidgets import QDialog, QDialogButtonBox, QFormLayout, QLineEdit, QTimeEdit
        
        dialog = QDialog(self)
        dialog.setWindowTitle("–î–æ–±–∞–≤–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –±–ª–æ–∫")
        dialog.setMinimumWidth(400)
        
        layout = QFormLayout(dialog)
        
        title_edit = QLineEdit()
        title_edit.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏")
        layout.addRow("–ù–∞–∑–≤–∞–Ω–∏–µ:", title_edit)
        
        start_time_edit = QTimeEdit()
        start_time_edit.setTime(datetime.now().time())
        layout.addRow("–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞:", start_time_edit)
        
        end_time_edit = QTimeEdit()
        end_time_edit.setTime((datetime.now() + timedelta(hours=1)).time())
        layout.addRow("–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è:", end_time_edit)
        
        buttons = QDialogButtonBox(QDialogButtonBox.Ok | QDialogButtonBox.Cancel)
        buttons.accepted.connect(dialog.accept)
        buttons.rejected.connect(dialog.reject)
        layout.addRow(buttons)
        
        if dialog.exec_() == QDialog.Accepted:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –∏–∑ QTimeEdit
            start_q_time = start_time_edit.time()
            end_q_time = end_time_edit.time()
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º QTime –≤ datetime.time
            start_py_time = time(start_q_time.hour(), start_q_time.minute(), start_q_time.second())
            end_py_time = time(end_q_time.hour(), end_q_time.minute(), end_q_time.second())
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–µ datetime –æ–±—ä–µ–∫—Ç—ã
            start_dt = datetime.combine(self.current_date, start_py_time)
            end_dt = datetime.combine(self.current_date, end_py_time)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –±–ª–æ–∫
            self.add_time_block(start_dt, end_dt, title_edit.text())
    
    def add_time_block(self, start_time, end_time, title="–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞"):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –±–ª–æ–∫–∞ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π"""
        block = PremiumTimeBlock(start_time, end_time, title)
        block.deleted.connect(self.delete_time_block)
        block.edited.connect(self.update_time_block)
        
        self.time_blocks.append(block)
        self.blocks_layout.addWidget(block)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–ª–æ–∫
        block.show()
        
        # –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è —Å –æ—Ç—Å–∫–æ–∫–æ–º
        QTimer.singleShot(50, lambda: self.animate_block_appearance(block))
        
        self.update_stats()
        self.statusBar().showMessage(f"–î–æ–±–∞–≤–ª–µ–Ω –±–ª–æ–∫: {title}")
    
    def animate_block_appearance(self, block):
        """–ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è –±–ª–æ–∫–∞"""
        bouncy_anim = BouncyAnimation(block, duration=600)
        bouncy_anim.bounce_in()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—É–ª—å—Å–∞—Ü–∏—é –Ω–∞ –∫–æ—Ä–æ—Ç–∫–æ–µ –≤—Ä–µ–º—è
        pulse_anim = PulseAnimation(block, duration=800)
        pulse_anim.start_pulse(1.03)
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É–ª—å—Å–∞—Ü–∏—é —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
        QTimer.singleShot(2000, pulse_anim.stop_pulse)
    
    def delete_time_block(self, block):
        """–£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –±–ª–æ–∫–∞"""
        reply = QMessageBox.question(self, "–£–¥–∞–ª–µ–Ω–∏–µ", 
                                   f"–£–¥–∞–ª–∏—Ç—å –±–ª–æ–∫ '{block.title}'?",
                                   QMessageBox.Yes | QMessageBox.No)
        
        if reply == QMessageBox.Yes:
            self.time_blocks.remove(block)
            block.deleteLater()
            self.update_stats()
            self.statusBar().showMessage("–ë–ª–æ–∫ —É–¥–∞–ª–µ–Ω")
    
    def update_time_block(self, block):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –±–ª–æ–∫–∞"""
        self.update_stats()
        self.statusBar().showMessage(f"–û–±–Ω–æ–≤–ª–µ–Ω –±–ª–æ–∫: {block.title}")
    
    def new_day(self):
        """–ù–∞—á–∞–ª–æ –Ω–æ–≤–æ–≥–æ –¥–Ω—è"""
        reply = QMessageBox.question(self, "–ù–æ–≤—ã–π –¥–µ–Ω—å", 
                                   "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –ø–µ—Ä–µ–¥ –æ—á–∏—Å—Ç–∫–æ–π?",
                                   QMessageBox.Yes | QMessageBox.No | QMessageBox.Cancel)
        
        if reply != QMessageBox.Cancel:
            if reply == QMessageBox.Yes:
                self.save_current_day()
            
            # –û—á–∏—Å—Ç–∫–∞ –±–ª–æ–∫–æ–≤
            for block in self.time_blocks:
                block.deleteLater()
            self.time_blocks.clear()
            
            # –ù–æ–≤—ã–π –¥–µ–Ω—å
            self.current_date = datetime.now().date()
            self.update_date_display()
            self.update_stats()
            
            self.statusBar().showMessage("–ù–∞—á–∞—Ç –Ω–æ–≤—ã–π –¥–µ–Ω—å")
    
    def save_current_day(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è"""
        if self.data_manager.save_day(self.time_blocks, self.current_date):
            self.statusBar().showMessage("–î–µ–Ω—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
        else:
            self.statusBar().showMessage("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
    
    def load_current_day(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è"""
        blocks_data = self.data_manager.load_day(self.current_date)
        
        for block_data in blocks_data:
            try:
                start_time = datetime.fromisoformat(block_data["start_time"])
                end_time = datetime.fromisoformat(block_data["end_time"])
                
                block = PremiumTimeBlock(
                    start_time, end_time,
                    block_data["title"],
                    block_data.get("color", "#FF2B43"),
                    block_data.get("notify", True)
                )
                
                block.deleted.connect(self.delete_time_block)
                block.edited.connect(self.update_time_block)
                
                self.time_blocks.append(block)
                self.blocks_layout.addWidget(block)
                
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–ª–æ–∫–∞: {e}")
        
        self.update_stats()
        self.statusBar().showMessage(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(blocks_data)} –±–ª–æ–∫–æ–≤")
    
    def update_stats(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π"""
        total_blocks = len(self.time_blocks)
        total_minutes = sum(block.get_duration_minutes() for block in self.time_blocks)
        hours = total_minutes // 60
        minutes = total_minutes % 60
        productivity = min(100, int((total_minutes / 480) * 100))
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
        self.animate_stat_update(self.blocks_card, total_blocks)
        self.animate_stat_update(self.time_card, f"{hours:02d}:{minutes:02d}")
        self.animate_stat_update(self.productivity_card, productivity)
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å –±–∞—Ä–∞
        self.day_info_label.setText(
            f"–ë–ª–æ–∫–æ–≤: {total_blocks} | –í—Ä–µ–º—è: {hours:02d}:{minutes:02d} | –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {productivity}%"
        )
    
    def animate_stat_update(self, card, new_value):
        """–ê–Ω–∏–º–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–π –∫–∞—Ä—Ç–æ—á–∫–∏"""
        # –°–æ–∑–¥–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
        scale_anim = QPropertyAnimation(card, b"size")
        scale_anim.setDuration(200)
        scale_anim.setEasingCurve(QEasingCurve.OutBack)
        
        original_size = card.size()
        scaled_size = QSize(
            int(original_size.width() * 1.05),
            int(original_size.height() * 1.05)
        )
        
        # –ê–Ω–∏–º–∞—Ü–∏—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è
        scale_anim.setStartValue(original_size)
        scale_anim.setEndValue(scaled_size)
        
        def on_scale_finished():
            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
            card.update_value(new_value)
            
            # –ê–Ω–∏–º–∞—Ü–∏—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Ä–∞–∑–º–µ—Ä—É
            return_anim = QPropertyAnimation(card, b"size")
            return_anim.setDuration(200)
            return_anim.setEasingCurve(QEasingCurve.OutBack)
            return_anim.setStartValue(scaled_size)
            return_anim.setEndValue(original_size)
            return_anim.start()
        
        scale_anim.finished.connect(on_scale_finished)
        scale_anim.start()
    
    def update_date_display(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞—Ç—ã"""
        date_str = self.current_date.strftime("%d %B %Y (%A)")
        if self.current_date == datetime.now().date():
            date_str += " - –°–ï–ì–û–î–ù–Ø"
        
        self.date_label.setText(f"üìÖ {date_str}")
    
    def load_settings(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        # –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ —Ñ–∞–π–ª–∞ –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.settings = {
            "theme": "dark",
            "notifications": True,
            "auto_save": True,
            "language": "ru"
        }
    
    def start_services(self):
        """–ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
        # –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        if self.settings.get("auto_save", True):
            self.auto_save_timer = QTimer()
            self.auto_save_timer.timeout.connect(self.auto_save)
            self.auto_save_timer.start(300000)  # 5 –º–∏–Ω—É—Ç
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        self.notification_manager.start()
    
    def auto_save(self):
        """–ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ"""
        if self.time_blocks:
            self.data_manager.save_day(self.time_blocks, self.current_date)
            self.sys_info_label.setText("–ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
    
    def show_welcome_message(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        NotificationAnimator.show_notification(
            self, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Time Blocking Planner Premium!", 3000
        )
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
    def quick_add_block(self):
        """–ë—ã—Å—Ç—Ä–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–ª–æ–∫–∞"""
        current_time = datetime.now()
        start_time = current_time.replace(minute=(current_time.minute // 30) * 30)
        end_time = start_time + timedelta(hours=1)
        
        self.add_time_block(start_time, end_time, "–ë—ã—Å—Ç—Ä–∞—è –∑–∞–¥–∞—á–∞")
    
    def focus_today(self):
        """–§–æ–∫—É—Å–∏—Ä–æ–≤–∫–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–º –¥–Ω–µ"""
        self.current_date = datetime.now().date()
        self.update_date_display()
        self.load_current_day()
    
    def auto_schedule(self):
        """–ê–≤—Ç–æ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        QMessageBox.information(self, "–ê–≤—Ç–æ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", 
                              "–§—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏")
    
    def clear_day(self):
        """–û—á–∏—Å—Ç–∫–∞ –¥–Ω—è"""
        reply = QMessageBox.question(self, "–û—á–∏—Å—Ç–∫–∞ –¥–Ω—è", 
                                   "–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –±–ª–æ–∫–∏?",
                                   QMessageBox.Yes | QMessageBox.No)
        
        if reply == QMessageBox.Yes:
            for block in self.time_blocks:
                block.deleteLater()
            self.time_blocks.clear()
            self.update_stats()
    
    def switch_to_list_view(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤ —Ä–µ–∂–∏–º —Å–ø–∏—Å–∫–∞"""
        self.statusBar().showMessage("–†–µ–∂–∏–º: –°–ø–∏—Å–æ–∫")
    
    def switch_to_time_view(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤ —Ä–µ–∂–∏–º –≤—Ä–µ–º–µ–Ω–∏"""
        self.statusBar().showMessage("–†–µ–∂–∏–º: –í—Ä–µ–º–µ–Ω–Ω–∞—è —à–∫–∞–ª–∞")
    
    def switch_to_priority_view(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤ —Ä–µ–∂–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤"""
        self.statusBar().showMessage("–†–µ–∂–∏–º: –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã")
    
    def change_theme(self):
        """–°–º–µ–Ω–∞ —Ç–µ–º—ã"""
        themes = ["–¢–µ–º–Ω–∞—è", "–°–≤–µ—Ç–ª–∞—è", "–ê–≤—Ç–æ"]
        theme, ok = QInputDialog.getItem(self, "–°–º–µ–Ω–∞ —Ç–µ–º—ã", "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:", themes, 0, False)
        
        if ok:
            self.settings["theme"] = theme.lower()
            self.setStyleSheet(PremiumTheme.get_stylesheet(theme.lower()))
            self.statusBar().showMessage(f"–¢–µ–º–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞: {theme}")
    
    def show_statistics(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        self.switch_tab(1)  # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    
    def show_settings(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        self.switch_tab(2)  # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É –Ω–∞—Å—Ç—Ä–æ–µ–∫
    
    def toggle_notifications(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        self.settings["notifications"] = not self.settings.get("notifications", True)
        status = "–≤–∫–ª—é—á–µ–Ω—ã" if self.settings["notifications"] else "–≤—ã–∫–ª—é—á–µ–Ω—ã"
        self.statusBar().showMessage(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {status}")
    
    def export_data(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö"""
        filename, _ = QFileDialog.getSaveFileName(
            self, "–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", 
            f"timeblocking_export_{self.current_date.strftime('%Y-%m-%d')}.json",
            "JSON Files (*.json)"
        )
        
        if filename:
            # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞
            pass
    
    def import_data(self):
        """–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö"""
        filename, _ = QFileDialog.getOpenFileName(
            self, "–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", "", "JSON Files (*.json)"
        )
        
        if filename:
            # –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∏–º–ø–æ—Ä—Ç–∞
            pass
    
    def show_about(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ"""
        QMessageBox.about(self, "–û –ø—Ä–æ–≥—Ä–∞–º–º–µ", 
                         "–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤—Ä–µ–º–µ–Ω–∏")
    
    def show_tips(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–≤–µ—Ç—ã"""
        QMessageBox.information(self, "–°–æ–≤–µ—Ç—ã", 
                              "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±—ã—Å—Ç—Ä—ã–µ –∫–ª–∞–≤–∏—à–∏ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–±–æ—Ç—ã\n"
                              "üí° –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –≤–∞–∂–Ω—ã—Ö –∑–∞–¥–∞—á\n"
                              "üí° –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    def tray_icon_activated(self, reason):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∏–∫–æ–Ω–∫–∏ –≤ —Ç—Ä–µ–µ"""
        if reason == QSystemTrayIcon.DoubleClick:
            self.show()
            self.raise_()
            self.activateWindow()
    
    def closeEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        if self.time_blocks and self.settings.get("auto_save", True):
            self.data_manager.save_day(self.time_blocks, self.current_date)
        
        self.notification_manager.stop()
        
        # –°–∫—Ä—ã—Ç—å –≤ —Ç—Ä–µ–π –≤–º–µ—Å—Ç–æ –∑–∞–∫—Ä—ã—Ç–∏—è
        if self.settings.get("minimize_to_tray", True) and self.tray_icon.isVisible():
            self.hide()
            event.ignore()
        else:
            event.accept()

    def show_settings_dialog(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–ª–æ–≥ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        dialog = SettingsDialog(self, self.settings_manager)
        dialog.settings_changed.connect(self.on_settings_changed)
        dialog.exec_()

    def on_settings_changed(self, new_settings):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        if 'appearance/theme' in new_settings:
            self.apply_theme(new_settings['appearance/theme'])
        
        if 'appearance/font_size' in new_settings:
            self.apply_font_size(new_settings['appearance/font_size'])
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥—Ä—É–≥–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã...
        self.statusBar().showMessage("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    app = QApplication(sys.argv)
    app.setApplicationName("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤—Ä–µ–º–µ–Ω–∏")
    app.setApplicationVersion("5.0")
    app.setOrganizationName("–ö–°54 4 –≤–∞—Ä–∏–∞–Ω—Ç")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ —à—Ä–∏—Ñ—Ç–æ–≤ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    # QFontDatabase.addApplicationFont("assets/fonts/Inter.ttf")
    
    window = MainWindow()
    
    sys.exit(app.exec_())

if __name__ == "__main__":
    main()