# hybrid_app.py - –ì–∏–±—Ä–∏–¥–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —è–∑—ã–∫–∞–º–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è
import sys
import os
import json
from datetime import datetime, timedelta
from PyQt5.QtWidgets import (QApplication, QMainWindow, QVBoxLayout, QHBoxLayout, 
                             QWidget, QPushButton, QLabel, QTextEdit, QTabWidget,
                             QLineEdit, QComboBox, QTimeEdit, QDialog, QFormLayout,
                             QDialogButtonBox, QMessageBox, QListWidget, QListWidgetItem)
from PyQt5.QtCore import Qt, QThread, pyqtSignal, QTimer, QTime
from PyQt5.QtGui import QFont

# –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ WebEngine —Å fallback
try:
    from PyQt5.QtWebEngineWidgets import QWebEngineView
    WEBENGINE_AVAILABLE = True
except ImportError:
    print("PyQtWebEngine –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è dashboard")
    QWebEngineView = None
    WEBENGINE_AVAILABLE = False

# –ò–º–ø–æ—Ä—Ç—ã –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
from localization_system import localization, _
from task_manager import task_manager, Task, TaskStatus, TaskPriority

# –ù–æ–≤—ã–µ —É–ª—É—á—à–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏ (—Å –ª–µ–Ω–∏–≤–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π)
from smart_notifications import get_smart_notification_manager, NotificationType
from advanced_analytics import get_advanced_analytics_widget
from enhanced_ui import DragDropTaskWidget, TimelineWidget, ModernTaskDialog
from cloud_sync import cloud_sync_manager, data_exporter
from performance_optimizer import get_performance_optimizer



class JavaScriptUIComponent(QWidget if not WEBENGINE_AVAILABLE else QWebEngineView):
    """UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç Dashboard —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self.parent_app = parent
        
        if WEBENGINE_AVAILABLE:
            self.setup_webengine_ui()
        else:
            self.setup_native_ui()
        
        # –¢–∞–π–º–µ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        self.update_timer = QTimer()
        self.update_timer.timeout.connect(self.update_dashboard_data)
        self.update_timer.start(1000)  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
    
    def setup_native_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞—Ç–∏–≤–Ω–æ–≥–æ UI –±–µ–∑ WebEngine"""
        layout = QVBoxLayout()
        
        # –ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
        self.time_frame = QWidget()
        time_layout = QVBoxLayout(self.time_frame)
        
        self.moscow_time_label = QLabel("–ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è")
        self.moscow_time_label.setStyleSheet("font-size: 18px; font-weight: bold; color: #FF2B43; text-align: center;")
        self.moscow_time_label.setAlignment(Qt.AlignCenter)
        
        self.time_display = QLabel("00:00:00")
        self.time_display.setStyleSheet("font-size: 32px; font-weight: bold; color: #FF2B43; text-align: center;")
        self.time_display.setAlignment(Qt.AlignCenter)
        
        self.date_display = QLabel("–î–∞—Ç–∞")
        self.date_display.setStyleSheet("font-size: 14px; color: #CCCCCC; text-align: center;")
        self.date_display.setAlignment(Qt.AlignCenter)
        
        time_layout.addWidget(self.moscow_time_label)
        time_layout.addWidget(self.time_display)
        time_layout.addWidget(self.date_display)
        
        self.time_frame.setStyleSheet("""
            QWidget {
                background: rgba(255, 43, 67, 0.1);
                border: 2px solid #FF2B43;
                border-radius: 15px;
                padding: 20px;
                margin: 10px;
            }
        """)
        
        layout.addWidget(self.time_frame)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏
        stats_layout = QHBoxLayout()
        
        # –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        self.productivity_card = self.create_stat_card("–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", "0%", "#FF2B43")
        stats_layout.addWidget(self.productivity_card)
        
        # –í—Ä–µ–º—è
        self.time_card = self.create_stat_card("–í—Ä–µ–º—è —Å–µ–≥–æ–¥–Ω—è", "0:00", "#FFC107")
        stats_layout.addWidget(self.time_card)
        
        # –ó–∞–¥–∞—á–∏
        self.tasks_card = self.create_stat_card("–ó–∞–¥–∞—á–∏", "0", "#4CAF50")
        stats_layout.addWidget(self.tasks_card)
        
        layout.addLayout(stats_layout)
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        self.details_text = QTextEdit()
        self.details_text.setReadOnly(True)
        self.details_text.setMaximumHeight(200)
        self.details_text.setStyleSheet("""
            QTextEdit {
                background: #2D2D2D;
                border: 2px solid #FF2B43;
                border-radius: 8px;
                padding: 10px;
                color: white;
                font-family: 'Consolas', monospace;
            }
        """)
        layout.addWidget(self.details_text)
        
        self.setLayout(layout)
        
        # –°—Ç–∏–ª–∏ –¥–ª—è –≤—Å–µ–≥–æ –≤–∏–¥–∂–µ—Ç–∞
        self.setStyleSheet("""
            QWidget {
                background: #1E1E1E;
                color: white;
            }
        """)
    
    def create_stat_card(self, title, value, color):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        card = QWidget()
        layout = QVBoxLayout(card)
        
        title_label = QLabel(title)
        title_label.setStyleSheet(f"font-size: 14px; font-weight: bold; color: {color};")
        title_label.setAlignment(Qt.AlignCenter)
        
        value_label = QLabel(value)
        value_label.setStyleSheet("font-size: 24px; font-weight: bold; color: white;")
        value_label.setAlignment(Qt.AlignCenter)
        
        layout.addWidget(title_label)
        layout.addWidget(value_label)
        
        card.setStyleSheet(f"""
            QWidget {{
                background: rgba(255, 255, 255, 0.05);
                border: 2px solid {color};
                border-radius: 10px;
                padding: 15px;
                margin: 5px;
            }}
        """)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ value_label –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        card.value_label = value_label
        
        return card
    
    def setup_webengine_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ JavaScript UI"""
        html_content = '''
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="utf-8">
            <title>Interactive Dashboard</title>
            <style>
                body {
                    background: linear-gradient(135deg, #1e1e1e, #2d2d2d);
                    color: white;
                    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                    margin: 0;
                    padding: 20px;
                }
                .dashboard {
                    display: grid;
                    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
                    gap: 20px;
                }
                .card {
                    background: rgba(255, 43, 67, 0.1);
                    border: 2px solid #FF2B43;
                    border-radius: 15px;
                    padding: 20px;
                    transition: transform 0.3s ease;
                }
                .card:hover {
                    transform: translateY(-5px);
                    box-shadow: 0 10px 20px rgba(255, 43, 67, 0.3);
                }
                .card-title {
                    font-size: 18px;
                    font-weight: bold;
                    margin-bottom: 10px;
                    color: #FF2B43;
                }
                .card-value {
                    font-size: 24px;
                    font-weight: bold;
                    margin-bottom: 5px;
                }
                .progress-bar {
                    width: 100%;
                    height: 8px;
                    background: #333;
                    border-radius: 4px;
                    overflow: hidden;
                }
                .progress-fill {
                    height: 100%;
                    background: linear-gradient(90deg, #FF2B43, #FF6B7F);
                    transition: width 0.5s ease;
                }
                .chart-container {
                    width: 100%;
                    height: 200px;
                    margin-top: 15px;
                }
                #productivity-chart {
                    width: 100%;
                    height: 100%;
                }
            </style>
            <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
        </head>
        <body>
            <!-- –ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è -->
            <div class="card" style="grid-column: 1 / -1; text-align: center; margin-bottom: 20px;">
                <div class="card-title" id="moscow-time-title">üïê –ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è</div>
                <div class="card-value" id="moscow-time" style="font-size: 36px; color: #FF2B43;">00:00:00</div>
                <div id="moscow-date" style="font-size: 16px; color: #CCCCCC; margin-top: 5px;">–î–∞—Ç–∞</div>
            </div>
            
            <div class="dashboard">
                <div class="card">
                    <div class="card-title" id="productivity-title">üìä –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</div>
                    <div class="card-value" id="productivity-value">0%</div>
                    <div class="progress-bar">
                        <div class="progress-fill" id="productivity-progress" style="width: 0%"></div>
                    </div>
                    <div style="margin-top: 10px; font-size: 12px; color: #CCCCCC;" id="efficiency-text">
                        –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: <span id="efficiency-value">0%</span>
                    </div>
                </div>
                
                <div class="card">
                    <div class="card-title" id="time-title">‚è∞ –í—Ä–µ–º—è —Å–µ–≥–æ–¥–Ω—è</div>
                    <div class="card-value" id="time-value">0:00</div>
                    <div class="progress-bar">
                        <div class="progress-fill" id="time-progress" style="width: 0%"></div>
                    </div>
                    <div style="margin-top: 10px; font-size: 12px; color: #CCCCCC;" id="time-details">
                        –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: <span id="planned-time">0</span> –º–∏–Ω
                    </div>
                </div>
                
                <div class="card">
                    <div class="card-title" id="tasks-title">üìã –ó–∞–¥–∞—á–∏</div>
                    <div class="card-value" id="tasks-value">0</div>
                    <div style="margin-top: 10px;">
                        <span style="color: #4CAF50;" id="completed-label">‚úì –í—ã–ø–æ–ª–Ω–µ–Ω–æ: <span id="completed-tasks">0</span></span><br>
                        <span style="color: #FFC107;" id="pending-label">‚è≥ –í –æ–∂–∏–¥–∞–Ω–∏–∏: <span id="pending-tasks">0</span></span>
                    </div>
                </div>
                
                <div class="card">
                    <div class="card-title" id="chart-title">üìà –ì—Ä–∞—Ñ–∏–∫ –Ω–µ–¥–µ–ª–∏</div>
                    <div class="chart-container">
                        <canvas id="productivity-chart"></canvas>
                    </div>
                </div>
            </div>
            
            <script>
                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
                const ctx = document.getElementById('productivity-chart').getContext('2d');
                const chart = new Chart(ctx, {
                    type: 'line',
                    data: {
                        labels: ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å'],
                        datasets: [{
                            label: '–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å %',
                            data: [65, 78, 82, 75, 90, 85, 88],
                            borderColor: '#FF2B43',
                            backgroundColor: 'rgba(255, 43, 67, 0.1)',
                            tension: 0.4,
                            fill: true
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: {
                                labels: {
                                    color: 'white'
                                }
                            }
                        },
                        scales: {
                            y: {
                                beginAtZero: true,
                                max: 100,
                                ticks: {
                                    color: 'white'
                                },
                                grid: {
                                    color: 'rgba(255, 255, 255, 0.1)'
                                }
                            },
                            x: {
                                ticks: {
                                    color: 'white'
                                },
                                grid: {
                                    color: 'rgba(255, 255, 255, 0.1)'
                                }
                            }
                        }
                    }
                });
                
                // –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
                function updateLocalTime() {
                    const now = new Date();
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–∏—Å—Ç–µ–º–Ω–æ–µ –≤—Ä–µ–º—è
                    
                    const timeString = now.toLocaleTimeString('ru-RU', {
                        hour: '2-digit',
                        minute: '2-digit', 
                        second: '2-digit'
                    });
                    
                    const dateString = now.toLocaleDateString('ru-RU', {
                        weekday: 'long',
                        year: 'numeric',
                        month: 'long',
                        day: 'numeric'
                    });
                    
                    document.getElementById('moscow-time').textContent = timeString;
                    document.getElementById('moscow-date').textContent = dateString;
                }
                
                // –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö dashboard
                function updateDashboard(data) {
                    // –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                    document.getElementById('productivity-value').textContent = data.productivity_percent + '%';
                    document.getElementById('productivity-progress').style.width = data.productivity_percent + '%';
                    document.getElementById('efficiency-value').textContent = data.efficiency + '%';
                    
                    // –í—Ä–µ–º—è
                    const hours = Math.floor(data.total_time_completed / 60);
                    const minutes = data.total_time_completed % 60;
                    document.getElementById('time-value').textContent = hours + ':' + String(minutes).padStart(2, '0');
                    
                    const timeProgress = data.total_time_planned > 0 ? (data.total_time_completed / data.total_time_planned) * 100 : 0;
                    document.getElementById('time-progress').style.width = Math.min(100, timeProgress) + '%';
                    document.getElementById('planned-time').textContent = data.total_time_planned;
                    
                    // –ó–∞–¥–∞—á–∏
                    document.getElementById('tasks-value').textContent = data.total_tasks;
                    document.getElementById('completed-tasks').textContent = data.completed_tasks;
                    document.getElementById('pending-tasks').textContent = data.pending_tasks;
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º –≥—Ä–∞—Ñ–∏–∫ –Ω–µ–¥–µ–ª–∏
                    if (data.weekly_data && data.weekly_data.length > 0) {
                        const labels = data.weekly_data.map(d => d.day_name);
                        const productivity_data = data.weekly_data.map(d => d.productivity);
                        
                        chart.data.labels = labels;
                        chart.data.datasets[0].data = productivity_data;
                        chart.update('none'); // –ë–µ–∑ –∞–Ω–∏–º–∞—Ü–∏–∏ –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏
                    }
                }
                
                // –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤
                function updateTranslations(translations) {
                    document.getElementById('moscow-time-title').innerHTML = 'üïê ' + translations.moscow_time;
                    document.getElementById('productivity-title').innerHTML = 'üìä ' + translations.productivity;
                    document.getElementById('time-title').innerHTML = '‚è∞ ' + translations.time_spent;
                    document.getElementById('tasks-title').innerHTML = 'üìã ' + translations.tasks_today;
                    document.getElementById('chart-title').innerHTML = 'üìà ' + translations.weekly_stats;
                    document.getElementById('completed-label').innerHTML = '‚úì ' + translations.completed_tasks + ': <span id="completed-tasks">0</span>';
                    document.getElementById('pending-label').innerHTML = '‚è≥ ' + translations.pending_tasks + ': <span id="pending-tasks">0</span>';
                    document.getElementById('efficiency-text').innerHTML = translations.efficiency + ': <span id="efficiency-value">0%</span>';
                    document.getElementById('time-details').innerHTML = '–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: <span id="planned-time">0</span> –º–∏–Ω';
                }
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
                setInterval(updateLocalTime, 1000);
                updateLocalTime(); // –ù–∞—á–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                
                // –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ Python
                window.updateDashboardData = updateDashboard;
                window.updateDashboardTranslations = updateTranslations;
            </script>
        </body>
        </html>
        '''
        
        self.setHtml(html_content)
    
    def update_dashboard_data(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö dashboard"""
        if not self.parent_app:
            return
            
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ task_manager
        productivity_data = task_manager.calculate_productivity_today()
        weekly_data = task_manager.get_weekly_stats()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
        moscow_time = localization.get_moscow_time()
        
        if WEBENGINE_AVAILABLE and hasattr(self, 'page'):
            # WebEngine –≤–µ—Ä—Å–∏—è
            dashboard_data = {
                'productivity_percent': productivity_data['productivity_percent'],
                'efficiency': productivity_data['efficiency'],
                'total_tasks': productivity_data['total_tasks'],
                'completed_tasks': productivity_data['completed_tasks'],
                'pending_tasks': productivity_data['pending_tasks'],
                'total_time_planned': productivity_data['total_time_planned'],
                'total_time_completed': productivity_data['total_time_completed'],
                'weekly_data': weekly_data
            }
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ JavaScript
            js_code = f"if (window.updateDashboardData) {{ window.updateDashboardData({json.dumps(dashboard_data)}); }}"
            self.page().runJavaScript(js_code)
        else:
            # –ù–∞—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è
            self.update_native_dashboard(productivity_data, moscow_time)
    
    def update_native_dashboard(self, productivity_data, moscow_time):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Ç–∏–≤–Ω–æ–≥–æ dashboard"""
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è
        if hasattr(self, 'time_display'):
            time_str = moscow_time.strftime('%H:%M:%S')
            date_str = moscow_time.strftime('%A, %d %B %Y')
            
            self.time_display.setText(time_str)
            self.date_display.setText(date_str)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        if hasattr(self, 'productivity_card'):
            self.productivity_card.value_label.setText(f"{productivity_data['productivity_percent']:.1f}%")
        
        if hasattr(self, 'time_card'):
            hours = productivity_data['total_time_completed'] // 60
            minutes = productivity_data['total_time_completed'] % 60
            self.time_card.value_label.setText(f"{hours}:{minutes:02d}")
        
        if hasattr(self, 'tasks_card'):
            self.tasks_card.value_label.setText(str(productivity_data['total_tasks']))
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        if hasattr(self, 'details_text'):
            details = f"""–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞ {moscow_time.strftime('%d.%m.%Y %H:%M')}:

–ó–∞–¥–∞—á–∏:
  ‚Ä¢ –í—Å–µ–≥–æ: {productivity_data['total_tasks']}
  ‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {productivity_data['completed_tasks']}
  ‚Ä¢ –í –æ–∂–∏–¥–∞–Ω–∏–∏: {productivity_data['pending_tasks']}
  ‚Ä¢ –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {productivity_data['productivity_percent']:.1f}%

–í—Ä–µ–º—è:
  ‚Ä¢ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: {productivity_data['total_time_planned']} –º–∏–Ω
  ‚Ä¢ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {productivity_data['total_time_completed']} –º–∏–Ω
  ‚Ä¢ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {productivity_data['efficiency']:.1f}%

–°—Ç–∞—Ç—É—Å: {'WebEngine –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω' if not WEBENGINE_AVAILABLE else 'WebEngine –∞–∫—Ç–∏–≤–µ–Ω'}
–û–±–Ω–æ–≤–ª–µ–Ω–æ: {moscow_time.strftime('%H:%M:%S')}"""
            
            self.details_text.setPlainText(details)
    
    def update_translations(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –≤ dashboard"""
        translations = {
            'moscow_time': _('moscow_time'),
            'productivity': _('productivity'),
            'time_spent': _('time_spent'),
            'tasks_today': _('tasks_today'),
            'weekly_stats': _('weekly_stats'),
            'completed_tasks': _('completed_tasks'),
            'pending_tasks': _('pending_tasks'),
            'efficiency': _('efficiency')
        }
        
        js_code = f"if (window.updateDashboardTranslations) {{ window.updateDashboardTranslations({json.dumps(translations)}); }}"
        self.page().runJavaScript(js_code)

class TaskDialog(QDialog):
    """–î–∏–∞–ª–æ–≥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á"""
    
    def __init__(self, parent=None, task=None):
        super().__init__(parent)
        self.task = task
        self.is_edit_mode = task is not None
        self.setup_ui()
    
    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ UI –¥–∏–∞–ª–æ–≥–∞"""
        title = _("edit") if self.is_edit_mode else _("add_task")
        self.setWindowTitle(title)
        self.setModal(True)
        self.resize(400, 300)
        
        layout = QFormLayout()
        
        # –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
        self.title_edit = QLineEdit()
        self.title_edit.setPlaceholderText(_("task_name"))
        layout.addRow(_("task_name") + ":", self.title_edit)
        
        # –û–ø–∏—Å–∞–Ω–∏–µ
        self.description_edit = QTextEdit()
        self.description_edit.setMaximumHeight(80)
        self.description_edit.setPlaceholderText(_("description"))
        layout.addRow(_("description") + ":", self.description_edit)
        
        # –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
        self.start_time_edit = QTimeEdit()
        self.start_time_edit.setTime(QTime.currentTime())
        layout.addRow(_("start_time") + ":", self.start_time_edit)
        
        # –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è
        self.end_time_edit = QTimeEdit()
        self.end_time_edit.setTime(QTime.currentTime().addSecs(3600))  # +1 —á–∞—Å
        layout.addRow(_("end_time") + ":", self.end_time_edit)
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        self.priority_combo = QComboBox()
        self.priority_combo.addItems([
            _("priority_low"),
            _("priority_medium"), 
            _("priority_high"),
            _("priority_urgent")
        ])
        self.priority_combo.setCurrentIndex(1)  # Medium –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        layout.addRow(_("priority") + ":", self.priority_combo)
        
        # –°—Ç–∞—Ç—É—Å (—Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
        if self.is_edit_mode:
            self.status_combo = QComboBox()
            self.status_combo.addItems([
                _("status_planned"),
                _("status_in_progress"),
                _("status_completed"),
                _("status_cancelled")
            ])
            layout.addRow(_("status") + ":", self.status_combo)
        
        # –ö–Ω–æ–ø–∫–∏
        buttons = QDialogButtonBox(
            QDialogButtonBox.Ok | QDialogButtonBox.Cancel,
            Qt.Horizontal, self
        )
        buttons.accepted.connect(self.accept)
        buttons.rejected.connect(self.reject)
        
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –∫–Ω–æ–ø–∫–∏
        buttons.button(QDialogButtonBox.Ok).setText(_("save"))
        buttons.button(QDialogButtonBox.Cancel).setText(_("cancel"))
        
        layout.addRow(buttons)
        self.setLayout(layout)
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
        if self.is_edit_mode and self.task:
            self.fill_task_data()
        
        # –°—Ç–∏–ª–∏
        self.setStyleSheet("""
            QDialog {
                background: #1E1E1E;
                color: white;
            }
            QLineEdit, QTextEdit, QTimeEdit, QComboBox {
                background: #2D2D2D;
                border: 2px solid #FF2B43;
                border-radius: 6px;
                padding: 8px;
                color: white;
                font-size: 12px;
            }
            QComboBox::drop-down {
                border: none;
                width: 20px;
            }
            QComboBox::down-arrow {
                image: none;
                border-left: 5px solid transparent;
                border-right: 5px solid transparent;
                border-top: 5px solid #FF2B43;
            }
            QPushButton {
                background: #FF2B43;
                color: white;
                border: none;
                padding: 10px 20px;
                border-radius: 6px;
                font-weight: bold;
                min-width: 120px;
                min-height: 35px;
                font-size: 14px;
            }
            QPushButton:hover {
                background: #FF4A5F;
            }
            QLabel {
                color: white;
                font-weight: bold;
            }
        """)
    
    def fill_task_data(self):
        """–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∏ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
        if not self.task:
            return
            
        self.title_edit.setText(self.task.title)
        self.description_edit.setPlainText(self.task.description)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º datetime –≤ QTime
        start_qtime = QTime(self.task.start_time.hour, self.task.start_time.minute)
        end_qtime = QTime(self.task.end_time.hour, self.task.end_time.minute)
        
        self.start_time_edit.setTime(start_qtime)
        self.end_time_edit.setTime(end_qtime)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        priority_map = {
            TaskPriority.LOW: 0,
            TaskPriority.MEDIUM: 1,
            TaskPriority.HIGH: 2,
            TaskPriority.URGENT: 3
        }
        self.priority_combo.setCurrentIndex(priority_map.get(self.task.priority, 1))
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if hasattr(self, 'status_combo'):
            status_map = {
                TaskStatus.PLANNED: 0,
                TaskStatus.IN_PROGRESS: 1,
                TaskStatus.COMPLETED: 2,
                TaskStatus.CANCELLED: 3
            }
            self.status_combo.setCurrentIndex(status_map.get(self.task.status, 0))
    
    def get_task_data(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∏ –∏–∑ —Ñ–æ—Ä–º—ã"""
        # –ü–æ–ª—É—á–∞–µ–º –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
        moscow_time = localization.get_moscow_time()
        today = moscow_time.date()
        
        # –°–æ–∑–¥–∞–µ–º datetime –æ–±—ä–µ–∫—Ç—ã –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏
        start_time = datetime.combine(today, self.start_time_edit.time().toPyTime())
        end_time = datetime.combine(today, self.end_time_edit.time().toPyTime())
        
        # –ï—Å–ª–∏ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –º–µ–Ω—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞, –¥–æ–±–∞–≤–ª—è–µ–º –¥–µ–Ω—å
        if end_time <= start_time:
            end_time = end_time + timedelta(days=1)
        
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç
        priority_map = [TaskPriority.LOW, TaskPriority.MEDIUM, TaskPriority.HIGH, TaskPriority.URGENT]
        priority = priority_map[self.priority_combo.currentIndex()]
        
        # –°—Ç–∞—Ç—É—Å (–µ—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º)
        status = TaskStatus.PLANNED
        if hasattr(self, 'status_combo'):
            status_map = [TaskStatus.PLANNED, TaskStatus.IN_PROGRESS, TaskStatus.COMPLETED, TaskStatus.CANCELLED]
            status = status_map[self.status_combo.currentIndex()]
        
        return {
            'title': self.title_edit.text().strip(),
            'description': self.description_edit.toPlainText().strip(),
            'start_time': start_time,
            'end_time': end_time,
            'priority': priority,
            'status': status
        }

class HybridTimeBlockingApp(QMainWindow):
    """–ì–ª–∞–≤–Ω–æ–µ –≥–∏–±—Ä–∏–¥–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
    
    def __init__(self):
        super().__init__()
        
        # –ú–æ–¥—É–ª–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —É–¥–∞–ª–µ–Ω—ã –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è
        
        # –î–∞–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        self.time_blocks = []
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è QApplication
        self.init_enhanced_modules()
        
        self.init_ui()
        self.setup_timers()
    
    def init_enhanced_modules(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ QApplication —É–∂–µ —Å–æ–∑–¥–∞–Ω–æ
            from PyQt5.QtWidgets import QApplication
            if QApplication.instance() is not None:
                self.smart_notification_manager = get_smart_notification_manager()
                self.advanced_analytics_widget = get_advanced_analytics_widget()
                self.performance_optimizer = get_performance_optimizer()
                print("‚úÖ –£–ª—É—á—à–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            else:
                print("‚ö†Ô∏è QApplication –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, —É–ª—É—á—à–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏ –±—É–¥—É—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –ø–æ–∑–∂–µ")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —É–ª—É—á—à–µ–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π: {e}")
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫–∏
            self.smart_notification_manager = None
            self.advanced_analytics_widget = None
            self.performance_optimizer = None
    
    def init_ui(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        self.setWindowTitle("Hybrid Time Blocking Planner")
        self.setGeometry(100, 100, 1400, 900)
        
        # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –≤–∏–¥–∂–µ—Ç
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π layout
        main_layout = QVBoxLayout()
        central_widget.setLayout(main_layout)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header = QLabel("Hybrid Time Blocking Planner")
        header.setStyleSheet("""
            font-size: 24px;
            font-weight: bold;
            color: #FF2B43;
            padding: 20px;
            text-align: center;
        """)
        header.setAlignment(Qt.AlignCenter)
        main_layout.addWidget(header)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥—É–ª—è—Ö (—É–ø—Ä–æ—â–µ–Ω–æ)
        self.modules_info = QLabel("–°—Ç–∞—Ç—É—Å: Python –∞–∫—Ç–∏–≤–µ–Ω | JavaScript –∞–∫—Ç–∏–≤–µ–Ω | –í—Ä–µ–º—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
        self.modules_info.setStyleSheet("""
            background: #2D2D2D;
            padding: 10px;
            border-radius: 6px;
            font-family: 'Consolas', monospace;
            color: #CCCCCC;
        """)
        main_layout.addWidget(self.modules_info)
        
        # –í–∫–ª–∞–¥–∫–∏
        self.tabs = QTabWidget()
        self.tabs.setStyleSheet("""
            QTabWidget::pane {
                border: 2px solid #FF2B43;
                border-radius: 8px;
                background: #1E1E1E;
            }
            QTabBar::tab {
                background: #2D2D2D;
                color: white;
                padding: 12px 20px;
                margin-right: 2px;
                border-top-left-radius: 8px;
                border-top-right-radius: 8px;
                font-weight: bold;
            }
            QTabBar::tab:selected {
                background: #FF2B43;
            }
        """)
        
        # –í–∫–ª–∞–¥–∫–∞ JavaScript Dashboard
        self.js_dashboard = JavaScriptUIComponent(self)
        self.tabs.addTab(self.js_dashboard, _("tab_dashboard"))
        
        # –í–∫–ª–∞–¥–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏
        self.tasks_tab = self.create_tasks_tab()
        self.tabs.addTab(self.tasks_tab, _("tab_tasks"))
        
        # –í–∫–ª–∞–¥–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —É–¥–∞–ª–µ–Ω–∞ –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è
        
        main_layout.addWidget(self.tabs)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º–Ω—É—é —Ç–µ–º—É
        self.setStyleSheet("""
            QMainWindow {
                background: #1E1E1E;
                color: white;
            }
            QWidget {
                background: #1E1E1E;
                color: white;
            }
            QPushButton {
                background: #FF2B43;
                color: white;
                border: none;
                padding: 10px 20px;
                font-size: 14px;
                border-radius: 6px;
                font-weight: bold;
                min-width: 120px;
                min-height: 35px;
            }
            QPushButton:hover {
                background: #FF4A5F;
            }
            QTextEdit {
                background: #2D2D2D;
                border: 2px solid #FF2B43;
                border-radius: 6px;
                padding: 10px;
                font-family: 'Consolas', monospace;
            }
            QLabel {
                margin: 5px;
            }
        """)
    
    def create_tasks_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏"""
        widget = QWidget()
        layout = QVBoxLayout()
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        header_layout = QHBoxLayout()
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —è–∑—ã–∫–æ–≤
        lang_layout = QHBoxLayout()
        lang_label = QLabel(_("language") + ":")
        self.language_combo = QComboBox()
        
        for code, name in localization.get_supported_languages().items():
            self.language_combo.addItem(name, code)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —è–∑—ã–∫
        current_lang = localization.current_language
        for i in range(self.language_combo.count()):
            if self.language_combo.itemData(i) == current_lang:
                self.language_combo.setCurrentIndex(i)
                break
        
        self.language_combo.currentTextChanged.connect(self.on_language_changed)
        
        lang_layout.addWidget(lang_label)
        lang_layout.addWidget(self.language_combo)
        lang_layout.addStretch()
        
        header_layout.addLayout(lang_layout)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏
        buttons_layout = QHBoxLayout()
        
        add_task_btn = QPushButton(_("add_task"))
        add_task_btn.clicked.connect(self.add_task_dialog)
        
        refresh_btn = QPushButton("–û–±–Ω–æ–≤–∏—Ç—å")
        refresh_btn.clicked.connect(self.refresh_tasks)
        
        buttons_layout.addWidget(add_task_btn)
        buttons_layout.addWidget(refresh_btn)
        buttons_layout.addStretch()
        
        header_layout.addLayout(buttons_layout)
        layout.addLayout(header_layout)
        
        # –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
        self.tasks_list = QListWidget()
        self.tasks_list.setStyleSheet("""
            QListWidget {
                background: #2D2D2D;
                border: 2px solid #FF2B43;
                border-radius: 8px;
                padding: 10px;
            }
            QListWidget::item {
                background: #1E1E1E;
                border: 1px solid #444;
                border-radius: 6px;
                padding: 10px;
                margin: 5px;
                color: white;
            }
            QListWidget::item:selected {
                background: #FF2B43;
            }
            QListWidget::item:hover {
                background: #3D3D3D;
            }
        """)
        
        layout.addWidget(self.tasks_list)
        
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π —Å –∑–∞–¥–∞—á–∞–º–∏
        task_actions_layout = QHBoxLayout()
        
        edit_btn = QPushButton(_("edit"))
        edit_btn.clicked.connect(self.edit_selected_task)
        
        complete_btn = QPushButton(_("complete"))
        complete_btn.clicked.connect(self.complete_selected_task)
        
        delete_btn = QPushButton(_("delete"))
        delete_btn.clicked.connect(self.delete_selected_task)
        
        task_actions_layout.addWidget(edit_btn)
        task_actions_layout.addWidget(complete_btn)
        task_actions_layout.addWidget(delete_btn)
        task_actions_layout.addStretch()
        
        layout.addLayout(task_actions_layout)
        
        widget.setLayout(layout)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞—á–∏
        self.refresh_tasks()
        
        return widget
    
    def create_blocks_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–ª–æ–∫–∞–º–∏"""
        widget = QWidget()
        layout = QVBoxLayout()
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        buttons_layout = QHBoxLayout()
        
        add_btn = QPushButton("+ –î–æ–±–∞–≤–∏—Ç—å –±–ª–æ–∫")
        add_btn.clicked.connect(self.add_time_block)
        
        process_btn = QPushButton("–û–±—Ä–∞–±–æ—Ç–∞—Ç—å (Rust)")
        process_btn.clicked.connect(self.process_with_rust)
        
        calculate_btn = QPushButton("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å (C++)")
        calculate_btn.clicked.connect(self.calculate_with_cpp)
        
        buttons_layout.addWidget(add_btn)
        buttons_layout.addWidget(process_btn)
        buttons_layout.addWidget(calculate_btn)
        buttons_layout.addStretch()
        
        layout.addLayout(buttons_layout)
        
        # –û–±–ª–∞—Å—Ç—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.results_area = QTextEdit()
        self.results_area.setPlainText("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–∏–±—Ä–∏–¥–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ!\n\n–ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —è–∑—ã–∫–∏:\n‚Ä¢ Python - –æ—Å–Ω–æ–≤–∞ –∏ UI\n‚Ä¢ C++ - –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏\n‚Ä¢ Rust - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö\n‚Ä¢ JavaScript - –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å\n\n–î–æ–±–∞–≤—å—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –±–ª–æ–∫–∏ –∏ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å!")
        layout.addWidget(self.results_area)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥—É–ª—è—Ö
        self.modules_info = QLabel(info_text)
        self.modules_info.setText(info_text)
        self.modules_info.setStyleSheet("""
            background: #2D2D2D;
            padding: 10px;
            border-radius: 6px;
            font-family: 'Consolas', monospace;
            color: #CCCCCC;
        """)
    
    def setup_timers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–π–º–µ—Ä–æ–≤"""
        # –¢–∞–π–º–µ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        self.stats_timer = QTimer()
        self.stats_timer.timeout.connect(self.update_statistics)
        self.stats_timer.start(5000)  # –ö–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
    
    def add_time_block(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –±–ª–æ–∫–∞"""
        import random
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –±–ª–æ–∫ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        block = {
            'id': len(self.time_blocks) + 1,
            'title': f'–ó–∞–¥–∞—á–∞ {len(self.time_blocks) + 1}',
            'duration': random.randint(30, 180),  # 30-180 –º–∏–Ω—É—Ç
            'created_at': datetime.now().isoformat(),
            'status': 'active'
        }
        
        self.time_blocks.append(block)
        
        self.results_area.append(f"\n+ –î–æ–±–∞–≤–ª–µ–Ω –±–ª–æ–∫: {block['title']} ({block['duration']} –º–∏–Ω)")
        self.results_area.append(f"   –í—Å–µ–≥–æ –±–ª–æ–∫–æ–≤: {len(self.time_blocks)}")
    
    def process_with_rust(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–º–æ—â—å—é Rust"""
        if not self.time_blocks:
            self.results_area.append("\n–ù–µ—Ç –±–ª–æ–∫–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            return
        
        self.results_area.append(f"\n–û–±—Ä–∞–±–æ—Ç–∫–∞ {len(self.time_blocks)} –±–ª–æ–∫–æ–≤ —Å –ø–æ–º–æ—â—å—é Rust...")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ Rust –º–æ–¥—É–ª—å
        result = self.rust_processor.process_time_blocks(self.time_blocks)
        
        processor = result.get('processor', 'unknown')
        efficiency = result.get('total_efficiency', 0)
        
        self.results_area.append(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ({processor})")
        self.results_area.append(f"–û–±—â–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {efficiency:.1f}%")
    
    def calculate_with_cpp(self):
        """–†–∞—Å—á–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å –ø–æ–º–æ—â—å—é C++"""
        if not self.time_blocks:
            self.results_area.append("\n–ù–µ—Ç –±–ª–æ–∫–æ–≤ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞")
            return
        
        self.results_area.append(f"\n–†–∞—Å—á–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è {len(self.time_blocks)} –±–ª–æ–∫–æ–≤...")
        
        # –ü—Ä–æ—Å—Ç–æ–π —Ä–∞—Å—á–µ—Ç –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–∞ Python
        if not self.time_blocks:
            productivity = 0.0
        else:
            total_minutes = sum(block.get('duration', 0) for block in self.time_blocks)
            # 8 —á–∞—Å–æ–≤ = 100% –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            productivity = min(100.0, (total_minutes / 480.0) * 100.0)
        
        self.results_area.append(f"–†–∞—Å—á–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω (Python)")
        self.results_area.append(f"–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {productivity:.1f}%")
    
    
    def update_statistics(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        if self.time_blocks:
            total_duration = sum(block['duration'] for block in self.time_blocks)
            avg_duration = total_duration / len(self.time_blocks)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ–∫–Ω–∞ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
            self.setWindowTitle(f"Hybrid App - –ë–ª–æ–∫–æ–≤: {len(self.time_blocks)}, –í—Ä–µ–º—è: {total_duration} –º–∏–Ω")
    
    def on_language_changed(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω—ã —è–∑—ã–∫–∞"""
        selected_code = self.language_combo.currentData()
        if selected_code and localization.set_language(selected_code):
            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ–∫–Ω–∞
            self.setWindowTitle(_("app_title"))
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã –≤ dashboard
            if hasattr(self, 'js_dashboard'):
                self.js_dashboard.update_translations()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
            self.refresh_tasks()
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            QMessageBox.information(self, _("language"), _("language_changed", localization.get_supported_languages()[selected_code]))
    
    def add_task_dialog(self):
        """–î–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏"""
        dialog = TaskDialog(self)
        if dialog.exec_() == QDialog.Accepted:
            task_data = dialog.get_task_data()
            
            if not task_data['title']:
                QMessageBox.warning(self, _("add_task"), "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏")
                return
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
            task = task_manager.create_task(
                title=task_data['title'],
                description=task_data['description'],
                start_time=task_data['start_time'],
                end_time=task_data['end_time'],
                priority=task_data['priority']
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
            self.refresh_tasks()
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            QMessageBox.information(self, _("add_task"), _("task_added"))
    
    def edit_selected_task(self):
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏"""
        current_item = self.tasks_list.currentItem()
        if not current_item:
            QMessageBox.warning(self, _("edit"), "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return
        
        task_id = current_item.data(Qt.UserRole)
        task = task_manager.get_task_by_id(task_id)
        
        if not task:
            QMessageBox.warning(self, _("edit"), "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        dialog = TaskDialog(self, task)
        if dialog.exec_() == QDialog.Accepted:
            task_data = dialog.get_task_data()
            
            if not task_data['title']:
                QMessageBox.warning(self, _("edit"), "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏")
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á—É
            task_manager.update_task(
                task_id,
                title=task_data['title'],
                description=task_data['description'],
                start_time=task_data['start_time'],
                end_time=task_data['end_time'],
                priority=task_data['priority'],
                status=task_data['status']
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
            self.refresh_tasks()
            
            QMessageBox.information(self, _("edit"), "–ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
    
    def complete_selected_task(self):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏"""
        current_item = self.tasks_list.currentItem()
        if not current_item:
            QMessageBox.warning(self, _("complete"), "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")
            return
        
        task_id = current_item.data(Qt.UserRole)
        task = task_manager.complete_task(task_id)
        
        if task:
            self.refresh_tasks()
            QMessageBox.information(self, _("complete"), _("task_completed"))
        else:
            QMessageBox.warning(self, _("complete"), "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É")
    
    def delete_selected_task(self):
        """–£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏"""
        current_item = self.tasks_list.currentItem()
        if not current_item:
            QMessageBox.warning(self, _("delete"), "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return
        
        task_id = current_item.data(Qt.UserRole)
        task = task_manager.get_task_by_id(task_id)
        
        if not task:
            QMessageBox.warning(self, _("delete"), "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
        reply = QMessageBox.question(
            self, _("delete"), 
            f"–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É '{task.title}'?",
            QMessageBox.Yes | QMessageBox.No,
            QMessageBox.No
        )
        
        if reply == QMessageBox.Yes:
            if task_manager.delete_task(task_id):
                self.refresh_tasks()
                QMessageBox.information(self, _("delete"), _("task_deleted"))
            else:
                QMessageBox.warning(self, _("delete"), "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É")
    
    def refresh_tasks(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á"""
        self.tasks_list.clear()
        
        today_tasks = task_manager.get_tasks_for_today()
        
        if not today_tasks:
            item = QListWidgetItem(_("no_tasks"))
            item.setFlags(item.flags() & ~Qt.ItemIsSelectable)
            self.tasks_list.addItem(item)
            return
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞
        today_tasks.sort(key=lambda t: t.start_time)
        
        for task in today_tasks:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —ç–ª–µ–º–µ–Ω—Ç–∞
            status_text = self.get_status_text(task.status)
            priority_text = self.get_priority_text(task.priority)
            time_text = f"{task.start_time.strftime('%H:%M')} - {task.end_time.strftime('%H:%M')}"
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç —Å—Ç–∞—Ç—É—Å–∞
            status_color = self.get_status_color(task.status)
            
            item_text = f"[{status_text}] {task.title}\n"
            item_text += f"‚è∞ {time_text} | üéØ {priority_text}\n"
            
            if task.description:
                item_text += f"üìù {task.description[:50]}{'...' if len(task.description) > 50 else ''}"
            
            item = QListWidgetItem(item_text)
            item.setData(Qt.UserRole, task.id)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
            item.setBackground(status_color)
            
            self.tasks_list.addItem(item)
    
    def get_status_text(self, status: TaskStatus) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ —Ç–µ–∫—É—â–µ–º —è–∑—ã–∫–µ"""
        status_map = {
            TaskStatus.PLANNED: _("status_planned"),
            TaskStatus.IN_PROGRESS: _("status_in_progress"),
            TaskStatus.COMPLETED: _("status_completed"),
            TaskStatus.CANCELLED: _("status_cancelled")
        }
        return status_map.get(status, str(status.value))
    
    def get_priority_text(self, priority: TaskPriority) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –Ω–∞ —Ç–µ–∫—É—â–µ–º —è–∑—ã–∫–µ"""
        priority_map = {
            TaskPriority.LOW: _("priority_low"),
            TaskPriority.MEDIUM: _("priority_medium"),
            TaskPriority.HIGH: _("priority_high"),
            TaskPriority.URGENT: _("priority_urgent")
        }
        return priority_map.get(priority, str(priority.value))
    
    def get_status_color(self, status: TaskStatus):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏"""
        from PyQt5.QtGui import QColor
        
        color_map = {
            TaskStatus.PLANNED: QColor(70, 70, 70),      # –°–µ—Ä—ã–π
            TaskStatus.IN_PROGRESS: QColor(255, 193, 7), # –ñ–µ–ª—Ç—ã–π
            TaskStatus.COMPLETED: QColor(76, 175, 80),   # –ó–µ–ª–µ–Ω—ã–π
            TaskStatus.CANCELLED: QColor(244, 67, 54)    # –ö—Ä–∞—Å–Ω—ã–π
        }
        return color_map.get(status, QColor(70, 70, 70))

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π –≤—Å–µ—Ö —É–ª—É—á—à–µ–Ω–∏–π"""
    app = QApplication(sys.argv)
    
    print("üöÄ –ó–∞–ø—É—Å–∫ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Time Blocking v4.0...")
    print("‚úÖ –£–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã")
    print("‚úÖ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞: –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
    print("‚úÖ Drag & Drop –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: –≥–æ—Ç–æ–≤")
    print("‚úÖ –û–±–ª–∞—á–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
    print("‚úÖ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: –≤–∫–ª—é—á–µ–Ω–∞")
    
    # –°–æ–∑–¥–∞–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    window = HybridTimeBlockingApp()
    window.show()
    
    print("üéâ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ!")
    print("üìä –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:")
    print("   - –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
    print("   - –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
    print("   - –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã")
    print("   - –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö")
    print("   - –£–ª—É—á—à–µ–Ω–Ω—ã–π UI —Å –∞–Ω–∏–º–∞—Ü–∏—è–º–∏")
    
    sys.exit(app.exec_())

if __name__ == "__main__":
    main()
