# build_csharp.py - –°–±–æ—Ä–∫–∞ C# –º–æ–¥—É–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
import subprocess
import os
import sys

def check_dotnet():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è .NET SDK"""
    try:
        result = subprocess.run(['dotnet', '--version'], 
                              capture_output=True, text=True, timeout=10)
        if result.returncode == 0:
            version = result.stdout.strip()
            print(f"‚úÖ .NET SDK –Ω–∞–π–¥–µ–Ω: –≤–µ—Ä—Å–∏—è {version}")
            return True
        else:
            print("‚ùå .NET SDK –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ .NET SDK: {e}")
        return False

def build_csharp_module():
    """–°–±–æ—Ä–∫–∞ C# –º–æ–¥—É–ª—è"""
    print("üî® –ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä–∫—É C# –º–æ–¥—É–ª—è...")
    
    try:
        # –°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
        result = subprocess.run(['dotnet', 'build', 'PerformanceModule.csproj', 
                               '--configuration', 'Release'],
                              capture_output=True, text=True, timeout=60)
        
        if result.returncode == 0:
            print("‚úÖ C# –º–æ–¥—É–ª—å —Å–æ–±—Ä–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ DLL
            dll_paths = [
                "bin/Release/net6.0/PerformanceModule.dll",
                "PerformanceModule.dll"
            ]
            
            for dll_path in dll_paths:
                if os.path.exists(dll_path):
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª: {dll_path}")
                    
                    # –ö–æ–ø–∏—Ä—É–µ–º –≤ –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                    if dll_path != "PerformanceModule.dll":
                        import shutil
                        shutil.copy2(dll_path, "PerformanceModule.dll")
                        print("‚úÖ DLL —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞")
                    
                    return True
            
            print("‚ö†Ô∏è DLL —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ —Å–±–æ—Ä–∫–∏")
            return False
            
        else:
            print("‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏ C# –º–æ–¥—É–ª—è:")
            print(result.stderr)
            return False
            
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Å–±–æ—Ä–∫–µ: {e}")
        return False

def test_csharp_module():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ C# –º–æ–¥—É–ª—è"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ C# –º–æ–¥—É–ª—è...")
    
    try:
        from csharp_performance import csharp_performance
        
        if csharp_performance.available:
            print("‚úÖ C# –º–æ–¥—É–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            
            # –¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            productivity = csharp_performance.calculate_productivity(5, 300)
            print(f"‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {productivity:.2f}%")
            
            # –¢–µ—Å—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            efficiency = csharp_performance.calculate_efficiency(5, 300)
            print(f"‚úÖ –¢–µ—Å—Ç —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {efficiency:.2f}")
            
            # –¢–µ—Å—Ç –±–µ–Ω—á–º–∞—Ä–∫–∞
            benchmark = csharp_performance.performance_benchmark()
            print(f"‚úÖ –ë–µ–Ω—á–º–∞—Ä–∫: {benchmark:.2f} –º—Å")
            
            # –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            sys_info = csharp_performance.get_system_info()
            print(f"‚úÖ –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {sys_info}")
            
            return True
        else:
            print("‚ùå C# –º–æ–¥—É–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Python fallback")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False

def show_instructions():
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ .NET"""
    print("\n" + "="*60)
    print("–ò–ù–°–¢–†–£–ö–¶–ò–ò –ü–û –£–°–¢–ê–ù–û–í–ö–ï .NET SDK")
    print("="*60)
    print("""
üîß –î–ª—è —Å–±–æ—Ä–∫–∏ C# –º–æ–¥—É–ª—è –Ω—É–∂–µ–Ω .NET 6.0 SDK –∏–ª–∏ –Ω–æ–≤–µ–µ:

1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞: https://dotnet.microsoft.com/download
2. –°–∫–∞—á–∞–π—Ç–µ .NET 6.0 SDK –∏–ª–∏ –Ω–æ–≤–µ–µ
3. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ SDK
4. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–º–∞–Ω–¥–Ω—É—é —Å—Ç—Ä–æ–∫—É
5. –í—ã–ø–æ–ª–Ω–∏—Ç–µ: python build_csharp.py

üîß –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ —á–µ—Ä–µ–∑ winget (Windows 11):
   winget install Microsoft.DotNet.SDK.6

üîß –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ —á–µ—Ä–µ–∑ Chocolatey:
   choco install dotnet-6.0-sdk

üìù –ü–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ: dotnet --version
    """)

def main():
    print("üöÄ –°–ë–û–†–ö–ê C# –ú–û–î–£–õ–Ø –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò")
    print("="*50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º .NET SDK
    if not check_dotnet():
        show_instructions()
        return False
    
    # –°–æ–±–∏—Ä–∞–µ–º –º–æ–¥—É–ª—å
    if not build_csharp_module():
        print("‚ùå –°–±–æ—Ä–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å")
        return False
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å
    if not test_csharp_module():
        print("‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å")
        return False
    
    print("\n" + "="*50)
    print("‚úÖ C# –ú–û–î–£–õ–¨ –ì–û–¢–û–í –ö –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ!")
    print("="*50)
    print("üì¶ –§–∞–π–ª: PerformanceModule.dll")
    print("üöÄ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è: csharp_performance.py")
    print("‚úÖ –°—Ç–∞—Ç—É—Å: –ì–æ—Ç–æ–≤ –¥–ª—è hybrid_app.py")
    
    return True

if __name__ == "__main__":
    success = main()
    if not success:
        print("\n‚ö†Ô∏è –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å Python fallback")
        print("üí° C# –º–æ–¥—É–ª—å –æ–ø—Ü–∏–æ–Ω–∞–ª–µ–Ω –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
    
    sys.exit(0 if success else 1)
