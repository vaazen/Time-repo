// data_processor.rs - –ú–æ–¥—É–ª—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ Rust
use std::env;
use std::fs;
use std::collections::HashMap;
use serde::{Deserialize, Serialize};
use chrono::{DateTime, Utc, NaiveDateTime};

#[derive(Deserialize, Serialize, Clone, Debug)]
struct TimeBlock {
    id: u32,
    title: String,
    duration: u32,
    created_at: String,
    status: String,
}

#[derive(Serialize)]
struct ProcessedBlock {
    id: u32,
    title: String,
    duration: u32,
    created_at: String,
    status: String,
    efficiency: f64,
    priority_score: f64,
    optimal_time: String,
    processed_at: String,
}

#[derive(Serialize)]
struct ProcessingResult {
    processed_blocks: Vec<ProcessedBlock>,
    total_efficiency: f64,
    optimization_suggestions: Vec<String>,
    performance_metrics: PerformanceMetrics,
    processor: String,
}

#[derive(Serialize)]
struct PerformanceMetrics {
    total_duration: u32,
    average_duration: f64,
    efficiency_distribution: HashMap<String, u32>,
    peak_productivity_hours: Vec<u8>,
    fragmentation_index: f64,
}

fn main() {
    let args: Vec<String> = env::args().collect();
    
    if args.len() != 2 {
        eprintln!("Usage: {} <input_file>", args[0]);
        std::process::exit(1);
    }
    
    let filename = &args[1];
    
    match process_time_blocks(filename) {
        Ok(result) => {
            let json_output = serde_json::to_string_pretty(&result).unwrap();
            println!("{}", json_output);
        }
        Err(e) => {
            eprintln!("Error processing blocks: {}", e);
            std::process::exit(1);
        }
    }
}

fn process_time_blocks(filename: &str) -> Result<ProcessingResult, Box<dyn std::error::Error>> {
    // –ß–∏—Ç–∞–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    let content = fs::read_to_string(filename)?;
    let blocks: Vec<TimeBlock> = serde_json::from_str(&content)?;
    
    if blocks.is_empty() {
        return Ok(ProcessingResult {
            processed_blocks: vec![],
            total_efficiency: 0.0,
            optimization_suggestions: vec!["–î–æ–±–∞–≤—å—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –±–ª–æ–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞".to_string()],
            performance_metrics: PerformanceMetrics {
                total_duration: 0,
                average_duration: 0.0,
                efficiency_distribution: HashMap::new(),
                peak_productivity_hours: vec![],
                fragmentation_index: 0.0,
            },
            processor: "rust".to_string(),
        });
    }
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –±–ª–æ–∫
    let mut processed_blocks = Vec::new();
    let mut total_efficiency = 0.0;
    
    for block in &blocks {
        let efficiency = calculate_efficiency(&block);
        let priority_score = calculate_priority_score(&block);
        let optimal_time = suggest_optimal_time(&block);
        
        processed_blocks.push(ProcessedBlock {
            id: block.id,
            title: block.title.clone(),
            duration: block.duration,
            created_at: block.created_at.clone(),
            status: block.status.clone(),
            efficiency,
            priority_score,
            optimal_time,
            processed_at: Utc::now().to_rfc3339(),
        });
        
        total_efficiency += efficiency;
    }
    
    total_efficiency /= blocks.len() as f64;
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    let performance_metrics = generate_performance_metrics(&blocks);
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    let optimization_suggestions = generate_optimization_suggestions(&blocks, &performance_metrics);
    
    Ok(ProcessingResult {
        processed_blocks,
        total_efficiency,
        optimization_suggestions,
        performance_metrics,
        processor: "rust".to_string(),
    })
}

fn calculate_efficiency(block: &TimeBlock) -> f64 {
    // –ê–ª–≥–æ—Ä–∏—Ç–º —Ä–∞—Å—á–µ—Ç–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –±–ª–æ–∫–∞
    let base_efficiency = match block.duration {
        0..=30 => 60.0,      // –ö–æ—Ä–æ—Ç–∫–∏–µ –±–ª–æ–∫–∏ –º–µ–Ω–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã
        31..=90 => 85.0,     // –û–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        91..=180 => 95.0,    // –•–æ—Ä–æ—à–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –≥–ª—É–±–æ–∫–æ–π —Ä–∞–±–æ—Ç—ã
        181..=300 => 80.0,   // –î–ª–∏–Ω–Ω—ã–µ –±–ª–æ–∫–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –º–µ–Ω–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã
        _ => 60.0,           // –û—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–µ –±–ª–æ–∫–∏
    };
    
    // –ë–æ–Ω—É—Å –∑–∞ —Å—Ç–∞—Ç—É—Å
    let status_multiplier = match block.status.as_str() {
        "completed" => 1.2,
        "active" => 1.0,
        "planned" => 0.8,
        _ => 0.9,
    };
    
    // –£—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–µ–¥–∞–≤–Ω–∏–µ –±–ª–æ–∫–∏ –±–æ–ª–µ–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã)
    let time_bonus = 1.0; // –£–ø—Ä–æ—â–µ–Ω–Ω–æ, –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –±—ã –ø–∞—Ä—Å–∏–ª–∏ –¥–∞—Ç—É
    
    (base_efficiency * status_multiplier * time_bonus).min(100.0)
}

fn calculate_priority_score(block: &TimeBlock) -> f64 {
    // –†–∞—Å—á–µ—Ç –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤
    let duration_score = (block.duration as f64 / 120.0).min(1.0) * 40.0; // –î–æ 40 –±–∞–ª–ª–æ–≤ –∑–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    
    let title_score = if block.title.to_lowercase().contains("–≤–∞–∂–Ω") || 
                         block.title.to_lowercase().contains("—Å—Ä–æ—á–Ω") {
        30.0
    } else if block.title.to_lowercase().contains("–≤—Å—Ç—Ä–µ—á–∞") ||
              block.title.to_lowercase().contains("–∑–≤–æ–Ω–æ–∫") {
        25.0
    } else {
        20.0
    };
    
    let status_score = match block.status.as_str() {
        "active" => 30.0,
        "planned" => 20.0,
        "completed" => 10.0,
        _ => 15.0,
    };
    
    duration_score + title_score + status_score
}

fn suggest_optimal_time(block: &TimeBlock) -> String {
    // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
    match block.duration {
        0..=60 => "09:00-10:00 (—É—Ç—Ä–µ–Ω–Ω—è—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è)".to_string(),
        61..=120 => "10:00-12:00 (–ø–∏–∫ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏)".to_string(),
        121..=180 => "14:00-17:00 (–ø–æ—Å–ª–µ–æ–±–µ–¥–µ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞)".to_string(),
        _ => "09:00-12:00 (—É—Ç—Ä–µ–Ω–Ω–∏–π –±–ª–æ–∫)".to_string(),
    }
}

fn generate_performance_metrics(blocks: &[TimeBlock]) -> PerformanceMetrics {
    let total_duration: u32 = blocks.iter().map(|b| b.duration).sum();
    let average_duration = total_duration as f64 / blocks.len() as f64;
    
    // –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    let mut efficiency_distribution = HashMap::new();
    for block in blocks {
        let efficiency = calculate_efficiency(block);
        let category = match efficiency as u32 {
            0..=60 => "low",
            61..=80 => "medium",
            81..=95 => "high",
            _ => "excellent",
        };
        *efficiency_distribution.entry(category.to_string()).or_insert(0) += 1;
    }
    
    // –ü–∏–∫–æ–≤—ã–µ —á–∞—Å—ã –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
    let peak_productivity_hours = vec![9, 10, 11, 14, 15];
    
    // –ò–Ω–¥–µ–∫—Å —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ (–º–Ω–æ–≥–æ –∫–æ—Ä–æ—Ç–∫–∏—Ö –±–ª–æ–∫–æ–≤ = –≤—ã—Å–æ–∫–∞—è —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞—Ü–∏—è)
    let short_blocks = blocks.iter().filter(|b| b.duration < 60).count();
    let fragmentation_index = (short_blocks as f64 / blocks.len() as f64) * 100.0;
    
    PerformanceMetrics {
        total_duration,
        average_duration,
        efficiency_distribution,
        peak_productivity_hours,
        fragmentation_index,
    }
}

fn generate_optimization_suggestions(blocks: &[TimeBlock], metrics: &PerformanceMetrics) -> Vec<String> {
    let mut suggestions = Vec::new();
    
    // –ê–Ω–∞–ª–∏–∑ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
    if metrics.fragmentation_index > 50.0 {
        suggestions.push("üîÑ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∫–æ—Ä–æ—Ç–∫–∏—Ö –±–ª–æ–∫–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±—ä–µ–¥–∏–Ω–∏—Ç—å –ø–æ—Ö–æ–∂–∏–µ –∑–∞–¥–∞—á–∏.".to_string());
    }
    
    // –ê–Ω–∞–ª–∏–∑ —Å—Ä–µ–¥–Ω–µ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    if metrics.average_duration < 45.0 {
        suggestions.push("‚è∞ –£–≤–µ–ª–∏—á—å—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±–ª–æ–∫–æ–≤ –¥–ª—è –ª—É—á—à–µ–π –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 60-90 –º–∏–Ω).".to_string());
    } else if metrics.average_duration > 180.0 {
        suggestions.push("‚úÇÔ∏è –†–∞–∑–±–µ–π—Ç–µ –¥–ª–∏–Ω–Ω—ã–µ –±–ª–æ–∫–∏ –Ω–∞ –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–∏–µ –¥–ª—è –ª—É—á—à–µ–≥–æ —Ñ–æ–∫—É—Å–∞.".to_string());
    }
    
    // –ê–Ω–∞–ª–∏–∑ –æ–±—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    if metrics.total_duration < 240 {
        suggestions.push("üìà –£–≤–µ–ª–∏—á—å—Ç–µ –æ–±—â–µ–µ –≤—Ä–µ–º—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.".to_string());
    }
    
    // –ê–Ω–∞–ª–∏–∑ —Å—Ç–∞—Ç—É—Å–æ–≤
    let completed_count = blocks.iter().filter(|b| b.status == "completed").count();
    let completion_rate = (completed_count as f64 / blocks.len() as f64) * 100.0;
    
    if completion_rate < 70.0 {
        suggestions.push("‚úÖ –ù–∏–∑–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á. –ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ –±–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ.".to_string());
    }
    
    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    suggestions.push("üåÖ –ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ —Å–ª–æ–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏ –Ω–∞ —É—Ç—Ä–µ–Ω–Ω–∏–µ —á–∞—Å—ã (9:00-12:00).".to_string());
    suggestions.push("üçΩÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ—Å–ª–µ–æ–±–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è —Ä—É—Ç–∏–Ω–Ω—ã—Ö –∑–∞–¥–∞—á.".to_string());
    
    if suggestions.is_empty() {
        suggestions.push("üéâ –û—Ç–ª–∏—á–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ.".to_string());
    }
    
    suggestions
}

// –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –≤ Cargo.toml:
/*
[dependencies]
serde = { version = "1.0", features = ["derive"] }
serde_json = "1.0"
chrono = { version = "0.4", features = ["serde"] }
*/

// –ö–æ–º–ø–∏–ª—è—Ü–∏—è:
// cargo build --release
// –ò—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª –±—É–¥–µ—Ç –≤ target/release/data_processor.exe
