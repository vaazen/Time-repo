"""
üìö –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π Time Blocking v6.0
–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —É–ª—É—á—à–µ–Ω–∏–π
"""

import asyncio
from datetime import datetime, timedelta
from typing import List, Dict

# –ò–º–ø–æ—Ä—Ç—ã –Ω–æ–≤—ã—Ö –º–æ–¥—É–ª–µ–π
from config_manager import get_config, update_config
from cache_manager import cached, get_cache_manager
from async_notifications import (
    get_notification_manager, create_task_reminder, 
    create_break_suggestion, NotificationRule
)

class ProductivityAnalyzer:
    """–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    
    def __init__(self):
        self.cache = get_cache_manager()
    
    @cached(ttl=300, use_file_cache=True)  # –ö—ç—à–∏—Ä—É–µ–º –Ω–∞ 5 –º–∏–Ω—É—Ç
    def analyze_daily_productivity(self, date: str) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞ –¥–µ–Ω—å (—Ç—è–∂–µ–ª–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è)"""
        print(f"–í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∑–∞ {date}...")
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º —Ç—è–∂–µ–ª—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è
        import time
        time.sleep(2)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
        return {
            "date": date,
            "total_tasks": 15,
            "completed_tasks": 12,
            "productivity_score": 80,
            "focus_time_minutes": 240,
            "break_time_minutes": 60,
            "efficiency_rating": "–í—ã—Å–æ–∫–∞—è"
        }
    
    @cached(ttl=60)  # –ö—ç—à–∏—Ä—É–µ–º –Ω–∞ 1 –º–∏–Ω—É—Ç—É
    def get_current_stats(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        return {
            "active_tasks": 3,
            "completed_today": 8,
            "time_spent": 180,  # –º–∏–Ω—É—Ç—ã
            "current_focus_session": 45
        }

class SmartNotificationSystem:
    """–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —É–º–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    
    def __init__(self):
        self.notification_manager = get_notification_manager()
        self.setup_rules()
    
    def setup_rules(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∞–≤–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        
        # –ü—Ä–∞–≤–∏–ª–æ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø–µ—Ä–µ—Ä—ã–≤–∞—Ö
        break_rule = NotificationRule(
            name="break_reminder",
            condition=self.should_suggest_break,
            notification_factory=self.create_break_notification
        )
        
        # –ü—Ä–∞–≤–∏–ª–æ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –¥–µ–¥–ª–∞–π–Ω–∞—Ö
        deadline_rule = NotificationRule(
            name="deadline_warning",
            condition=self.has_approaching_deadlines,
            notification_factory=self.create_deadline_notification
        )
        
        self.notification_manager.add_rule(break_rule)
        self.notification_manager.add_rule(deadline_rule)
    
    def should_suggest_break(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω—É–∂–µ–Ω –ª–∏ –ø–µ—Ä–µ—Ä—ã–≤"""
        # –õ–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–µ—Ä–µ—Ä—ã–≤–∞
        stats = ProductivityAnalyzer().get_current_stats()
        return stats["current_focus_session"] >= 90  # 90 –º–∏–Ω—É—Ç –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–π —Ä–∞–±–æ—Ç—ã
    
    def has_approaching_deadlines(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–±–ª–∏–∂–∞—é—â–∏—Ö—Å—è –¥–µ–¥–ª–∞–π–Ω–æ–≤"""
        # –õ–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–µ–¥–ª–∞–π–Ω–æ–≤
        return datetime.now().hour in [9, 14, 18]  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è
    
    def create_break_notification(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–µ—Ä–µ—Ä—ã–≤–µ"""
        stats = ProductivityAnalyzer().get_current_stats()
        return create_break_suggestion(stats["current_focus_session"])
    
    def create_deadline_notification(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–µ–¥–ª–∞–π–Ω–µ"""
        from async_notifications import create_deadline_warning
        return create_deadline_warning("–í–∞–∂–Ω—ã–π –ø—Ä–æ–µ–∫—Ç", 4)  # 4 —á–∞—Å–∞ –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞

class ConfigurableTaskManager:
    """–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    
    def __init__(self):
        self.config = get_config()
        self.tasks = []
    
    def create_task(self, title: str, description: str = "") -> Dict:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        task = {
            "id": f"task_{len(self.tasks) + 1}",
            "title": title,
            "description": description,
            "created_at": datetime.now(),
            "priority": "medium",
            "estimated_duration": self.config.ui.auto_save_interval * 2  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É
        }
        
        self.tasks.append(task)
        
        # –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
        if self.config.data.backup_enabled:
            self.save_tasks()
        
        return task
    
    def save_tasks(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á"""
        print(f"–°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á–∏ (—Ñ–æ—Ä–º–∞—Ç: {self.config.data.export_format})")
        # –õ–æ–≥–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    
    def get_ui_settings(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ UI"""
        return {
            "theme": self.config.ui.theme,
            "language": self.config.ui.language,
            "animations": self.config.ui.animations_enabled,
            "font_size": self.config.ui.font_size
        }

class PerformanceOptimizedApp:
    """–ü—Ä–∏–º–µ—Ä –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    def __init__(self):
        self.config = get_config()
        self.cache = get_cache_manager()
        self.analyzer = ProductivityAnalyzer()
        self.notifications = SmartNotificationSystem()
        self.task_manager = ConfigurableTaskManager()
    
    async def run_daily_analysis(self):
        """–ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        print("–ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞...")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
        tasks = []
        for i in range(7):
            date = (datetime.now() - timedelta(days=i)).strftime("%Y-%m-%d")
            
            # –ë–ª–∞–≥–æ–¥–∞—Ä—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—é, –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –±—É–¥—É—Ç –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–º–∏
            analysis = self.analyzer.analyze_daily_productivity(date)
            tasks.append(analysis)
        
        print(f"–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è {len(tasks)} –¥–Ω–µ–π")
        return tasks
    
    def demonstrate_caching(self):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è"""
        print("\n–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è:")
        
        import time
        
        # –ü–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤ - –º–µ–¥–ª–µ–Ω–Ω—ã–π (–±–µ–∑ –∫—ç—à–∞)
        start_time = time.time()
        result1 = self.analyzer.analyze_daily_productivity("2024-01-15")
        first_call_time = time.time() - start_time
        
        # –í—Ç–æ—Ä–æ–π –≤—ã–∑–æ–≤ - –±—ã—Å—Ç—Ä—ã–π (–∏–∑ –∫—ç—à–∞)
        start_time = time.time()
        result2 = self.analyzer.analyze_daily_productivity("2024-01-15")
        second_call_time = time.time() - start_time
        
        print(f"–ü–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤: {first_call_time:.3f} —Å–µ–∫")
        print(f"–í—Ç–æ—Ä–æ–π –≤—ã–∑–æ–≤: {second_call_time:.3f} —Å–µ–∫")
        
        # –ò–∑–±–µ–≥–∞–µ–º –¥–µ–ª–µ–Ω–∏—è –Ω–∞ –Ω–æ–ª—å
        if second_call_time > 0:
            speedup = first_call_time / second_call_time
            print(f"–£—Å–∫–æ—Ä–µ–Ω–∏–µ: {speedup:.1f}x")
        else:
            print("–£—Å–∫–æ—Ä–µ–Ω–∏–µ: >1000x (–≤—Ç–æ—Ä–æ–π –≤—ã–∑–æ–≤ –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–π)")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞
        stats = self.cache.get_stats()
        print(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞: {stats['memory_cache']['hit_rate']:.1f}% –ø–æ–ø–∞–¥–∞–Ω–∏–π")
    
    def demonstrate_notifications(self):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        print("\n–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        notifications = [
            create_task_reminder("task_1", "–ó–∞–≤–µ—Ä—à–∏—Ç—å –æ—Ç—á–µ—Ç", datetime.now()),
            create_break_suggestion(120),  # 2 —á–∞—Å–∞ —Ä–∞–±–æ—Ç—ã
        ]
        
        for notification in notifications:
            self.notifications.notification_manager.send_notification_sync(notification)
            print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {notification.title}")
    
    def demonstrate_configuration(self):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        print("\n–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        ui_settings = self.task_manager.get_ui_settings()
        print(f"–¢–µ–∫—É—â–∞—è —Ç–µ–º–∞: {ui_settings['theme']}")
        print(f"–Ø–∑—ã–∫: {ui_settings['language']}")
        print(f"–ê–Ω–∏–º–∞—Ü–∏–∏: {ui_settings['animations']}")
        
        # –ò–∑–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        print("–ò–∑–º–µ–Ω—è–µ–º —Ç–µ–º—É –Ω–∞ —Å–≤–µ—Ç–ª—É—é...")
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –ø–æ–ª—è, –Ω–µ –≤–µ—Å—å –æ–±—ä–µ–∫—Ç
        self.config.ui.theme = 'light'
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É —Å –Ω–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        task = self.task_manager.create_task(
            "–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞",
            "–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π"
        )
        print(f"–°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞: {task['title']}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    print("Time Blocking v6.0 - –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–∏–π")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app = PerformanceOptimizedApp()
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
    app.demonstrate_configuration()
    app.demonstrate_caching()
    app.demonstrate_notifications()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    await app.run_daily_analysis()
    
    print("\n–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("\n–û—Å–Ω–æ–≤–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è v6.0:")
    print("‚Ä¢ –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è")
    print("‚Ä¢ –ú–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–æ–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ") 
    print("‚Ä¢ –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
    print("‚Ä¢ –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π UI")
    print("‚Ä¢ –£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å")

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é
    asyncio.run(main())
