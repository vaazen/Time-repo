"""
üß™ –¢–µ—Å—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–ª—É—á—à–µ–Ω–∏–π Time Blocking v6.0
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –Ω–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
"""

import unittest
import asyncio
import tempfile
import os
import json
import time
from datetime import datetime, timedelta
from unittest.mock import patch, MagicMock

# –ò–º–ø–æ—Ä—Ç—ã —Ç–µ—Å—Ç–∏—Ä—É–µ–º—ã—Ö –º–æ–¥—É–ª–µ–π
from config_manager import ConfigManager, AppConfig, UIConfig
from cache_manager import CacheManager, cached
from async_notifications import (
    AsyncNotificationManager, Notification, NotificationType, 
    NotificationPriority, NotificationChannel, create_task_reminder
)

class TestConfigManager(unittest.TestCase):
    """–¢–µ—Å—Ç—ã —Å–∏—Å—Ç–µ–º—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    
    def setUp(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤"""
        self.temp_dir = tempfile.mkdtemp()
        self.config_path = os.path.join(self.temp_dir, "test_config.json")
        self.config_manager = ConfigManager(self.config_path)
    
    def tearDown(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤"""
        import shutil
        shutil.rmtree(self.temp_dir, ignore_errors=True)
    
    def test_default_config_creation(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        config = self.config_manager.load_config()
        
        self.assertIsInstance(config, AppConfig)
        self.assertEqual(config.ui.language, "ru")
        self.assertEqual(config.ui.theme, "dark")
        self.assertTrue(config.ui.animations_enabled)
    
    def test_config_save_and_load(self):
        """–¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = self.config_manager.load_config()
        
        # –ò–∑–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        config.ui.language = "en"
        config.ui.theme = "light"
        config.ai.model = "gpt-4"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        self.assertTrue(self.config_manager.save_config())
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º
        new_manager = ConfigManager(self.config_path)
        loaded_config = new_manager.load_config()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å
        self.assertEqual(loaded_config.ui.language, "en")
        self.assertEqual(loaded_config.ui.theme, "light")
        self.assertEqual(loaded_config.ai.model, "gpt-4")
    
    def test_env_variables_override(self):
        """–¢–µ—Å—Ç –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        with patch.dict(os.environ, {
            'OPENAI_API_KEY': 'test_key_123',
            'DEBUG': 'true',
            'LOG_LEVEL': 'DEBUG'
        }):
            config = self.config_manager.load_config()
            
            self.assertEqual(config.ai.api_key, 'test_key_123')
            self.assertTrue(config.debug_mode)
            self.assertEqual(config.log_level, 'DEBUG')
    
    def test_config_update(self):
        """–¢–µ—Å—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        success = self.config_manager.update_config(
            debug_mode=True,
            log_level='INFO'
        )
        
        self.assertTrue(success)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–∏–ª–∏—Å—å
        config = self.config_manager.get_config()
        self.assertTrue(config.debug_mode)
        self.assertEqual(config.log_level, 'INFO')

class TestCacheManager(unittest.TestCase):
    """–¢–µ—Å—Ç—ã —Å–∏—Å—Ç–µ–º—ã –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    def setUp(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤"""
        self.temp_dir = tempfile.mkdtemp()
        self.cache_manager = CacheManager(
            memory_cache_size=100,
            file_cache_size_mb=1
        )
        # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Ñ–∞–π–ª–æ–≤–æ–≥–æ –∫—ç—à–∞
        from pathlib import Path
        self.cache_manager.file_cache.cache_dir = Path(self.temp_dir)
    
    def tearDown(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤"""
        import shutil
        shutil.rmtree(self.temp_dir, ignore_errors=True)
    
    def test_memory_cache_basic_operations(self):
        """–¢–µ—Å—Ç –±–∞–∑–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –∫—ç—à–∞ –≤ –ø–∞–º—è—Ç–∏"""
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ
        self.cache_manager.set("test_key", "test_value")
        value = self.cache_manager.get("test_key")
        self.assertEqual(value, "test_value")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–ª—é—á
        value = self.cache_manager.get("nonexistent_key")
        self.assertIsNone(value)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ
        self.assertTrue(self.cache_manager.delete("test_key"))
        value = self.cache_manager.get("test_key")
        self.assertIsNone(value)
    
    def test_cache_ttl(self):
        """–¢–µ—Å—Ç –≤—Ä–µ–º–µ–Ω–∏ –∂–∏–∑–Ω–∏ –∫—ç—à–∞"""
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Å –∫–æ—Ä–æ—Ç–∫–∏–º TTL
        self.cache_manager.set("ttl_key", "ttl_value", ttl=0.1)  # 0.1 —Å–µ–∫—É–Ω–¥—ã
        
        # –°—Ä–∞–∑—É –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ
        value = self.cache_manager.get("ttl_key")
        self.assertEqual(value, "ttl_value")
        
        # –ñ–¥–µ–º –∏—Å—Ç–µ—á–µ–Ω–∏—è TTL
        time.sleep(0.2)
        
        # –¢–µ–ø–µ—Ä—å –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å None
        value = self.cache_manager.get("ttl_key")
        self.assertIsNone(value)
    
    def test_file_cache_operations(self):
        """–¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–π —Ñ–∞–π–ª–æ–≤–æ–≥–æ –∫—ç—à–∞"""
        test_data = {"complex": "data", "numbers": [1, 2, 3]}
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª–æ–≤—ã–π –∫—ç—à
        self.cache_manager.set("file_key", test_data, use_file_cache=True)
        
        # –û—á–∏—â–∞–µ–º –∫—ç—à –≤ –ø–∞–º—è—Ç–∏
        self.cache_manager.memory_cache.clear()
        
        # –î–æ–ª–∂–Ω—ã –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–æ–≤–æ–≥–æ –∫—ç—à–∞
        value = self.cache_manager.get("file_key", use_file_cache=True)
        self.assertEqual(value, test_data)
    
    def test_cached_decorator(self):
        """–¢–µ—Å—Ç –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è"""
        call_count = 0
        
        @cached(ttl=1.0)
        def expensive_function(x, y):
            nonlocal call_count
            call_count += 1
            return x + y
        
        # –ü–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤
        result1 = expensive_function(1, 2)
        self.assertEqual(result1, 3)
        self.assertEqual(call_count, 1)
        
        # –í—Ç–æ—Ä–æ–π –≤—ã–∑–æ–≤ —Å —Ç–µ–º–∏ –∂–µ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏ (–¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—ç—à)
        result2 = expensive_function(1, 2)
        self.assertEqual(result2, 3)
        self.assertEqual(call_count, 1)  # –§—É–Ω–∫—Ü–∏—è –Ω–µ –¥–æ–ª–∂–Ω–∞ –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–æ
        
        # –í—ã–∑–æ–≤ —Å –¥—Ä—É–≥–∏–º–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏
        result3 = expensive_function(2, 3)
        self.assertEqual(result3, 5)
        self.assertEqual(call_count, 2)  # –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤—ã–∑–≤–∞—Ç—å—Å—è
    
    def test_cache_statistics(self):
        """–¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞"""
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        self.cache_manager.set("key1", "value1")
        self.cache_manager.set("key2", "value2")
        
        # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã
        self.cache_manager.get("key1")  # hit
        self.cache_manager.get("key1")  # hit
        self.cache_manager.get("key3")  # miss
        
        stats = self.cache_manager.get_stats()
        
        self.assertEqual(stats['memory_cache']['size'], 2)
        self.assertEqual(stats['memory_cache']['hits'], 2)
        self.assertEqual(stats['memory_cache']['misses'], 1)
        self.assertAlmostEqual(stats['memory_cache']['hit_rate'], 66.7, places=1)

class TestAsyncNotifications(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    
    def setUp(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ—Å—Ç–æ–≤"""
        self.notification_manager = AsyncNotificationManager()
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –¥–ª—è —Ç–µ—Å—Ç–æ–≤
        self.notification_manager.running = False
    
    def test_notification_creation(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        notification = create_task_reminder(
            "test_task",
            "Test Task Title",
            datetime.now()
        )
        
        self.assertEqual(notification.type, NotificationType.TASK_REMINDER)
        self.assertEqual(notification.priority, NotificationPriority.MEDIUM)
        self.assertEqual(notification.task_id, "test_task")
        self.assertIn("Test Task Title", notification.message)
    
    def test_notification_scheduling(self):
        """–¢–µ—Å—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        future_time = datetime.now() + timedelta(minutes=5)
        notification = create_task_reminder(
            "scheduled_task",
            "Scheduled Task",
            future_time
        )
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        self.notification_manager.schedule_notification(notification)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ø–∏—Å–æ–∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
        self.assertEqual(len(self.notification_manager.scheduled_notifications), 1)
        self.assertEqual(
            self.notification_manager.scheduled_notifications[0].id,
            notification.id
        )
    
    def test_notification_delivery_conditions(self):
        """–¢–µ—Å—Ç —É—Å–ª–æ–≤–∏–π –¥–æ—Å—Ç–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        # –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –Ω–∏–∑–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
        low_priority_notification = Notification(
            id="test_low",
            type=NotificationType.BREAK_SUGGESTION,
            priority=NotificationPriority.LOW,
            title="Break Suggestion",
            message="Time for a break",
            channels=[NotificationChannel.SYSTEM_TRAY],
            scheduled_time=datetime.now(),
            created_at=datetime.now()
        )
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —É—Å–ª–æ–≤–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏
        should_deliver = self.notification_manager._should_deliver(low_priority_notification)
        self.assertIsInstance(should_deliver, bool)
    
    def test_notification_statistics(self):
        """–¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –∏—Å—Ç–æ—Ä–∏—é
        for i in range(5):
            notification = create_task_reminder(
                f"task_{i}",
                f"Task {i}",
                datetime.now()
            )
            notification.delivered = True
            self.notification_manager.notification_history.append(notification)
        
        stats = self.notification_manager.get_statistics()
        
        self.assertEqual(stats['total'], 5)
        self.assertEqual(stats['delivered'], 5)
        self.assertEqual(stats['delivery_rate'], 100.0)
        self.assertIn('by_type', stats)
        self.assertIn('by_priority', stats)

class TestIntegration(unittest.TestCase):
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã"""
    
    def setUp(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
        self.temp_dir = tempfile.mkdtemp()
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏
        config_path = os.path.join(self.temp_dir, "integration_config.json")
        self.config_manager = ConfigManager(config_path)
        
        self.cache_manager = CacheManager(memory_cache_size=50, file_cache_size_mb=1)
        from pathlib import Path
        self.cache_manager.file_cache.cache_dir = Path(self.temp_dir)
        
        self.notification_manager = AsyncNotificationManager()
        self.notification_manager.running = False
    
    def tearDown(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø–æ—Å–ª–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
        import shutil
        shutil.rmtree(self.temp_dir, ignore_errors=True)
    
    def test_config_cache_integration(self):
        """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è"""
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = self.config_manager.load_config()
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—ç—à–∞ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        cache_enabled = config.data.cache_enabled
        cache_size = config.data.cache_size_mb
        
        self.assertTrue(cache_enabled)
        self.assertGreater(cache_size, 0)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        if cache_enabled:
            self.cache_manager.set("config_test", "test_value")
            value = self.cache_manager.get("config_test")
            self.assertEqual(value, "test_value")
    
    def test_notifications_config_integration(self):
        """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = self.config_manager.load_config()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        notifications_enabled = config.ui.show_notifications
        
        # –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        notification = create_task_reminder(
            "integration_task",
            "Integration Test Task",
            datetime.now()
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É—á–∏—Ç—ã–≤–∞—é—Ç—Å—è
        should_deliver = self.notification_manager._should_deliver(notification)
        
        if notifications_enabled:
            # –ï—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã, –¥–æ–ª–∂–Ω–æ –¥–æ—Å—Ç–∞–≤–ª—è—Ç—å—Å—è
            self.assertTrue(should_deliver or notification.priority == NotificationPriority.URGENT)
    
    def test_performance_with_all_components(self):
        """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å –≤—Å–µ–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏"""
        start_time = time.time()
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
        config = self.config_manager.load_config()
        self.config_manager.save_config()
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –∫—ç—à–µ–º
        for i in range(10):
            self.cache_manager.set(f"perf_key_{i}", f"perf_value_{i}")
            self.cache_manager.get(f"perf_key_{i}")
        
        # –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        for i in range(5):
            notification = create_task_reminder(
                f"perf_task_{i}",
                f"Performance Task {i}",
                datetime.now()
            )
            self.notification_manager.schedule_notification(notification)
        
        end_time = time.time()
        execution_time = end_time - start_time
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω—è—é—Ç—Å—è –±—ã—Å—Ç—Ä–æ
        self.assertLess(execution_time, 1.0)  # –ú–µ–Ω–µ–µ 1 —Å–µ–∫—É–Ω–¥—ã

class TestPerformanceImprovements(unittest.TestCase):
    """–¢–µ—Å—Ç—ã —É–ª—É—á—à–µ–Ω–∏–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    
    def test_caching_performance_improvement(self):
        """–¢–µ—Å—Ç —É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –±–ª–∞–≥–æ–¥–∞—Ä—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—é"""
        cache_manager = CacheManager()
        
        # –§—É–Ω–∫—Ü–∏—è —Å –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
        @cached(ttl=60)
        def slow_function(x):
            time.sleep(0.1)  # –ò–º–∏—Ç–∏—Ä—É–µ–º –º–µ–¥–ª–µ–Ω–Ω—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
            return x * 2
        
        # –ü–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤ (–º–µ–¥–ª–µ–Ω–Ω—ã–π)
        start_time = time.time()
        result1 = slow_function(5)
        first_call_time = time.time() - start_time
        
        # –í—Ç–æ—Ä–æ–π –≤—ã–∑–æ–≤ (–±—ã—Å—Ç—Ä—ã–π, –∏–∑ –∫—ç—à–∞)
        start_time = time.time()
        result2 = slow_function(5)
        second_call_time = time.time() - start_time
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.assertEqual(result1, result2)
        self.assertEqual(result1, 10)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        self.assertGreater(first_call_time, 0.05)  # –ü–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–¥–ª–µ–Ω–Ω—ã–º
        self.assertLess(second_call_time, 0.01)    # –í—Ç–æ—Ä–æ–π –≤—ã–∑–æ–≤ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±—ã—Å—Ç—Ä—ã–º
        
        # –£—Å–∫–æ—Ä–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–º
        speedup = first_call_time / second_call_time
        self.assertGreater(speedup, 5)  # –ú–∏–Ω–∏–º—É–º 5x —É—Å–∫–æ—Ä–µ–Ω–∏–µ

def run_all_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ Time Blocking v6.0")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º test suite
    test_suite = unittest.TestSuite()
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç—ã
    test_classes = [
        TestConfigManager,
        TestCacheManager,
        TestAsyncNotifications,
        TestIntegration,
        TestPerformanceImprovements
    ]
    
    for test_class in test_classes:
        tests = unittest.TestLoader().loadTestsFromTestCase(test_class)
        test_suite.addTests(tests)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    runner = unittest.TextTestRunner(verbosity=2)
    result = runner.run(test_suite)
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\n" + "=" * 50)
    print(f"–¢–µ—Å—Ç–æ–≤ –∑–∞–ø—É—â–µ–Ω–æ: {result.testsRun}")
    print(f"–û—à–∏–±–æ–∫: {len(result.errors)}")
    print(f"–ù–µ—É–¥–∞—á: {len(result.failures)}")
    
    if result.wasSuccessful():
        print("–í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")
        
        if result.errors:
            print("\n–û—à–∏–±–∫–∏:")
            for test, error in result.errors:
                print(f"- {test}: {error}")
        
        if result.failures:
            print("\n–ù–µ—É–¥–∞—á–∏:")
            for test, failure in result.failures:
                print(f"- {test}: {failure}")
    
    return result.wasSuccessful()

if __name__ == "__main__":
    success = run_all_tests()
    exit(0 if success else 1)
