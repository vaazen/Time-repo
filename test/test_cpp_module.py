# test_cpp_module.py - –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ C++ –º–æ–¥—É–ª—è
import os
import ctypes
import time

def test_cpp_module():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ C++ –º–æ–¥—É–ª—è"""
    print("="*60)
    print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï C++ –ú–û–î–£–õ–Ø")
    print("="*60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ DLL —Ñ–∞–π–ª–∞
    dll_files = ["performance.dll", "performance.so"]
    dll_found = None
    
    for dll_file in dll_files:
        if os.path.exists(dll_file):
            dll_found = dll_file
            break
    
    if not dll_found:
        print("C++ –º–æ–¥—É–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        print("\n–î–ª—è –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ C++ –º–æ–¥—É–ª—è:")
        print("1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ MinGW-w64 –∏–ª–∏ Visual Studio Build Tools")
        print("2. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:")
        print("   g++ -shared -O3 performance_simple.cpp -o performance.dll")
        print("   –∏–ª–∏")
        print("   cl /LD /O2 performance_simple.cpp /Fe:performance.dll")
        print("\n3. –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ build_modules.py")
        return False
    
    print(f"‚úÖ –ù–∞–π–¥–µ–Ω C++ –º–æ–¥—É–ª—å: {dll_found}")
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É
        cpp_lib = ctypes.CDLL(f"./{dll_found}")
        print("‚úÖ C++ –º–æ–¥—É–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω")
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–∏–ø—ã —Ñ—É–Ω–∫—Ü–∏–π
        cpp_lib.calculate_productivity.argtypes = [ctypes.c_int, ctypes.c_int]
        cpp_lib.calculate_productivity.restype = ctypes.c_double
        
        cpp_lib.performance_benchmark.argtypes = []
        cpp_lib.performance_benchmark.restype = ctypes.c_double
        
        cpp_lib.test_function.argtypes = []
        cpp_lib.test_function.restype = ctypes.c_int
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
        print("\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π:")
        
        # –¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏
        test_result = cpp_lib.test_function()
        print(f"   test_function(): {test_result} {'‚úÖ' if test_result == 42 else '‚ùå'}")
        
        # –¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        productivity = cpp_lib.calculate_productivity(5, 300)
        print(f"   calculate_productivity(5, 300): {productivity:.2f}%")
        
        # –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        print("\n‚ö° –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:")
        
        # Python –≤–µ—Ä—Å–∏—è
        start_time = time.time()
        python_result = 0.0
        for i in range(1000000):
            python_result += i * 0.001
        python_time = time.time() - start_time
        
        # C++ –≤–µ—Ä—Å–∏—è
        start_time = time.time()
        cpp_result = cpp_lib.performance_benchmark()
        cpp_time = time.time() - start_time
        
        print(f"   Python –≤—Ä–µ–º—è: {python_time:.6f} —Å–µ–∫")
        print(f"   C++ –≤—Ä–µ–º—è: {cpp_time:.6f} —Å–µ–∫")
        
        if cpp_time > 0:
            speedup = python_time / cpp_time
            print(f"   –£—Å–∫–æ—Ä–µ–Ω–∏–µ: {speedup:.2f}x")
        
        print("\n‚úÖ C++ –º–æ–¥—É–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ C++ –º–æ–¥—É–ª—è: {e}")
        return False

def show_compilation_instructions():
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏"""
    print("\n" + "="*60)
    print("–ò–ù–°–¢–†–£–ö–¶–ò–ò –ü–û –ö–û–ú–ü–ò–õ–Ø–¶–ò–ò C++ –ú–û–î–£–õ–Ø")
    print("="*60)
    
    print("""
üîß –í–ê–†–ò–ê–ù–¢ 1: MinGW-w64 (–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)
1. –°–∫–∞—á–∞–π—Ç–µ MSYS2: https://www.msys2.org/
2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∫–æ–º–ø–∏–ª—è—Ç–æ—Ä:
   pacman -S mingw-w64-x86_64-gcc
3. –î–æ–±–∞–≤—å—Ç–µ –≤ PATH: C:\\msys64\\mingw64\\bin
4. –ö–æ–º–ø–∏–ª–∏—Ä—É–π—Ç–µ:
   g++ -shared -O3 performance_simple.cpp -o performance.dll

üîß –í–ê–†–ò–ê–ù–¢ 2: Visual Studio Build Tools
1. –°–∫–∞—á–∞–π—Ç–µ Build Tools: https://visualstudio.microsoft.com/downloads/
2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ C++ build tools
3. –û—Ç–∫—Ä–æ–π—Ç–µ Developer Command Prompt
4. –ö–æ–º–ø–∏–ª–∏—Ä—É–π—Ç–µ:
   cl /LD /O2 performance_simple.cpp /Fe:performance.dll

üîß –í–ê–†–ò–ê–ù–¢ 3: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–±–æ—Ä–∫–∞
   python build_modules.py

üìù –ü–†–ò–ú–ï–ß–ê–ù–ò–ï:
–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –±–µ–∑ C++ –º–æ–¥—É–ª—è, –∏—Å–ø–æ–ª—å–∑—É—è Python fallback.
C++ –º–æ–¥—É–ª—å –Ω—É–∂–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≥–∏–±—Ä–∏–¥–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã.
    """)

def main():
    print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï C++ –ú–û–î–£–õ–Ø –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å
    success = test_cpp_module()
    
    if not success:
        show_compilation_instructions()
    
    print("\n" + "="*60)
    print("–°–¢–ê–¢–£–° C++ –ú–û–î–£–õ–Ø")
    print("="*60)
    
    if success:
        print("‚úÖ C++ –º–æ–¥—É–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        print("üöÄ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –≤—ã—Å–æ–∫–æ–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã–µ C++ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è")
    else:
        print("‚ö†Ô∏è C++ –º–æ–¥—É–ª—å –Ω–µ —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω")
        print("üêç –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Python fallback (–ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)")
        print("üí° –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∫–æ–º–ø–∏–ª–∏—Ä—É–π—Ç–µ C++ –º–æ–¥—É–ª—å")

if __name__ == "__main__":
    main()
