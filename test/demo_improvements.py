"""
üöÄ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–∏–π Time Blocking –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è v6.0
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏ —É–ª—É—á—à–µ–Ω–∏—è
"""

import sys
import asyncio
from datetime import datetime, timedelta
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
from PyQt5.QtGui import *

# –ò–º–ø–æ—Ä—Ç—ã –Ω–∞—à–∏—Ö —É–ª—É—á—à–µ–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
from config_manager import get_config, ConfigManager
from cache_manager import get_cache_manager, cached
from async_notifications import (
    get_notification_manager, create_task_reminder, 
    create_break_suggestion, create_deadline_warning
)
from modern_ui_components import (
    ModernButton, ModernCard, ModernTaskItem, 
    ModernSearchBox, ModernTabWidget, ModernSidebar, ModernStatusBar
)

class ImprovementsDemo(QMainWindow):
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö —É–ª—É—á—à–µ–Ω–∏–π"""
    
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Time Blocking v6.0 - –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–∏–π")
        self.setGeometry(100, 100, 1400, 900)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        self.config = get_config()
        self.cache = get_cache_manager()
        self.notifications = get_notification_manager()
        
        self._setup_ui()
        self._setup_demo_data()
        self._connect_signals()
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—É—é —Ç–µ–º—É
        self._apply_modern_theme()
    
    def _setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π layout
        main_layout = QHBoxLayout(central_widget)
        main_layout.setContentsMargins(0, 0, 0, 0)
        main_layout.setSpacing(0)
        
        # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
        self.sidebar = ModernSidebar()
        self.sidebar.add_item("üè† –ì–ª–∞–≤–Ω–∞—è")
        self.sidebar.add_item("‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è")
        self.sidebar.add_item("üíæ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ")
        self.sidebar.add_item("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
        self.sidebar.add_item("üé® UI –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã")
        self.sidebar.add_item("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        main_layout.addWidget(self.sidebar)
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å
        self.content_area = QStackedWidget()
        main_layout.addWidget(self.content_area, 1)
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        self._create_home_page()
        self._create_config_page()
        self._create_cache_page()
        self._create_notifications_page()
        self._create_ui_components_page()
        self._create_statistics_page()
        
        # –°—Ç–∞—Ç—É—Å –±–∞—Ä
        self.status_bar = ModernStatusBar()
        self.setStatusBar(self.status_bar)
        
        # –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        self.sidebar.select_item("üè† –ì–ª–∞–≤–Ω–∞—è")
    
    def _create_home_page(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        page = QWidget()
        layout = QVBoxLayout(page)
        layout.setContentsMargins(30, 30, 30, 30)
        layout.setSpacing(20)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = QLabel("üöÄ Time Blocking v6.0 - –£–ª—É—á—à–µ–Ω–∏—è")
        title.setStyleSheet("""
            QLabel {
                font-size: 32px;
                font-weight: bold;
                color: #FF2B43;
                margin-bottom: 20px;
            }
        """)
        layout.addWidget(title)
        
        # –ö–∞—Ä—Ç–æ—á–∫–∏ —Å —É–ª—É—á—à–µ–Ω–∏—è–º–∏
        improvements_layout = QGridLayout()
        
        # –ö–∞—Ä—Ç–æ—á–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        config_card = ModernCard(
            "üîß –°–∏—Å—Ç–µ–º–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏",
            QLabel("–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏\n—Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        )
        improvements_layout.addWidget(config_card, 0, 0)
        
        # –ö–∞—Ä—Ç–æ—á–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
        cache_card = ModernCard(
            "üíæ –°–∏—Å—Ç–µ–º–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è",
            QLabel("–ú–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–æ–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è\n—É–ª—É—á—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
        )
        improvements_layout.addWidget(cache_card, 0, 1)
        
        # –ö–∞—Ä—Ç–æ—á–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        notifications_card = ModernCard(
            "üîî –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
            QLabel("–£–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n—Å –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–º–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞–º–∏")
        )
        improvements_layout.addWidget(notifications_card, 1, 0)
        
        # –ö–∞—Ä—Ç–æ—á–∫–∞ UI
        ui_card = ModernCard(
            "üé® –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π UI",
            QLabel("–ö—Ä–∞—Å–∏–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞\n—Å –∞–Ω–∏–º–∞—Ü–∏—è–º–∏ –∏ –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞–º–∏")
        )
        improvements_layout.addWidget(ui_card, 1, 1)
        
        layout.addLayout(improvements_layout)
        
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        demo_layout = QHBoxLayout()
        
        demo_config_btn = ModernButton("–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é", color="#4CAF50")
        demo_config_btn.clicked.connect(lambda: self._show_config_demo())
        demo_layout.addWidget(demo_config_btn)
        
        demo_cache_btn = ModernButton("–¢–µ—Å—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è", color="#2196F3")
        demo_cache_btn.clicked.connect(lambda: self._show_cache_demo())
        demo_layout.addWidget(demo_cache_btn)
        
        demo_notifications_btn = ModernButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", color="#FF9800")
        demo_notifications_btn.clicked.connect(lambda: self._show_notifications_demo())
        demo_layout.addWidget(demo_notifications_btn)
        
        layout.addLayout(demo_layout)
        layout.addStretch()
        
        self.content_area.addWidget(page)
    
    def _create_config_page(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        page = QWidget()
        layout = QVBoxLayout(page)
        layout.setContentsMargins(30, 30, 30, 30)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = QLabel("‚öôÔ∏è –°–∏—Å—Ç–µ–º–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
        title.setStyleSheet("font-size: 24px; font-weight: bold; color: #333;")
        layout.addWidget(title)
        
        # –¢–µ–∫—É—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        config_text = QTextEdit()
        config_text.setReadOnly(True)
        config_text.setPlainText(self._get_config_info())
        layout.addWidget(config_text)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        buttons_layout = QHBoxLayout()
        
        reload_btn = ModernButton("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å", color="#4CAF50")
        reload_btn.clicked.connect(self._reload_config)
        buttons_layout.addWidget(reload_btn)
        
        save_btn = ModernButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å", color="#2196F3")
        save_btn.clicked.connect(self._save_config)
        buttons_layout.addWidget(save_btn)
        
        layout.addLayout(buttons_layout)
        
        self.content_area.addWidget(page)
    
    def _create_cache_page(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è"""
        page = QWidget()
        layout = QVBoxLayout(page)
        layout.setContentsMargins(30, 30, 30, 30)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = QLabel("üíæ –°–∏—Å—Ç–µ–º–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è")
        title.setStyleSheet("font-size: 24px; font-weight: bold; color: #333;")
        layout.addWidget(title)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞
        self.cache_stats_text = QTextEdit()
        self.cache_stats_text.setReadOnly(True)
        self._update_cache_stats()
        layout.addWidget(self.cache_stats_text)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        buttons_layout = QHBoxLayout()
        
        test_btn = ModernButton("üß™ –¢–µ—Å—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è", color="#4CAF50")
        test_btn.clicked.connect(self._test_caching)
        buttons_layout.addWidget(test_btn)
        
        clear_btn = ModernButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫—ç—à", color="#F44336")
        clear_btn.clicked.connect(self._clear_cache)
        buttons_layout.addWidget(clear_btn)
        
        refresh_btn = ModernButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", color="#2196F3")
        refresh_btn.clicked.connect(self._update_cache_stats)
        buttons_layout.addWidget(refresh_btn)
        
        layout.addLayout(buttons_layout)
        
        self.content_area.addWidget(page)
    
    def _create_notifications_page(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        page = QWidget()
        layout = QVBoxLayout(page)
        layout.setContentsMargins(30, 30, 30, 30)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = QLabel("üîî –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        title.setStyleSheet("font-size: 24px; font-weight: bold; color: #333;")
        layout.addWidget(title)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        self.notifications_stats_text = QTextEdit()
        self.notifications_stats_text.setReadOnly(True)
        self._update_notifications_stats()
        layout.addWidget(self.notifications_stats_text)
        
        # –ö–Ω–æ–ø–∫–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        buttons_layout = QGridLayout()
        
        reminder_btn = ModernButton("üìÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–¥–∞—á–µ", color="#4CAF50")
        reminder_btn.clicked.connect(self._send_task_reminder)
        buttons_layout.addWidget(reminder_btn, 0, 0)
        
        break_btn = ModernButton("‚òï –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–µ—Ä–µ—Ä—ã–≤–∞", color="#FF9800")
        break_btn.clicked.connect(self._send_break_suggestion)
        buttons_layout.addWidget(break_btn, 0, 1)
        
        deadline_btn = ModernButton("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –¥–µ–¥–ª–∞–π–Ω–µ", color="#F44336")
        deadline_btn.clicked.connect(self._send_deadline_warning)
        buttons_layout.addWidget(deadline_btn, 1, 0)
        
        stats_btn = ModernButton("üìä –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", color="#2196F3")
        stats_btn.clicked.connect(self._update_notifications_stats)
        buttons_layout.addWidget(stats_btn, 1, 1)
        
        layout.addLayout(buttons_layout)
        
        self.content_area.addWidget(page)
    
    def _create_ui_components_page(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
        page = QWidget()
        layout = QVBoxLayout(page)
        layout.setContentsMargins(30, 30, 30, 30)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = QLabel("üé® –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã")
        title.setStyleSheet("font-size: 24px; font-weight: bold; color: #333;")
        layout.addWidget(title)
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        demo_layout = QGridLayout()
        
        # –ö–Ω–æ–ø–∫–∏
        buttons_card = ModernCard("–ö–Ω–æ–ø–∫–∏")
        buttons_layout = QVBoxLayout()
        buttons_layout.addWidget(ModernButton("–û–±—ã—á–Ω–∞—è –∫–Ω–æ–ø–∫–∞"))
        buttons_layout.addWidget(ModernButton("–£—Å–ø–µ—Ö", color="#4CAF50"))
        buttons_layout.addWidget(ModernButton("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", color="#FF9800"))
        buttons_layout.addWidget(ModernButton("–û—à–∏–±–∫–∞", color="#F44336"))
        buttons_card.layout().addLayout(buttons_layout)
        demo_layout.addWidget(buttons_card, 0, 0)
        
        # –ü–æ–∏—Å–∫
        search_card = ModernCard("–ü–æ–∏—Å–∫")
        search_layout = QVBoxLayout()
        search_layout.addWidget(ModernSearchBox("–ü–æ–∏—Å–∫ –∑–∞–¥–∞—á..."))
        search_layout.addWidget(ModernSearchBox("–ü–æ–∏—Å–∫ –ø—Ä–æ–µ–∫—Ç–æ–≤..."))
        search_card.layout().addLayout(search_layout)
        demo_layout.addWidget(search_card, 0, 1)
        
        # –ó–∞–¥–∞—á–∏
        tasks_card = ModernCard("–≠–ª–µ–º–µ–Ω—Ç—ã –∑–∞–¥–∞—á")
        tasks_layout = QVBoxLayout()
        
        sample_tasks = [
            {"id": "1", "title": "–ó–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ–µ–∫—Ç", "priority": "–í—ã—Å–æ–∫–∏–π", "duration": 120, "progress": 75},
            {"id": "2", "title": "–í—Å—Ç—Ä–µ—á–∞ —Å –∫–æ–º–∞–Ω–¥–æ–π", "priority": "–°—Ä–µ–¥–Ω–∏–π", "duration": 60, "progress": 0},
            {"id": "3", "title": "–ö–æ–¥-—Ä–µ–≤—å—é", "priority": "–ù–∏–∑–∫–∏–π", "duration": 30, "progress": 100, "status": "completed"}
        ]
        
        for task_data in sample_tasks:
            task_item = ModernTaskItem(task_data)
            tasks_layout.addWidget(task_item)
        
        tasks_card.layout().addLayout(tasks_layout)
        demo_layout.addWidget(tasks_card, 1, 0, 1, 2)
        
        layout.addLayout(demo_layout)
        
        self.content_area.addWidget(page)
    
    def _create_statistics_page(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        page = QWidget()
        layout = QVBoxLayout(page)
        layout.setContentsMargins(30, 30, 30, 30)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = QLabel("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã")
        title.setStyleSheet("font-size: 24px; font-weight: bold; color: #333;")
        layout.addWidget(title)
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.system_stats_text = QTextEdit()
        self.system_stats_text.setReadOnly(True)
        self._update_system_stats()
        layout.addWidget(self.system_stats_text)
        
        # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        refresh_btn = ModernButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", color="#2196F3")
        refresh_btn.clicked.connect(self._update_system_stats)
        layout.addWidget(refresh_btn)
        
        self.content_area.addWidget(page)
    
    def _setup_demo_data(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –∫—ç—à
        self.cache.set("demo_data", {"message": "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –∫—ç—à–µ"})
        self.cache.set("user_preferences", {"theme": "dark", "language": "ru"})
    
    def _connect_signals(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤"""
        self.sidebar.item_clicked.connect(self._on_sidebar_item_clicked)
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        self.notifications.notification_sent.connect(self._on_notification_sent)
        self.notifications.notification_failed.connect(self._on_notification_failed)
    
    def _apply_modern_theme(self):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ç–µ–º—ã"""
        self.setStyleSheet("""
            QMainWindow {
                background-color: #F5F5F5;
            }
            QWidget {
                font-family: 'Segoe UI', Arial, sans-serif;
            }
        """)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    
    def _on_sidebar_item_clicked(self, item_name: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏"""
        index_map = {
            "üè† –ì–ª–∞–≤–Ω–∞—è": 0,
            "‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è": 1,
            "üíæ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ": 2,
            "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è": 3,
            "üé® UI –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã": 4,
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞": 5
        }
        
        if item_name in index_map:
            self.content_area.setCurrentIndex(index_map[item_name])
            self.status_bar.status_label.setText(f"–û—Ç–∫—Ä—ã—Ç–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞: {item_name}")
    
    def _on_notification_sent(self, notification_id: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        self.status_bar.status_label.setText(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {notification_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    
    def _on_notification_failed(self, notification_id: str, error: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        self.status_bar.status_label.setText(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {notification_id}: {error}")
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    
    def _show_config_demo(self):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        config_info = f"""
–¢–µ–∫—É—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:
- –Ø–∑—ã–∫: {self.config.ui.language}
- –¢–µ–º–∞: {self.config.ui.theme}
- –ê–Ω–∏–º–∞—Ü–∏–∏: {self.config.ui.animations_enabled}
- –ò–ò –ø—Ä–æ–≤–∞–π–¥–µ—Ä: {self.config.ai.provider}
- –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ: {self.config.data.cache_enabled}
        """
        QMessageBox.information(self, "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", config_info.strip())
    
    def _show_cache_demo(self):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è"""
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫—ç—à
        import time
        start_time = time.time()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        test_data = {"timestamp": datetime.now().isoformat(), "data": list(range(1000))}
        self.cache.set("performance_test", test_data)
        
        # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        cached_data = self.cache.get("performance_test")
        
        end_time = time.time()
        
        result = f"""
–¢–µ—Å—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω:
- –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {(end_time - start_time) * 1000:.2f} –º—Å
- –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {len(test_data['data'])} —ç–ª–µ–º–µ–Ω—Ç–æ–≤
- –î–∞–Ω–Ω—ã–µ –ø—Ä–æ—á–∏—Ç–∞–Ω—ã: {'–£—Å–ø–µ—à–Ω–æ' if cached_data else '–û—à–∏–±–∫–∞'}
        """
        QMessageBox.information(self, "–¢–µ—Å—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è", result.strip())
    
    def _show_notifications_demo(self):
        """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        notification = create_task_reminder(
            "demo_task",
            "–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞",
            datetime.now()
        )
        self.notifications.send_notification_sync(notification)
    
    # –ú–µ—Ç–æ–¥—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    
    def _get_config_info(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        return f"""
–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Time Blocking v6.0

UI –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:
- –Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: {self.config.ui.language}
- –¢–µ–º–∞: {self.config.ui.theme}
- –ê–Ω–∏–º–∞—Ü–∏–∏ –≤–∫–ª—é—á–µ–Ω—ã: {self.config.ui.animations_enabled}
- –†–∞–∑–º–µ—Ä –æ–∫–Ω–∞: {self.config.ui.window_width}x{self.config.ui.window_height}
- –ò–Ω—Ç–µ—Ä–≤–∞–ª –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {self.config.ui.auto_save_interval} —Å–µ–∫
- –†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞: {self.config.ui.font_size}
- –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {self.config.ui.show_notifications}

–ò–ò –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:
- –ü—Ä–æ–≤–∞–π–¥–µ—Ä: {self.config.ai.provider}
- –ú–æ–¥–µ–ª—å: {self.config.ai.model}
- –ú–∞–∫—Å–∏–º—É–º —Ç–æ–∫–µ–Ω–æ–≤: {self.config.ai.max_tokens}
- –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {self.config.ai.temperature}
- –û—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º: {self.config.ai.offline_mode}
- –ú–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫: {self.config.ai.max_retries}

–î–∞–Ω–Ω—ã–µ:
- –†–µ–∑–µ—Ä–≤–Ω–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ: {self.config.data.backup_enabled}
- –ò–Ω—Ç–µ—Ä–≤–∞–ª —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è: {self.config.data.backup_interval_hours} —á
- –û–±–ª–∞—á–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è: {self.config.data.cloud_sync}
- –§–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞: {self.config.data.export_format}
- –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö: {self.config.data.data_retention_days} –¥–Ω–µ–π
- –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ: {self.config.data.cache_enabled}
- –†–∞–∑–º–µ—Ä –∫—ç—à–∞: {self.config.data.cache_size_mb} –ú–ë

–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:
- –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏: {self.config.performance.async_operations}
- –ú–∞–∫—Å–∏–º—É–º –∑–∞–¥–∞—á: {self.config.performance.max_concurrent_tasks}
- –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI: {self.config.performance.ui_update_interval_ms} –º—Å
- –ò–Ω—Ç–µ—Ä–≤–∞–ª –∞–Ω–∞–ª–∏—Ç–∏–∫–∏: {self.config.performance.analytics_update_interval_ms} –º—Å
- –õ–µ–Ω–∏–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞: {self.config.performance.lazy_loading}
- –õ–∏–º–∏—Ç –ø–∞–º—è—Ç–∏: {self.config.performance.memory_limit_mb} –ú–ë

–û—Ç–ª–∞–¥–∫–∞:
- –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏: {self.config.debug_mode}
- –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {self.config.log_level}
        """
    
    def _reload_config(self):
        """–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        self.config = get_config()
        self.status_bar.status_label.setText("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–∞")
    
    def _save_config(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        from config_manager import save_config
        if save_config():
            self.status_bar.status_label.setText("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")
        else:
            self.status_bar.status_label.setText("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    
    def _update_cache_stats(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫—ç—à–∞"""
        stats = self.cache.get_stats()
        
        stats_text = f"""
–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è:

–ö—ç—à –≤ –ø–∞–º—è—Ç–∏:
- –†–∞–∑–º–µ—Ä: {stats['memory_cache']['size']} / {stats['memory_cache']['max_size']} —ç–ª–µ–º–µ–Ω—Ç–æ–≤
- –ü–æ–ø–∞–¥–∞–Ω–∏—è: {stats['memory_cache']['hits']}
- –ü—Ä–æ–º–∞—Ö–∏: {stats['memory_cache']['misses']}
- –í—ã—Ç–µ—Å–Ω–µ–Ω–∏—è: {stats['memory_cache']['evictions']}
- –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–ø–∞–¥–∞–Ω–∏–π: {stats['memory_cache']['hit_rate']:.1f}%

–§–∞–π–ª–æ–≤—ã–π –∫—ç—à:
- –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {stats['file_cache_dir']}
- –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {stats['file_cache_size_mb']:.1f} –ú–ë

–û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}
        """
        
        self.cache_stats_text.setPlainText(stats_text.strip())
    
    def _test_caching(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è"""
        self.status_bar.show_progress("–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—ç—à–∞...")
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º —Ç—è–∂–µ–ª—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
        QTimer.singleShot(1000, self._complete_cache_test)
    
    def _complete_cache_test(self):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è"""
        import time
        
        # –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        start_time = time.time()
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º 100 —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        for i in range(100):
            self.cache.set(f"test_key_{i}", f"test_value_{i}")
        
        # –ß–∏—Ç–∞–µ–º 100 —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        for i in range(100):
            self.cache.get(f"test_key_{i}")
        
        end_time = time.time()
        
        self.status_bar.hide_progress()
        self.status_bar.status_label.setText(
            f"–¢–µ—Å—Ç –∫—ç—à–∞ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {(end_time - start_time) * 1000:.1f} –º—Å"
        )
        
        self._update_cache_stats()
    
    def _clear_cache(self):
        """–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞"""
        self.cache.clear()
        self.status_bar.status_label.setText("–ö—ç—à –æ—á–∏—â–µ–Ω")
        self._update_cache_stats()
    
    def _update_notifications_stats(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        stats = self.notifications.get_statistics()
        
        stats_text = f"""
–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:

–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:
- –í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {stats.get('total', 0)}
- –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ: {stats.get('delivered', 0)}
- –ü—Ä–æ—Ü–µ–Ω—Ç –¥–æ—Å—Ç–∞–≤–∫–∏: {stats.get('delivery_rate', 0):.1f}%
- –í –æ—á–µ—Ä–µ–¥–∏: {stats.get('queue_size', 0)}
- –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: {stats.get('scheduled_count', 0)}

–ü–æ —Ç–∏–ø–∞–º:
"""
        
        for type_name, count in stats.get('by_type', {}).items():
            stats_text += f"- {type_name}: {count}\n"
        
        stats_text += "\n–ü–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º:\n"
        for priority, count in stats.get('by_priority', {}).items():
            stats_text += f"- {priority}: {count}\n"
        
        stats_text += f"\n–û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}"
        
        self.notifications_stats_text.setPlainText(stats_text.strip())
    
    def _send_task_reminder(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∑–∞–¥–∞—á–µ"""
        notification = create_task_reminder(
            "demo_task_1",
            "–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é —É–ª—É—á—à–µ–Ω–∏–π",
            datetime.now()
        )
        self.notifications.send_notification_sync(notification)
    
    def _send_break_suggestion(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–µ—Ä–µ—Ä—ã–≤–∞"""
        notification = create_break_suggestion(90)  # 90 –º–∏–Ω—É—Ç —Ä–∞–±–æ—Ç—ã
        self.notifications.send_notification_sync(notification)
    
    def _send_deadline_warning(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –¥–µ–¥–ª–∞–π–Ω–µ"""
        notification = create_deadline_warning("–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç", 2)  # 2 —á–∞—Å–∞ –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞
        self.notifications.send_notification_sync(notification)
    
    def _update_system_stats(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        import psutil
        import platform
        
        # –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        cpu_percent = psutil.cpu_percent(interval=1)
        memory = psutil.virtual_memory()
        disk = psutil.disk_usage('/')
        
        stats_text = f"""
–°–∏—Å—Ç–µ–º–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Time Blocking v6.0:

–°–∏—Å—Ç–µ–º–∞:
- –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: {platform.system()} {platform.release()}
- –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: {platform.machine()}
- Python: {platform.python_version()}

–†–µ—Å—É—Ä—Å—ã:
- CPU: {cpu_percent}%
- –ü–∞–º—è—Ç—å: {memory.percent}% ({memory.used // (1024**3):.1f} / {memory.total // (1024**3):.1f} –ì–ë)
- –î–∏—Å–∫: {disk.percent}% ({disk.used // (1024**3):.1f} / {disk.total // (1024**3):.1f} –ì–ë)

–ö—ç—à:
- –≠–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –ø–∞–º—è—Ç–∏: {self.cache.get_stats()['memory_cache']['size']}
- –ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–ø–∞–¥–∞–Ω–∏–π: {self.cache.get_stats()['memory_cache']['hit_rate']:.1f}%

–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:
- –í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {self.notifications.get_statistics().get('total', 0)}
- –í –æ—á–µ—Ä–µ–¥–∏: {self.notifications.get_statistics().get('queue_size', 0)}

–û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}
        """
        
        self.system_stats_text.setPlainText(stats_text.strip())

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    app = QApplication(sys.argv)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∫–æ–Ω–∫—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app.setWindowIcon(app.style().standardIcon(QStyle.SP_ComputerIcon))
    
    # –°–æ–∑–¥–∞–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–∫–Ω–æ
    window = ImprovementsDemo()
    window.show()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    sys.exit(app.exec_())

if __name__ == "__main__":
    main()
