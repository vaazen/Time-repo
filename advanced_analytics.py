# advanced_analytics.py - –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ —Å —Ç–µ–ø–ª–æ–≤—ã–º–∏ –∫–∞—Ä—Ç–∞–º–∏
import json
import os
from datetime import datetime, timedelta, date
from typing import Dict, List, Tuple, Optional
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.figure import Figure
import seaborn as sns
from PyQt5.QtWidgets import (QWidget, QVBoxLayout, QHBoxLayout, QLabel, 
                             QComboBox, QPushButton, QScrollArea, QFrame,
                             QGridLayout, QTabWidget, QTextEdit, QProgressBar)
from PyQt5.QtCore import Qt, QTimer, pyqtSignal
from PyQt5.QtGui import QFont, QPalette, QColor
import pandas as pd

class ProductivityHeatmap(QWidget):
    """–í–∏–¥–∂–µ—Ç —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setMinimumSize(800, 400)
        self.setup_ui()
        self.load_data()
    
    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        layout = QVBoxLayout()
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –∫–æ–Ω—Ç—Ä–æ–ª—ã
        header_layout = QHBoxLayout()
        
        self.title_label = QLabel("üî• –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
        self.title_label.setStyleSheet("""
            font-size: 18px; 
            font-weight: bold; 
            color: #FF2B43;
            margin: 10px;
        """)
        
        self.period_combo = QComboBox()
        self.period_combo.addItems(["–ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π", "–ü–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü", 
                                   "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –º–µ—Å—è—Ü–∞", "–í–µ—Å—å –≥–æ–¥"])
        self.period_combo.currentTextChanged.connect(self.update_heatmap)
        
        self.refresh_btn = QPushButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å")
        self.refresh_btn.clicked.connect(self.refresh_data)
        
        header_layout.addWidget(self.title_label)
        header_layout.addStretch()
        header_layout.addWidget(QLabel("–ü–µ—Ä–∏–æ–¥:"))
        header_layout.addWidget(self.period_combo)
        header_layout.addWidget(self.refresh_btn)
        
        layout.addLayout(header_layout)
        
        # Matplotlib canvas –¥–ª—è —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã
        self.figure = Figure(figsize=(12, 6), facecolor='#2b2b2b')
        self.canvas = FigureCanvas(self.figure)
        layout.addWidget(self.canvas)
        
        self.setLayout(layout)
    
    def load_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ task_manager
        self.productivity_data = self.generate_sample_data()
        self.update_heatmap()
    
    def generate_sample_data(self) -> Dict:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
        data = {}
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 90 –¥–Ω–µ–π
        end_date = datetime.now().date()
        start_date = end_date - timedelta(days=90)
        
        current_date = start_date
        while current_date <= end_date:
            # –ò–º–∏—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            weekday = current_date.weekday()
            
            # –ë—É–¥–Ω–∏–µ –¥–Ω–∏ –±–æ–ª–µ–µ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã
            if weekday < 5:  # –ü–Ω-–ü—Ç
                base_productivity = np.random.normal(0.7, 0.2)
            else:  # –í—ã—Ö–æ–¥–Ω—ã–µ
                base_productivity = np.random.normal(0.4, 0.15)
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –æ—Ç 0 –¥–æ 1
            productivity = max(0, min(1, base_productivity))
            
            data[current_date.isoformat()] = {
                'productivity_score': productivity,
                'completed_tasks': int(productivity * 10),
                'total_focus_time': productivity * 8 * 60,  # –≤ –º–∏–Ω—É—Ç–∞—Ö
                'breaks_taken': int(productivity * 5),
                'efficiency_rating': productivity
            }
            
            current_date += timedelta(days=1)
        
        return data
    
    def update_heatmap(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã"""
        self.figure.clear()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
        period = self.period_combo.currentText()
        filtered_data = self.filter_data_by_period(period)
        
        if not filtered_data:
            return
        
        # –°–æ–∑–¥–∞–µ–º subplot
        ax = self.figure.add_subplot(111)
        ax.set_facecolor('#2b2b2b')
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã
        dates = list(filtered_data.keys())
        dates.sort()
        
        # –°–æ–∑–¥–∞–µ–º –º–∞—Ç—Ä–∏—Ü—É –¥–ª—è —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã (7 –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ x –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–¥–µ–ª—å)
        weeks_data = self.prepare_weekly_matrix(dates, filtered_data)
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ–ø–ª–æ–≤—É—é –∫–∞—Ä—Ç—É
        im = ax.imshow(weeks_data, cmap='RdYlGn', aspect='auto', vmin=0, vmax=1)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–µ–π
        ax.set_yticks(range(7))
        ax.set_yticklabels(['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å'])
        
        # –ü–æ–¥–ø–∏—Å–∏ –Ω–µ–¥–µ–ª—å
        week_labels = self.generate_week_labels(dates)
        ax.set_xticks(range(len(week_labels)))
        ax.set_xticklabels(week_labels, rotation=45)
        
        # –¶–≤–µ—Ç–æ–≤–∞—è —à–∫–∞–ª–∞
        cbar = self.figure.colorbar(im, ax=ax)
        cbar.set_label('–£—Ä–æ–≤–µ–Ω—å –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏', color='white')
        cbar.ax.yaxis.set_tick_params(color='white')
        
        # –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è
        ax.set_title('–¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏', color='white', fontsize=14, pad=20)
        ax.tick_params(colors='white')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ —è—á–µ–π–∫–∏
        self.add_cell_values(ax, weeks_data)
        
        self.figure.tight_layout()
        self.canvas.draw()
    
    def prepare_weekly_matrix(self, dates: List[str], data: Dict) -> np.ndarray:
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –º–∞—Ç—Ä–∏—Ü—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ –Ω–µ–¥–µ–ª—è–º"""
        if not dates:
            return np.zeros((7, 1))
        
        start_date = datetime.fromisoformat(dates[0]).date()
        end_date = datetime.fromisoformat(dates[-1]).date()
        
        # –ù–∞—Ö–æ–¥–∏–º –Ω–∞—á–∞–ª–æ –Ω–µ–¥–µ–ª–∏ (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫)
        start_monday = start_date - timedelta(days=start_date.weekday())
        
        # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–¥–µ–ª—å
        total_days = (end_date - start_monday).days + 1
        weeks_count = (total_days + 6) // 7
        
        # –°–æ–∑–¥–∞–µ–º –º–∞—Ç—Ä–∏—Ü—É 7x weeks_count
        matrix = np.zeros((7, weeks_count))
        
        current_date = start_monday
        for week in range(weeks_count):
            for day in range(7):
                date_str = current_date.isoformat()
                if date_str in data:
                    matrix[day, week] = data[date_str]['productivity_score']
                current_date += timedelta(days=1)
        
        return matrix
    
    def generate_week_labels(self, dates: List[str]) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–µ–π –¥–ª—è –Ω–µ–¥–µ–ª—å"""
        if not dates:
            return []
        
        start_date = datetime.fromisoformat(dates[0]).date()
        end_date = datetime.fromisoformat(dates[-1]).date()
        
        start_monday = start_date - timedelta(days=start_date.weekday())
        
        labels = []
        current_monday = start_monday
        
        while current_monday <= end_date:
            labels.append(current_monday.strftime("%d.%m"))
            current_monday += timedelta(days=7)
        
        return labels
    
    def add_cell_values(self, ax, matrix: np.ndarray):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –≤ —è—á–µ–π–∫–∏ —Ç–µ–ø–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã"""
        rows, cols = matrix.shape
        for i in range(rows):
            for j in range(cols):
                if matrix[i, j] > 0:
                    text = ax.text(j, i, f'{matrix[i, j]:.1f}',
                                 ha="center", va="center", 
                                 color="white" if matrix[i, j] < 0.5 else "black",
                                 fontsize=8, fontweight='bold')
    
    def filter_data_by_period(self, period: str) -> Dict:
        """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –ø–µ—Ä–∏–æ–¥—É"""
        end_date = datetime.now().date()
        
        if period == "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π":
            start_date = end_date - timedelta(days=7)
        elif period == "–ü–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü":
            start_date = end_date - timedelta(days=30)
        elif period == "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –º–µ—Å—è—Ü–∞":
            start_date = end_date - timedelta(days=90)
        else:  # –í–µ—Å—å –≥–æ–¥
            start_date = end_date - timedelta(days=365)
        
        filtered = {}
        for date_str, data in self.productivity_data.items():
            date_obj = datetime.fromisoformat(date_str).date()
            if start_date <= date_obj <= end_date:
                filtered[date_str] = data
        
        return filtered
    
    def refresh_data(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"""
        self.load_data()

class ProductivityTrends(QWidget):
    """–í–∏–¥–∂–µ—Ç —Ç—Ä–µ–Ω–¥–æ–≤ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setup_ui()
        self.load_data()
    
    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        layout = QVBoxLayout()
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = QLabel("üìà –¢—Ä–µ–Ω–¥—ã –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
        title.setStyleSheet("font-size: 16px; font-weight: bold; color: #FF2B43; margin: 10px;")
        layout.addWidget(title)
        
        # Matplotlib canvas –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
        self.figure = Figure(figsize=(12, 8), facecolor='#2b2b2b')
        self.canvas = FigureCanvas(self.figure)
        layout.addWidget(self.canvas)
        
        self.setLayout(layout)
    
    def load_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"""
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–º–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        self.generate_trends_data()
        self.plot_trends()
    
    def generate_trends_data(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–Ω–¥–æ–≤"""
        # –î–∞–Ω–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
        dates = []
        productivity_scores = []
        focus_times = []
        completed_tasks = []
        
        for i in range(30):
            date = datetime.now().date() - timedelta(days=29-i)
            dates.append(date)
            
            # –ò–º–∏—Ç–∏—Ä—É–µ–º —Ç—Ä–µ–Ω–¥—ã
            base_trend = 0.6 + 0.3 * np.sin(i * 0.2)  # –í–æ–ª–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–π —Ç—Ä–µ–Ω–¥
            noise = np.random.normal(0, 0.1)
            
            productivity = max(0, min(1, base_trend + noise))
            productivity_scores.append(productivity)
            
            focus_times.append(productivity * 8)  # —á–∞—Å—ã —Ñ–æ–∫—É—Å–∞
            completed_tasks.append(int(productivity * 12))
        
        self.trends_data = {
            'dates': dates,
            'productivity_scores': productivity_scores,
            'focus_times': focus_times,
            'completed_tasks': completed_tasks
        }
    
    def plot_trends(self):
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤ —Ç—Ä–µ–Ω–¥–æ–≤"""
        self.figure.clear()
        
        # –°–æ–∑–¥–∞–µ–º 3 subplot'–∞
        ax1 = self.figure.add_subplot(3, 1, 1)
        ax2 = self.figure.add_subplot(3, 1, 2)
        ax3 = self.figure.add_subplot(3, 1, 3)
        
        dates = self.trends_data['dates']
        
        # –ì—Ä–∞—Ñ–∏–∫ 1: –û–±—â–∞—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        ax1.plot(dates, self.trends_data['productivity_scores'], 
                color='#FF2B43', linewidth=2, marker='o', markersize=4)
        ax1.set_title('–û–±—â–∏–π —É—Ä–æ–≤–µ–Ω—å –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏', color='white', fontsize=12)
        ax1.set_ylabel('–ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å', color='white')
        ax1.grid(True, alpha=0.3)
        ax1.set_facecolor('#2b2b2b')
        
        # –ì—Ä–∞—Ñ–∏–∫ 2: –í—Ä–µ–º—è —Ñ–æ–∫—É—Å–∞
        ax2.bar(dates, self.trends_data['focus_times'], 
               color='#FFC107', alpha=0.7, width=0.8)
        ax2.set_title('–í—Ä–µ–º—è –≥–ª—É–±–æ–∫–æ–π —Ä–∞–±–æ—Ç—ã (—á–∞—Å—ã)', color='white', fontsize=12)
        ax2.set_ylabel('–ß–∞—Å—ã', color='white')
        ax2.grid(True, alpha=0.3)
        ax2.set_facecolor('#2b2b2b')
        
        # –ì—Ä–∞—Ñ–∏–∫ 3: –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        ax3.plot(dates, self.trends_data['completed_tasks'], 
                color='#4CAF50', linewidth=2, marker='s', markersize=4)
        ax3.set_title('–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏', color='white', fontsize=12)
        ax3.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', color='white')
        ax3.set_xlabel('–î–∞—Ç–∞', color='white')
        ax3.grid(True, alpha=0.3)
        ax3.set_facecolor('#2b2b2b')
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–µ–π –¥–ª—è –≤—Å–µ—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤
        for ax in [ax1, ax2, ax3]:
            ax.tick_params(colors='white')
            ax.xaxis.set_major_formatter(mdates.DateFormatter('%d.%m'))
            ax.xaxis.set_major_locator(mdates.DayLocator(interval=5))
            plt.setp(ax.xaxis.get_majorticklabels(), rotation=45)
        
        self.figure.tight_layout()
        self.canvas.draw()

class ProductivityInsights(QWidget):
    """–í–∏–¥–∂–µ—Ç –∏–Ω—Å–∞–π—Ç–æ–≤ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setup_ui()
        self.generate_insights()
    
    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        layout = QVBoxLayout()
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = QLabel("üí° –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã")
        title.setStyleSheet("font-size: 16px; font-weight: bold; color: #FF2B43; margin: 10px;")
        layout.addWidget(title)
        
        # –°–∫—Ä–æ–ª–ª–∏—Ä—É–µ–º–∞—è –æ–±–ª–∞—Å—Ç—å –¥–ª—è –∏–Ω—Å–∞–π—Ç–æ–≤
        scroll = QScrollArea()
        scroll.setWidgetResizable(True)
        scroll.setStyleSheet("border: none; background: transparent;")
        
        self.insights_widget = QWidget()
        self.insights_layout = QVBoxLayout(self.insights_widget)
        
        scroll.setWidget(self.insights_widget)
        layout.addWidget(scroll)
        
        self.setLayout(layout)
    
    def generate_insights(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –∏–Ω—Å–∞–π—Ç–æ–≤"""
        insights = [
            {
                "title": "üïò –í–∞—à –ø–∏–∫ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
                "content": "–ê–Ω–∞–ª–∏–∑ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ –≤—ã –Ω–∞–∏–±–æ–ª–µ–µ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã —Å 9:00 –¥–æ 11:00. –ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ —Å–ª–æ–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏ –Ω–∞ —ç—Ç–æ –≤—Ä–µ–º—è.",
                "type": "peak_time",
                "color": "#4CAF50"
            },
            {
                "title": "üìÖ –õ—É—á—à–∏–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏",
                "content": "–í—Ç–æ—Ä–Ω–∏–∫ - –≤–∞—à —Å–∞–º—ã–π –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–π –¥–µ–Ω—å. –°—Ä–µ–¥–Ω—è—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: 87%",
                "type": "best_day",
                "color": "#2196F3"
            },
            {
                "title": "‚ö†Ô∏è –ó–æ–Ω–∞ —Ä–∏—Å–∫–∞",
                "content": "–ü–æ—Å–ª–µ 15:00 –≤–∞—à–∞ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–Ω–∏–∂–∞–µ—Ç—Å—è –Ω–∞ 35%. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –¥–µ–ª–∞—Ç—å –ø–µ—Ä–µ—Ä—ã–≤ –≤ 14:30.",
                "type": "warning",
                "color": "#FF9800"
            },
            {
                "title": "üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è",
                "content": "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ç–µ—Ö–Ω–∏–∫—É –ü–æ–º–æ–¥–æ—Ä–æ: 25 –º–∏–Ω—É—Ç —Ä–∞–±–æ—Ç—ã + 5 –º–∏–Ω—É—Ç –ø–µ—Ä–µ—Ä—ã–≤–∞. –≠—Ç–æ –º–æ–∂–µ—Ç –ø–æ–≤—ã—Å–∏—Ç—å –≤–∞—à—É —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–∞ 23%.",
                "type": "recommendation",
                "color": "#9C27B0"
            },
            {
                "title": "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–µ–ª–∏",
                "content": "–ó–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é –≤—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ 47 –∑–∞–¥–∞—á (+12% –∫ –ø—Ä–æ—à–ª–æ–π –Ω–µ–¥–µ–ª–µ) –∏ –ø–æ—Ç—Ä–∞—Ç–∏–ª–∏ 28 —á–∞—Å–æ–≤ –Ω–∞ –≥–ª—É–±–æ–∫—É—é —Ä–∞–±–æ—Ç—É.",
                "type": "stats",
                "color": "#607D8B"
            },
            {
                "title": "üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ",
                "content": "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç–µ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤—ã—à–µ 80% —É–∂–µ 5 –¥–Ω–µ–π –ø–æ–¥—Ä—è–¥!",
                "type": "achievement",
                "color": "#FF2B43"
            }
        ]
        
        for insight in insights:
            self.add_insight_card(insight)
    
    def add_insight_card(self, insight: Dict):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ –∏–Ω—Å–∞–π—Ç–∞"""
        card = QFrame()
        card.setFrameStyle(QFrame.Box)
        card.setStyleSheet(f"""
            QFrame {{
                background: qlineargradient(x1:0, y1:0, x2:1, y2:1,
                    stop:0 {insight['color']}22, stop:1 {insight['color']}11);
                border: 2px solid {insight['color']};
                border-radius: 10px;
                padding: 15px;
                margin: 5px;
            }}
        """)
        
        layout = QVBoxLayout(card)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = QLabel(insight['title'])
        title_label.setStyleSheet(f"""
            font-size: 14px; 
            font-weight: bold; 
            color: {insight['color']};
            margin-bottom: 5px;
        """)
        
        # –°–æ–¥–µ—Ä–∂–∏–º–æ–µ
        content_label = QLabel(insight['content'])
        content_label.setStyleSheet("color: white; font-size: 12px; line-height: 1.4;")
        content_label.setWordWrap(True)
        
        layout.addWidget(title_label)
        layout.addWidget(content_label)
        
        self.insights_layout.addWidget(card)

class AdvancedAnalyticsWidget(QTabWidget):
    """–ì–ª–∞–≤–Ω—ã–π –≤–∏–¥–∂–µ—Ç –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setup_tabs()
        self.setStyleSheet("""
            QTabWidget::pane {
                border: 1px solid #444;
                background: #2b2b2b;
            }
            QTabBar::tab {
                background: #3b3b3b;
                color: white;
                padding: 8px 16px;
                margin-right: 2px;
                border-top-left-radius: 4px;
                border-top-right-radius: 4px;
            }
            QTabBar::tab:selected {
                background: #FF2B43;
            }
            QTabBar::tab:hover {
                background: #4b4b4b;
            }
        """)
    
    def setup_tabs(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∫–ª–∞–¥–æ–∫ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
        
        # –í–∫–ª–∞–¥–∫–∞ 1: –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞
        self.heatmap_widget = ProductivityHeatmap()
        self.addTab(self.heatmap_widget, "üî• –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞")
        
        # –í–∫–ª–∞–¥–∫–∞ 2: –¢—Ä–µ–Ω–¥—ã
        self.trends_widget = ProductivityTrends()
        self.addTab(self.trends_widget, "üìà –¢—Ä–µ–Ω–¥—ã")
        
        # –í–∫–ª–∞–¥–∫–∞ 3: –ò–Ω—Å–∞–π—Ç—ã
        self.insights_widget = ProductivityInsights()
        self.addTab(self.insights_widget, "üí° –ò–Ω—Å–∞–π—Ç—ã")
        
        # –í–∫–ª–∞–¥–∫–∞ 4: –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
        self.export_widget = self.create_export_tab()
        self.addTab(self.export_widget, "üìä –≠–∫—Å–ø–æ—Ä—Ç")
    
    def create_export_tab(self) -> QWidget:
        """–°–æ–∑–¥–∞–Ω–∏–µ –≤–∫–ª–∞–¥–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö"""
        widget = QWidget()
        layout = QVBoxLayout()
        
        title = QLabel("üìä –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏ –æ—Ç—á–µ—Ç–æ–≤")
        title.setStyleSheet("font-size: 16px; font-weight: bold; color: #FF2B43; margin: 10px;")
        layout.addWidget(title)
        
        # –ö–Ω–æ–ø–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
        export_layout = QGridLayout()
        
        # PDF –æ—Ç—á–µ—Ç
        pdf_btn = QPushButton("üìÑ –≠–∫—Å–ø–æ—Ä—Ç –≤ PDF")
        pdf_btn.clicked.connect(self.export_to_pdf)
        pdf_btn.setStyleSheet("""
            QPushButton {
                background: #FF2B43;
                color: white;
                border: none;
                padding: 10px 20px;
                border-radius: 5px;
                font-weight: bold;
            }
            QPushButton:hover {
                background: #E91E63;
            }
        """)
        
        # Excel –æ—Ç—á–µ—Ç
        excel_btn = QPushButton("üìä –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel")
        excel_btn.clicked.connect(self.export_to_excel)
        excel_btn.setStyleSheet(pdf_btn.styleSheet().replace("#FF2B43", "#4CAF50").replace("#E91E63", "#45A049"))
        
        # CSV –¥–∞–Ω–Ω—ã–µ
        csv_btn = QPushButton("üìã –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV")
        csv_btn.clicked.connect(self.export_to_csv)
        csv_btn.setStyleSheet(pdf_btn.styleSheet().replace("#FF2B43", "#2196F3").replace("#E91E63", "#1976D2"))
        
        # JSON –¥–∞–Ω–Ω—ã–µ
        json_btn = QPushButton("üîß –≠–∫—Å–ø–æ—Ä—Ç –≤ JSON")
        json_btn.clicked.connect(self.export_to_json)
        json_btn.setStyleSheet(pdf_btn.styleSheet().replace("#FF2B43", "#FF9800").replace("#E91E63", "#F57C00"))
        
        export_layout.addWidget(pdf_btn, 0, 0)
        export_layout.addWidget(excel_btn, 0, 1)
        export_layout.addWidget(csv_btn, 1, 0)
        export_layout.addWidget(json_btn, 1, 1)
        
        layout.addLayout(export_layout)
        
        # –°—Ç–∞—Ç—É—Å —ç–∫—Å–ø–æ—Ä—Ç–∞
        self.export_status = QLabel("–ì–æ—Ç–æ–≤ –∫ —ç–∫—Å–ø–æ—Ä—Ç—É –¥–∞–Ω–Ω—ã—Ö")
        self.export_status.setStyleSheet("color: #888; margin: 10px;")
        layout.addWidget(self.export_status)
        
        layout.addStretch()
        widget.setLayout(layout)
        return widget
    
    def export_to_pdf(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –≤ PDF"""
        self.export_status.setText("üìÑ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É—é –≤ PDF...")
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ PDF
        self.export_status.setText("‚úÖ PDF –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
    
    def export_to_excel(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –≤ Excel"""
        self.export_status.setText("üìä –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É—é –≤ Excel...")
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Excel
        self.export_status.setText("‚úÖ Excel —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
    
    def export_to_csv(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –≤ CSV"""
        self.export_status.setText("üìã –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É—é –≤ CSV...")
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ CSV
        self.export_status.setText("‚úÖ CSV —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
    
    def export_to_json(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –≤ JSON"""
        self.export_status.setText("üîß –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É—é –≤ JSON...")
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ JSON
        self.export_status.setText("‚úÖ JSON —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –≤–∏–¥–∂–µ—Ç–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ (–ª–µ–Ω–∏–≤–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è)
_advanced_analytics_widget = None

def get_advanced_analytics_widget():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –≤–∏–¥–∂–µ—Ç–∞ —Å –ª–µ–Ω–∏–≤–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π"""
    global _advanced_analytics_widget
    if _advanced_analytics_widget is None:
        _advanced_analytics_widget = AdvancedAnalyticsWidget()
    return _advanced_analytics_widget

# –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
advanced_analytics_widget = None
