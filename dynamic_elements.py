# dynamic_elements.py - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã

import random
from datetime import datetime, timedelta

class DynamicTaskList:
    """–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á —Å –∂–∏–≤—ã–º–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏"""
    
    def __init__(self):
        self.demo_tasks = [
            {"title": "–ò–∑—É—á–µ–Ω–∏–µ Python", "time": "09:00", "status": "in_progress", "priority": "high"},
            {"title": "–í—Å—Ç—Ä–µ—á–∞ —Å –∫–æ–º–∞–Ω–¥–æ–π", "time": "10:30", "status": "planned", "priority": "medium"},
            {"title": "–ö–æ–¥-—Ä–µ–≤—å—é", "time": "14:00", "status": "planned", "priority": "high"},
            {"title": "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è API", "time": "15:30", "status": "planned", "priority": "low"},
            {"title": "–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø—Ä–∏–Ω—Ç–∞", "time": "17:00", "status": "planned", "priority": "medium"}
        ]
        self.last_update = datetime.now()
    
    def get_dynamic_task_text(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Ç–µ–∫—Å—Ç —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á"""
        current_time = datetime.now()
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        if random.random() < 0.3:  # 30% —à–∞–Ω—Å –∏–∑–º–µ–Ω–µ–Ω–∏—è
            self.simulate_task_progress()
        
        task_text = "üìã –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏:\n\n"
        
        for i, task in enumerate(self.demo_tasks[:5]):
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∫–æ–Ω–∫—É —Å—Ç–∞—Ç—É—Å–∞
            status_icons = {
                "completed": "‚úÖ",
                "in_progress": "üîÑ", 
                "planned": "‚è∞",
                "overdue": "üö®"
            }
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            priority_colors = {
                "high": "üî¥",
                "medium": "üü°", 
                "low": "üü¢"
            }
            
            icon = status_icons.get(task["status"], "‚è∞")
            priority = priority_colors.get(task["priority"], "üü°")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –≤—Ä–µ–º–µ–Ω–∏
            task_time = datetime.strptime(task["time"], "%H:%M").time()
            current_time_only = current_time.time()
            
            time_indicator = ""
            if task_time < current_time_only and task["status"] == "planned":
                time_indicator = " (–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ)"
                icon = "üö®"
            elif task_time <= current_time_only and task["status"] == "in_progress":
                time_indicator = " (—Å–µ–π—á–∞—Å)"
            
            task_text += f"{icon} {priority} {task['title']} ({task['time']}){time_indicator}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        completed = len([t for t in self.demo_tasks if t["status"] == "completed"])
        total = len(self.demo_tasks)
        
        task_text += f"\nüìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {completed}/{total} –∑–∞–¥–∞—á –≤—ã–ø–æ–ª–Ω–µ–Ω–æ"
        task_text += f"\n‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {current_time.strftime('%H:%M:%S')}"
        
        return task_text
    
    def simulate_task_progress(self):
        """–°–∏–º—É–ª–∏—Ä—É–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á"""
        for task in self.demo_tasks:
            if task["status"] == "planned" and random.random() < 0.1:
                task["status"] = "in_progress"
            elif task["status"] == "in_progress" and random.random() < 0.2:
                task["status"] = "completed"

class DynamicChart:
    """–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –≥—Ä–∞—Ñ–∏–∫ —Å –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    
    def __init__(self):
        self.base_data = [3, 5, 4, 7, 6, 8, 5]  # –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –¥–Ω—è–º
        self.last_update = datetime.now()
    
    def get_dynamic_chart_text(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Ç–µ–∫—Å—Ç –≥—Ä–∞—Ñ–∏–∫–∞"""
        current_time = datetime.now()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à–∏–µ –∫–æ–ª–µ–±–∞–Ω–∏—è –∫ –¥–∞–Ω–Ω—ã–º
        animated_data = []
        for base_value in self.base_data:
            variation = random.randint(-1, 2)
            new_value = max(0, min(10, base_value + variation))
            animated_data.append(new_value)
        
        chart_text = "üìà –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:\n\n"
        days = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
        
        max_value = max(animated_data) if animated_data else 10
        
        for i, (day, value) in enumerate(zip(days, animated_data)):
            # –°–æ–∑–¥–∞–µ–º –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
            bar_length = int((value / max_value) * 10)
            bar = "‚ñà" * bar_length + "‚ñë" * (10 - bar_length)
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ü–≤–µ—Ç–æ–≤—É—é –∏–Ω–¥–∏–∫–∞—Ü–∏—é
            if value >= 8:
                indicator = "üî•"  # –í—ã—Å–æ–∫–∞—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            elif value >= 6:
                indicator = "‚ö°"  # –•–æ—Ä–æ—à–∞—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            elif value >= 4:
                indicator = "üëç"  # –°—Ä–µ–¥–Ω—è—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            else:
                indicator = "üìà"  # –ù–∏–∑–∫–∞—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            
            # –í—ã–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å
            if i == current_time.weekday():
                day_marker = f"[{day}]"  # –¢–µ–∫—É—â–∏–π –¥–µ–Ω—å –≤ —Å–∫–æ–±–∫–∞—Ö
            else:
                day_marker = f" {day} "
            
            chart_text += f"{day_marker}: {bar} {indicator} ({value}/10)\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        avg_productivity = sum(animated_data) / len(animated_data)
        trend = "üìà" if animated_data[-1] > animated_data[-2] else "üìâ"
        
        chart_text += f"\nüìä –°—Ä–µ–¥–Ω—è—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {avg_productivity:.1f}/10"
        chart_text += f"\n{trend} –¢—Ä–µ–Ω–¥: {'–†–æ—Å—Ç' if animated_data[-1] > animated_data[-2] else '–°–Ω–∏–∂–µ–Ω–∏–µ'}"
        chart_text += f"\nüïê –û–±–Ω–æ–≤–ª–µ–Ω–æ: {current_time.strftime('%H:%M:%S')}"
        
        return chart_text

class DynamicStats:
    """–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è –¥–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
    
    def __init__(self):
        self.session_start = datetime.now()
        self.update_count = 0
    
    def get_dynamic_stats_text(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        current_time = datetime.now()
        self.update_count += 1
        
        # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è —Å–µ—Å—Å–∏–∏
        session_duration = current_time - self.session_start
        session_minutes = int(session_duration.total_seconds() / 60)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –º–µ—Ç—Ä–∏–∫–∏
        focus_time = random.randint(45, 95)
        interruptions = random.randint(0, 5)
        productivity_score = random.randint(75, 98)
        
        stats_text = f"""üîÑ –ñ–∏–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–∏:

‚è±Ô∏è –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {session_minutes} –º–∏–Ω
üéØ –§–æ–∫—É—Å: {focus_time}%
üö´ –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏—è: {interruptions}
üìä –ü—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {productivity_score}%

üìà –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –º–µ—Ç—Ä–∏–∫–∏:
‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: {self.update_count}
‚Ä¢ –ê–∫—Ç–∏–≤–Ω–æ–µ –≤—Ä–µ–º—è: {session_minutes} –º–∏–Ω
‚Ä¢ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {'–í—ã—Å–æ–∫–∞—è' if productivity_score > 85 else '–°—Ä–µ–¥–Ω—è—è'}
‚Ä¢ –°—Ç–∞—Ç—É—Å: {'–í –ø–æ—Ç–æ–∫–µ' if focus_time > 80 else '–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è'}

üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:
{self.get_dynamic_recommendations(focus_time, productivity_score)}

üïê –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {current_time.strftime('%H:%M:%S')}"""
        
        return stats_text
    
    def get_dynamic_recommendations(self, focus_time, productivity_score):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
        recommendations = []
        
        if focus_time < 60:
            recommendations.append("‚Ä¢ –£–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–ª–µ–∫–∞—é—â–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã")
        if productivity_score < 80:
            recommendations.append("‚Ä¢ –°–¥–µ–ª–∞–π—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–π –ø–µ—Ä–µ—Ä—ã–≤")
        if self.update_count > 50:
            recommendations.append("‚Ä¢ –û—Ç–ª–∏—á–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å!")
        
        if not recommendations:
            recommendations.append("‚Ä¢ –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!")
        
        return "\n".join(recommendations)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
dynamic_task_list = DynamicTaskList()
dynamic_chart = DynamicChart()
dynamic_stats = DynamicStats()

print("–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
