"""
ü§ñ –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç DeepSeek API –¥–ª—è –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
"""

import requests
import json
import logging
from datetime import datetime, timedelta
from typing import List, Dict, Optional, Any
import tkinter as tk
from tkinter import messagebox
import threading
import time

class AIAssistant:
    """–ò–ò-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º OpenAI API"""
    
    def __init__(self, api_key: str):
        self.api_key = api_key
        # –ò–∑–º–µ–Ω—è–µ–º –Ω–∞ OpenAI API
        self.base_url = "https://api.openai.com/v1/chat/completions"
        self.headers = {
            "Authorization": f"Bearer {api_key}",
            "Content-Type": "application/json"
        }
        self.logger = logging.getLogger(__name__)
        self.offline_mode = False  # –ú–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å True –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–µ–∑ API
        self.api_error_count = 0  # –°—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ API
        
    def reset_api_status(self):
        """–°–±—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–∞ API –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        self.offline_mode = False
        self.api_error_count = 0
        print("API —Å—Ç–∞—Ç—É—Å —Å–±—Ä–æ—à–µ–Ω. –ü–æ–ø—Ä–æ–±—É—é –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ OpenAI...")
        
    def _make_request(self, messages: List[Dict], max_tokens: int = 1000) -> Optional[str]:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∫ OpenAI API"""
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ—Ö–æ–¥ –≤ –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º –ø–æ—Å–ª–µ 3 –æ—à–∏–±–æ–∫
        if self.api_error_count >= 3:
            self.offline_mode = True
        
        # –û—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
        if self.offline_mode:
            return self._get_offline_response(messages)
        
        try:
            payload = {
                "model": "gpt-3.5-turbo",  # –ò–∑–º–µ–Ω—è–µ–º –Ω–∞ OpenAI –º–æ–¥–µ–ª—å
                "messages": messages,
                "max_tokens": max_tokens,
                "temperature": 0.7,
                "stream": False
            }
            
            response = requests.post(
                self.base_url,
                headers=self.headers,
                json=payload,
                timeout=30
            )
            
            if response.status_code == 200:
                result = response.json()
                self.api_error_count = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
                return result["choices"][0]["message"]["content"]
            else:
                self.logger.error(f"API Error: {response.status_code} - {response.text}")
                self.api_error_count += 1
                return None
                
        except Exception as e:
            self.logger.error(f"Request failed: {str(e)}")
            self.api_error_count += 1
            return None
    
    def _get_offline_response(self, messages: List[Dict]) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –≤ –æ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º–µ"""
        user_message = ""
        for msg in messages:
            if msg.get("role") == "user":
                user_message = msg.get("content", "").lower()
                break
        
        # –ü—Ä–æ—Å—Ç—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
        if any(word in user_message for word in ["–ø—Ä–∏–≤–µ—Ç", "hello", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π"]):
            return "–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é. –†–∞–±–æ—Ç–∞—é –≤ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–º —Ä–µ–∂–∏–º–µ, –Ω–æ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –±–∞–∑–æ–≤—ã–º–∏ —Å–æ–≤–µ—Ç–∞–º–∏!"
        
        elif any(word in user_message for word in ["–∑–∞–¥–∞—á", "–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"]):
            return """–í–æ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:

‚Ä¢ –ü—Ä–∞–≤–∏–ª–æ 3: –ø–ª–∞–Ω–∏—Ä—É–π—Ç–µ –º–∞–∫—Å–∏–º—É–º 3 –≤–∞–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏ –Ω–∞ –¥–µ–Ω—å
‚Ä¢ –¢–µ—Ö–Ω–∏–∫–∞ –ü–æ–º–æ–¥–æ—Ä–æ: 25 –º–∏–Ω—É—Ç —Ä–∞–±–æ—Ç—ã + 5 –º–∏–Ω—É—Ç –æ—Ç–¥—ã—Ö–∞
‚Ä¢ –ù–∞—á–∏–Ω–∞–π—Ç–µ —Å —Å–∞–º—ã—Ö —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á —É—Ç—Ä–æ–º
‚Ä¢ –ì—Ä—É–ø–ø–∏—Ä—É–π—Ç–µ –ø–æ—Ö–æ–∂–∏–µ –∑–∞–¥–∞—á–∏ –≤–º–µ—Å—Ç–µ
‚Ä¢ –û—Å—Ç–∞–≤–ª—è–π—Ç–µ 25% –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã–µ –¥–µ–ª–∞"""
        
        elif any(word in user_message for word in ["–ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", "—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"]):
            return """–°–æ–≤–µ—Ç—ã –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:

‚Ä¢ –£–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–ª–µ–∫–∞—é—â–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã (—Ç–µ–ª–µ—Ñ–æ–Ω, —Å–æ—Ü—Å–µ—Ç–∏)
‚Ä¢ –†–∞–±–æ—Ç–∞–π—Ç–µ –≤ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–µ –∑–∞ —Ä–∞–∑
‚Ä¢ –î–µ–ª–∞–π—Ç–µ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –ø–µ—Ä–µ—Ä—ã–≤—ã –∫–∞–∂–¥—ã–µ 90 –º–∏–Ω—É—Ç
‚Ä¢ –ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ –¥–µ–Ω—å —Å –≤–µ—á–µ—Ä–∞
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á"""
        
        elif any(word in user_message for word in ["–º–æ—Ç–∏–≤–∞—Ü–∏—è", "–ª–µ–Ω—å"]):
            return """–ö–∞–∫ –ø–æ–±–æ—Ä–æ—Ç—å –ø—Ä–æ–∫—Ä–∞—Å—Ç–∏–Ω–∞—Ü–∏—é:

‚Ä¢ –†–∞–∑–±–∏–≤–∞–π—Ç–µ –±–æ–ª—å—à–∏–µ –∑–∞–¥–∞—á–∏ –Ω–∞ –º–∞–ª–µ–Ω—å–∫–∏–µ —à–∞–≥–∏
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∞–≤–∏–ª–æ 2 –º–∏–Ω—É—Ç: –µ—Å–ª–∏ –∑–∞–¥–∞—á–∞ –∑–∞–π–º–µ—Ç –º–µ–Ω—å—à–µ 2 –º–∏–Ω—É—Ç - –¥–µ–ª–∞–π—Ç–µ —Å—Ä–∞–∑—É
‚Ä¢ –ù–∞–≥—Ä–∞–∂–¥–∞–π—Ç–µ —Å–µ–±—è –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
‚Ä¢ –ù–∞–π–¥–∏—Ç–µ —Å–≤–æ–µ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–µ –≤—Ä–µ–º—è –¥–Ω—è
‚Ä¢ –°–æ–∑–¥–∞–π—Ç–µ —Ä–∏—Ç—É–∞–ª—ã –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã"""
        
        else:
            return """–†–∞–±–æ—Ç–∞—é –≤ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–º —Ä–µ–∂–∏–º–µ. –ú–æ–≥—É –¥–∞—Ç—å –æ–±—â–∏–µ —Å–æ–≤–µ—Ç—ã –ø–æ:

‚Ä¢ –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é –∑–∞–¥–∞—á –∏ –≤—Ä–µ–º–µ–Ω–∏
‚Ä¢ –ü–æ–≤—ã—à–µ–Ω–∏—é –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
‚Ä¢ –ë–æ—Ä—å–±–µ —Å –ø—Ä–æ–∫—Ä–∞—Å—Ç–∏–Ω–∞—Ü–∏–µ–π
‚Ä¢ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è
‚Ä¢ –¢–µ—Ö–Ω–∏–∫–∞–º –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏

–ó–∞–¥–∞–≤–∞–π—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å!"""
    
    def analyze_tasks(self, tasks: List[Dict]) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –∑–∞–¥–∞—á –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–¥–∞—á–∞—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        task_summary = []
        for task in tasks:
            task_info = {
                "–Ω–∞–∑–≤–∞–Ω–∏–µ": task.get("title", ""),
                "–æ–ø–∏—Å–∞–Ω–∏–µ": task.get("description", ""),
                "–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç": task.get("priority", "medium"),
                "–≤—Ä–µ–º—è_—Å–æ–∑–¥–∞–Ω–∏—è": task.get("created_at", ""),
                "–¥–µ–¥–ª–∞–π–Ω": task.get("deadline", ""),
                "—Å—Ç–∞—Ç—É—Å": task.get("status", "pending"),
                "–∫–∞—Ç–µ–≥–æ—Ä–∏—è": task.get("category", "")
            }
            task_summary.append(task_info)
        
        messages = [
            {
                "role": "system",
                "content": """–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é –∑–∞–¥–∞—á. 
                –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–π –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
                –û—Ç–≤–µ—á–∞–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –ø–æ–ª—è–º–∏:
                - "–ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—è": —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –≤ –ø–æ—Ä—è–¥–∫–µ –≤–∞–∂–Ω–æ—Å—Ç–∏
                - "–≤—Ä–µ–º–µ–Ω–Ω—ã–µ_–±–ª–æ–∫–∏": —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—é –≤—Ä–µ–º–µ–Ω–∏
                - "–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è": –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                - "–ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è": –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –∏–ª–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã
                - "–º–æ—Ç–∏–≤–∞—Ü–∏—è": –º–æ—Ç–∏–≤–∏—Ä—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
            },
            {
                "role": "user",
                "content": f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –º–æ–∏ –∑–∞–¥–∞—á–∏ –∏ –¥–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {json.dumps(task_summary, ensure_ascii=False, indent=2)}"
            }
        ]
        
        response = self._make_request(messages, max_tokens=1500)
        
        if response:
            try:
                # –ü–æ–ø—ã—Ç–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç–≤–µ—Ç–∞
                analysis = json.loads(response)
                return analysis
            except json.JSONDecodeError:
                # –ï—Å–ª–∏ –Ω–µ JSON, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑
                return {
                    "–∞–Ω–∞–ª–∏–∑": response,
                    "—Å—Ç–∞—Ç—É—Å": "—Ç–µ–∫—Å—Ç–æ–≤—ã–π_–æ—Ç–≤–µ—Ç"
                }
        
        return {
            "–æ—à–∏–±–∫–∞": "–ò–ò-–ø–æ–º–æ—â–Ω–∏–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω",
            "–ø—Ä–∏—á–∏–Ω–∞": "–ü—Ä–æ–±–ª–µ–º—ã —Å OpenAI API (–≤–æ–∑–º–æ–∂–Ω–æ, –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á)",
            "—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏": [
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∞–ª–∞–Ω—Å OpenAI API –Ω–∞ platform.openai.com",
                "–£–±–µ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ API –∫–ª—é—á–∞",
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ",
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç"
            ]
        }
    
    def suggest_time_blocks(self, tasks: List[Dict], available_hours: int = 8) -> List[Dict]:
        """–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∑–∞–¥–∞—á"""
        
        messages = [
            {
                "role": "system",
                "content": f"""–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ç–∞–π–º-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç—É. –°–æ–∑–¥–∞–π –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∑–∞–¥–∞—á.
                –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å {available_hours} —á–∞—Å–æ–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã.
                –û—Ç–≤–µ—á–∞–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON —Å–æ —Å–ø–∏—Å–∫–æ–º –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –±–ª–æ–∫–æ–≤:
                [{{"–∑–∞–¥–∞—á–∞": "–Ω–∞–∑–≤–∞–Ω–∏–µ", "–≤—Ä–µ–º—è_–Ω–∞—á–∞–ª–∞": "HH:MM", "–ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å": "–º–∏–Ω—É—Ç—ã", "–æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ": "–ø–æ—á–µ–º—É –∏–º–µ–Ω–Ω–æ —ç—Ç–æ –≤—Ä–µ–º—è"}}]
                –£—á–∏—Ç—ã–≤–∞–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã, —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∑–∞–¥–∞—á –∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ä–∏—Ç–º—ã –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏."""
            },
            {
                "role": "user",
                "content": f"–°–æ–∑–¥–∞–π —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∑–∞–¥–∞—á: {json.dumps([{'–Ω–∞–∑–≤–∞–Ω–∏–µ': t.get('title', ''), '–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç': t.get('priority', 'medium'), '–æ–ø–∏—Å–∞–Ω–∏–µ': t.get('description', '')} for t in tasks], ensure_ascii=False)}"
            }
        ]
        
        response = self._make_request(messages, max_tokens=1200)
        
        if response:
            try:
                schedule = json.loads(response)
                return schedule if isinstance(schedule, list) else []
            except json.JSONDecodeError:
                return []
        
        return []
    
    def generate_smart_reminders(self, task: Dict) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–º–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –∑–∞–¥–∞—á–∏"""
        
        messages = [
            {
                "role": "system",
                "content": """–°–æ–∑–¥–∞–π —Å–ø–∏—Å–æ–∫ —É–º–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –∑–∞–¥–∞—á–∏.
                –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–º–∏, –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –∏ –ø–æ–ª–µ–∑–Ω—ã–º–∏.
                –û—Ç–≤–µ—á–∞–π —Å–ø–∏—Å–∫–æ–º —Å—Ç—Ä–æ–∫ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ (–º–∞–∫—Å–∏–º—É–º 5 –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π)."""
            },
            {
                "role": "user",
                "content": f"–°–æ–∑–¥–∞–π –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –∑–∞–¥–∞—á–∏: {task.get('title', '')} - {task.get('description', '')}"
            }
        ]
        
        response = self._make_request(messages, max_tokens=500)
        
        if response:
            # –†–∞–∑–±–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –∏ –æ—á–∏—â–∞–µ–º
            reminders = [line.strip() for line in response.split('\n') if line.strip()]
            return reminders[:5]  # –ú–∞–∫—Å–∏–º—É–º 5 –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
        
        return ["–ù–µ –∑–∞–±—É–¥—å—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —ç—Ç—É –∑–∞–¥–∞—á—É!"]
    
    def productivity_insights(self, completed_tasks: List[Dict], productivity_data: Dict) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Å–∞–π—Ç–æ–≤"""
        
        messages = [
            {
                "role": "system",
                "content": """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–π –∏–Ω—Å–∞–π—Ç—ã.
                –û—Ç–≤–µ—á–∞–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
                {
                    "–æ—Å–Ω–æ–≤–Ω—ã–µ_–ø–∞—Ç—Ç–µ—Ä–Ω—ã": "–æ–ø–∏—Å–∞–Ω–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —Ä–∞–±–æ—Ç—ã",
                    "—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏": ["—Å–ø–∏—Å–æ–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"],
                    "—Å–∏–ª—å–Ω—ã–µ_—Å—Ç–æ—Ä–æ–Ω—ã": ["—á—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ö–æ—Ä–æ—à–æ"],
                    "–æ–±–ª–∞—Å—Ç–∏_—É–ª—É—á—à–µ–Ω–∏—è": ["—á—Ç–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å"],
                    "–ø—Ä–æ–≥–Ω–æ–∑": "–ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –ø–µ—Ä–∏–æ–¥"
                }"""
            },
            {
                "role": "user",
                "content": f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –º–æ—é –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:
                –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏: {len(completed_tasks)}
                –î–∞–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {json.dumps(productivity_data, ensure_ascii=False)}
                –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–¥–∞—á–∏: {json.dumps([{'–Ω–∞–∑–≤–∞–Ω–∏–µ': t.get('title', ''), '–≤—Ä–µ–º—è_–≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è': t.get('completion_time', '')} for t in completed_tasks[-10:]], ensure_ascii=False)}"""
            }
        ]
        
        response = self._make_request(messages, max_tokens=1000)
        
        if response:
            try:
                insights = json.loads(response)
                return insights
            except json.JSONDecodeError:
                return {"–∞–Ω–∞–ª–∏–∑": response}
        
        return {"–æ—à–∏–±–∫–∞": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"}
    
    def suggest_break_schedule(self, work_duration: int) -> List[Dict]:
        """–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä–µ—Ä—ã–≤–æ–≤"""
        
        messages = [
            {
                "role": "system",
                "content": f"""–°–æ–∑–¥–∞–π –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä–µ—Ä—ã–≤–æ–≤ –¥–ª—è {work_duration} —á–∞—Å–æ–≤ —Ä–∞–±–æ—Ç—ã.
                –ò—Å–ø–æ–ª—å–∑—É–π –Ω–∞—É—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (—Ç–µ—Ö–Ω–∏–∫–∞ –ü–æ–º–æ–¥–æ—Ä–æ, –ø—Ä–∞–≤–∏–ª–æ 52/17 –∏ –¥—Ä.).
                –û—Ç–≤–µ—á–∞–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–µ—Ä–µ—Ä—ã–≤–æ–≤:
                [{{"–≤—Ä–µ–º—è": "HH:MM", "—Ç–∏–ø": "–∫–æ—Ä–æ—Ç–∫–∏–π/–¥–ª–∏–Ω–Ω—ã–π", "–ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å": "–º–∏–Ω—É—Ç—ã", "–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å": "—á—Ç–æ –¥–µ–ª–∞—Ç—å"}}]"""
            },
            {
                "role": "user",
                "content": f"–°–æ–∑–¥–∞–π —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä–µ—Ä—ã–≤–æ–≤ –¥–ª—è {work_duration} —á–∞—Å–æ–≤ —Ä–∞–±–æ—Ç—ã"
            }
        ]
        
        response = self._make_request(messages, max_tokens=800)
        
        if response:
            try:
                breaks = json.loads(response)
                return breaks if isinstance(breaks, list) else []
            except json.JSONDecodeError:
                return []
        
        return []
    
    def chat_with_assistant(self, user_message: str, context: Dict = None) -> str:
        """–ß–∞—Ç —Å –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫–æ–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–≤–µ—Ç–æ–≤ –ø–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é"""
        
        system_message = """–¢—ã - –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é.
        –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –¥–∞–≤–∞–π –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã, –±—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º –∏ –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–º.
        –ü–æ–º–æ–≥–∞–π —Å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∑–∞–¥–∞—á, —Ç–∞–π–º-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–æ–º, –º–æ—Ç–∏–≤–∞—Ü–∏–µ–π –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–µ–π —Ä–∞–±–æ—Ç—ã."""
        
        messages = [{"role": "system", "content": system_message}]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –µ—Å—Ç—å
        if context:
            context_message = f"–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {json.dumps(context, ensure_ascii=False)}"
            messages.append({"role": "system", "content": context_message})
        
        messages.append({"role": "user", "content": user_message})
        
        response = self._make_request(messages, max_tokens=800)
        
        if response:
            return response
        else:
            # –ë–æ–ª–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            return """–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. 
            
–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:
‚Ä¢ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å –Ω–∞ OpenAI API
‚Ä¢ –ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á
‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º  
‚Ä¢ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:
1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å –Ω–∞ platform.openai.com
2. –£–±–µ–¥–∏—Ç—å—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ API –∫–ª—é—á–∞
3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
4. –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç

–ü–æ–∫–∞ —á—Ç–æ –º–æ–≥—É –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –æ–±—â–∏–µ —Å–æ–≤–µ—Ç—ã –ø–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é:
‚Ä¢ –ù–∞—á–∏–Ω–∞–π—Ç–µ –¥–µ–Ω—å —Å —Å–∞–º—ã—Ö –≤–∞–∂–Ω—ã—Ö –∑–∞–¥–∞—á
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ—Ö–Ω–∏–∫—É –ü–æ–º–æ–¥–æ—Ä–æ (25 –º–∏–Ω —Ä–∞–±–æ—Ç—ã + 5 –º–∏–Ω –æ—Ç–¥—ã—Ö–∞)
‚Ä¢ –ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ –Ω–µ –±–æ–ª–µ–µ 3-5 –∫–ª—é—á–µ–≤—ã—Ö –∑–∞–¥–∞—á –Ω–∞ –¥–µ–Ω—å
‚Ä¢ –î–µ–ª–∞–π—Ç–µ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –ø–µ—Ä–µ—Ä—ã–≤—ã –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏"""


class AIAssistantUI:
    """–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫–∞"""
    
    def __init__(self, parent, ai_assistant: AIAssistant):
        self.parent = parent
        self.ai_assistant = ai_assistant
        self.chat_window = None
        
    def create_ai_tab(self, notebook):
        """–°–æ–∑–¥–∞—Ç—å –≤–∫–ª–∞–¥–∫—É –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫–∞"""
        ai_frame = tk.Frame(notebook)
        notebook.add(ai_frame, text="ü§ñ –ò–ò-–ü–æ–º–æ—â–Ω–∏–∫")
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = tk.Label(ai_frame, text="ü§ñ –ò–ò-–ü–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è", 
                              font=("Arial", 16, "bold"))
        title_label.pack(pady=10)
        
        # –ö–Ω–æ–ø–∫–∏ —Ñ—É–Ω–∫—Ü–∏–π
        buttons_frame = tk.Frame(ai_frame)
        buttons_frame.pack(pady=10)
        
        tk.Button(buttons_frame, text="üìä –ê–Ω–∞–ª–∏–∑ –∑–∞–¥–∞—á", 
                 command=self.analyze_current_tasks,
                 bg="#4CAF50", fg="white", font=("Arial", 10, "bold")).pack(side=tk.LEFT, padx=5)
        
        tk.Button(buttons_frame, text="‚è∞ –£–º–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ", 
                 command=self.smart_scheduling,
                 bg="#2196F3", fg="white", font=("Arial", 10, "bold")).pack(side=tk.LEFT, padx=5)
        
        tk.Button(buttons_frame, text="üí° –ò–Ω—Å–∞–π—Ç—ã –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏", 
                 command=self.show_productivity_insights,
                 bg="#FF9800", fg="white", font=("Arial", 10, "bold")).pack(side=tk.LEFT, padx=5)
        
        tk.Button(buttons_frame, text="üí¨ –ß–∞—Ç —Å –ò–ò", 
                 command=self.open_chat_window,
                 bg="#9C27B0", fg="white", font=("Arial", 10, "bold")).pack(side=tk.LEFT, padx=5)
        
        # –û–±–ª–∞—Å—Ç—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        self.results_text = tk.Text(ai_frame, height=20, width=80, wrap=tk.WORD)
        self.results_text.pack(pady=10, padx=10, fill=tk.BOTH, expand=True)
        
        # –°–∫—Ä–æ–ª–ª–±–∞—Ä
        scrollbar = tk.Scrollbar(ai_frame, orient=tk.VERTICAL, command=self.results_text.yview)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        self.results_text.config(yscrollcommand=scrollbar.set)
        
        return ai_frame
    
    def analyze_current_tasks(self):
        """–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–∏—Ö –∑–∞–¥–∞—á"""
        self.results_text.delete(1.0, tk.END)
        self.results_text.insert(tk.END, "üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à–∏ –∑–∞–¥–∞—á–∏...\n\n")
        self.parent.update()
        
        def analyze():
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                tasks = getattr(self.parent, 'tasks', [])
                if not tasks:
                    self.results_text.insert(tk.END, "‚ùå –ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –°–æ–∑–¥–∞–π—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á —Å–Ω–∞—á–∞–ª–∞.\n")
                    return
                
                analysis = self.ai_assistant.analyze_tasks(tasks)
                
                self.results_text.delete(1.0, tk.END)
                self.results_text.insert(tk.END, "ü§ñ –ê–Ω–∞–ª–∏–∑ –≤–∞—à–∏—Ö –∑–∞–¥–∞—á:\n\n")
                
                for key, value in analysis.items():
                    self.results_text.insert(tk.END, f"üìã {key.upper()}:\n")
                    if isinstance(value, list):
                        for item in value:
                            self.results_text.insert(tk.END, f"  ‚Ä¢ {item}\n")
                    else:
                        self.results_text.insert(tk.END, f"  {value}\n")
                    self.results_text.insert(tk.END, "\n")
                    
            except Exception as e:
                self.results_text.insert(tk.END, f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}\n")
        
        threading.Thread(target=analyze, daemon=True).start()
    
    def smart_scheduling(self):
        """–£–º–Ω–æ–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á"""
        self.results_text.delete(1.0, tk.END)
        self.results_text.insert(tk.END, "üîÑ –°–æ–∑–¥–∞—é –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ...\n\n")
        self.parent.update()
        
        def schedule():
            try:
                tasks = getattr(self.parent, 'tasks', [])
                if not tasks:
                    self.results_text.insert(tk.END, "‚ùå –ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.\n")
                    return
                
                schedule = self.ai_assistant.suggest_time_blocks(tasks)
                
                self.results_text.delete(1.0, tk.END)
                self.results_text.insert(tk.END, "‚è∞ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n\n")
                
                for block in schedule:
                    self.results_text.insert(tk.END, f"üïê {block.get('–≤—Ä–µ–º—è_–Ω–∞—á–∞–ª–∞', 'N/A')} - {block.get('–∑–∞–¥–∞—á–∞', 'N/A')}\n")
                    self.results_text.insert(tk.END, f"   –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {block.get('–ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', 'N/A')} –º–∏–Ω\n")
                    self.results_text.insert(tk.END, f"   üí° {block.get('–æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ', '')}\n\n")
                    
            except Exception as e:
                self.results_text.insert(tk.END, f"‚ùå –û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}\n")
        
        threading.Thread(target=schedule, daemon=True).start()
    
    def show_productivity_insights(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Å–∞–π—Ç—ã –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        self.results_text.delete(1.0, tk.END)
        self.results_text.insert(tk.END, "üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à—É –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å...\n\n")
        self.parent.update()
        
        def get_insights():
            try:
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö
                completed_tasks = [t for t in getattr(self.parent, 'tasks', []) if t.get('status') == 'completed']
                productivity_data = {
                    "total_tasks": len(getattr(self.parent, 'tasks', [])),
                    "completed_tasks": len(completed_tasks),
                    "completion_rate": len(completed_tasks) / max(len(getattr(self.parent, 'tasks', [])), 1) * 100
                }
                
                insights = self.ai_assistant.productivity_insights(completed_tasks, productivity_data)
                
                self.results_text.delete(1.0, tk.END)
                self.results_text.insert(tk.END, "üìä –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:\n\n")
                
                for key, value in insights.items():
                    self.results_text.insert(tk.END, f"üìà {key.upper().replace('_', ' ')}:\n")
                    if isinstance(value, list):
                        for item in value:
                            self.results_text.insert(tk.END, f"  ‚Ä¢ {item}\n")
                    else:
                        self.results_text.insert(tk.END, f"  {value}\n")
                    self.results_text.insert(tk.END, "\n")
                    
            except Exception as e:
                self.results_text.insert(tk.END, f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}\n")
        
        threading.Thread(target=get_insights, daemon=True).start()
    
    def open_chat_window(self):
        """–û—Ç–∫—Ä—ã—Ç—å –æ–∫–Ω–æ —á–∞—Ç–∞ —Å –ò–ò"""
        if self.chat_window and self.chat_window.winfo_exists():
            self.chat_window.lift()
            return
        
        self.chat_window = tk.Toplevel(self.parent)
        self.chat_window.title("üí¨ –ß–∞—Ç —Å –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫–æ–º")
        self.chat_window.geometry("600x500")
        
        # –û–±–ª–∞—Å—Ç—å —á–∞—Ç–∞
        chat_frame = tk.Frame(self.chat_window)
        chat_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        self.chat_text = tk.Text(chat_frame, height=20, wrap=tk.WORD, state=tk.DISABLED)
        self.chat_text.pack(fill=tk.BOTH, expand=True)
        
        # –ü–æ–ª–µ –≤–≤–æ–¥–∞
        input_frame = tk.Frame(self.chat_window)
        input_frame.pack(fill=tk.X, padx=10, pady=5)
        
        self.chat_entry = tk.Entry(input_frame, font=("Arial", 12))
        self.chat_entry.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=(0, 5))
        self.chat_entry.bind("<Return>", self.send_message)
        
        send_button = tk.Button(input_frame, text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å", command=self.send_message)
        send_button.pack(side=tk.RIGHT)
        
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        self.add_chat_message("ü§ñ –ò–ò-–ü–æ–º–æ—â–Ω–∏–∫", "–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é. –ó–∞–¥–∞–≤–∞–π—Ç–µ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, —Ç–∞–π–º-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–µ –∏–ª–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–¥–∞—á!")
        
        self.chat_entry.focus()
    
    def send_message(self, event=None):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç"""
        message = self.chat_entry.get().strip()
        if not message:
            return
        
        self.chat_entry.delete(0, tk.END)
        self.add_chat_message("üë§ –í—ã", message)
        
        def get_response():
            try:
                # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
                context = {
                    "total_tasks": len(getattr(self.parent, 'tasks', [])),
                    "current_time": datetime.now().strftime("%H:%M")
                }
                
                response = self.ai_assistant.chat_with_assistant(message, context)
                self.add_chat_message("ü§ñ –ò–ò-–ü–æ–º–æ—â–Ω–∏–∫", response)
            except Exception as e:
                self.add_chat_message("ü§ñ –ò–ò-–ü–æ–º–æ—â–Ω–∏–∫", f"–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        
        threading.Thread(target=get_response, daemon=True).start()
    
    def add_chat_message(self, sender: str, message: str):
        """–î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç"""
        self.chat_text.config(state=tk.NORMAL)
        self.chat_text.insert(tk.END, f"\n{sender}:\n{message}\n")
        self.chat_text.config(state=tk.DISABLED)
        self.chat_text.see(tk.END)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –æ—Å–Ω–æ–≤–Ω—ã–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º
def integrate_ai_assistant(main_app, api_key: str):
    """–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
    try:
        ai_assistant = AIAssistant(api_key)
        ai_ui = AIAssistantUI(main_app, ai_assistant)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∫–ª–∞–¥–∫—É –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫–∞ –µ—Å–ª–∏ –µ—Å—Ç—å notebook
        if hasattr(main_app, 'notebook'):
            ai_ui.create_ai_tab(main_app.notebook)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
        main_app.ai_assistant = ai_assistant
        main_app.ai_ui = ai_ui
        
        return True
    except Exception as e:
        logging.error(f"Failed to integrate AI assistant: {str(e)}")
        return False
