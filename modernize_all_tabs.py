#!/usr/bin/env python3
# modernize_all_tabs.py - –ú–æ–¥–µ—Ä–Ω–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –≤–∫–ª–∞–¥–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

def modernize_tasks_tab():
    """–ú–æ–¥–µ—Ä–Ω–∏–∑–∏—Ä—É–µ—Ç –≤–∫–ª–∞–¥–∫—É –∑–∞–¥–∞—á"""
    
    try:
        with open("hybrid_app.py", 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ù–∞—Ö–æ–¥–∏–º –º–µ—Ç–æ–¥ create_tasks_tab –∏ –∑–∞–º–µ–Ω—è–µ–º –µ–≥–æ –Ω–∞ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
        old_tasks_tab_start = content.find("def create_tasks_tab(self):")
        if old_tasks_tab_start == -1:
            print("–ú–µ—Ç–æ–¥ create_tasks_tab –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return content
        
        # –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω–µ—Ü –º–µ—Ç–æ–¥–∞
        next_method = content.find("\n    def ", old_tasks_tab_start + 1)
        if next_method == -1:
            next_method = len(content)
        
        # –ù–æ–≤–∞—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –≤–∫–ª–∞–¥–∫–∏ –∑–∞–¥–∞—á
        new_tasks_tab = '''def create_tasks_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏"""
        widget = QWidget()
        layout = QVBoxLayout()
        
        # –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–æ–º
        title = QLabel("üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∞–º–∏")
        title.setStyleSheet("""
            font-size: 20px; 
            font-weight: bold; 
            padding: 15px; 
            text-align: center;
            background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop:0 #FF2B43, stop:1 #FF6B35);
            border-radius: 10px;
            color: white;
            margin: 10px;
        """)
        title.setAlignment(Qt.AlignCenter)
        layout.addWidget(title)
        
        # –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        buttons_layout = QHBoxLayout()
        
        # –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
        self.add_task_btn = QPushButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É")
        self.add_task_btn.clicked.connect(self.add_task)
        self.add_task_btn.setStyleSheet("""
            QPushButton {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1, stop:0 #4CAF50, stop:1 #45A049);
                color: white;
                border: none;
                padding: 15px 25px;
                font-size: 14px;
                border-radius: 10px;
                font-weight: bold;
                min-width: 150px;
                min-height: 45px;
                box-shadow: 0 4px 8px rgba(76, 175, 80, 0.3);
            }
            QPushButton:hover {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1, stop:0 #5CBF60, stop:1 #4CAF50);
                transform: translateY(-2px);
            }
            QPushButton:pressed {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1, stop:0 #45A049, stop:1 #3D8B40);
            }
        """)
        buttons_layout.addWidget(self.add_task_btn)
        
        # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        refresh_btn = QPushButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å")
        refresh_btn.clicked.connect(self.refresh_tasks)
        refresh_btn.setStyleSheet("""
            QPushButton {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1, stop:0 #2196F3, stop:1 #1976D2);
                color: white;
                border: none;
                padding: 15px 25px;
                font-size: 14px;
                border-radius: 10px;
                font-weight: bold;
                min-width: 150px;
                min-height: 45px;
                box-shadow: 0 4px 8px rgba(33, 150, 243, 0.3);
            }
            QPushButton:hover {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1, stop:0 #42A5F5, stop:1 #2196F3);
                transform: translateY(-2px);
            }
        """)
        buttons_layout.addWidget(refresh_btn)
        
        # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏
        clear_btn = QPushButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å")
        clear_btn.clicked.connect(self.clear_completed_tasks)
        clear_btn.setStyleSheet("""
            QPushButton {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1, stop:0 #FF5722, stop:1 #E64A19);
                color: white;
                border: none;
                padding: 15px 25px;
                font-size: 14px;
                border-radius: 10px;
                font-weight: bold;
                min-width: 150px;
                min-height: 45px;
                box-shadow: 0 4px 8px rgba(255, 87, 34, 0.3);
            }
            QPushButton:hover {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1, stop:0 #FF7043, stop:1 #FF5722);
                transform: translateY(-2px);
            }
        """)
        buttons_layout.addWidget(clear_btn)
        
        buttons_layout.addStretch()
        layout.addLayout(buttons_layout)
        
        # –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
        scroll_area = QScrollArea()
        scroll_widget = QWidget()
        scroll_layout = QVBoxLayout(scroll_widget)
        
        # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
        self.tasks_list_widget = QTextEdit()
        self.tasks_list_widget.setReadOnly(True)
        self.tasks_list_widget.setMinimumHeight(300)
        self.tasks_list_widget.setStyleSheet("""
            QTextEdit {
                background: qlineargradient(x1:0, y1:0, x2:1, y2:1, stop:0 #2D2D2D, stop:1 #3D3D3D);
                border: 2px solid #FF2B43;
                border-radius: 12px;
                padding: 20px;
                font-family: 'Consolas', 'Monaco', monospace;
                font-size: 14px;
                color: #CCCCCC;
                selection-background-color: #FF2B43;
                box-shadow: 0 4px 12px rgba(0,0,0,0.3);
            }
        """)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
        self.update_tasks_display()
        
        scroll_layout.addWidget(self.tasks_list_widget)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–¥–∞—á
        self.tasks_stats_widget = QLabel()
        self.tasks_stats_widget.setStyleSheet("""
            QLabel {
                background: qlineargradient(x1:0, y1:0, x2:1, y2:1, stop:0 #2D2D2D, stop:1 #3D3D3D);
                border: 2px solid #4CAF50;
                border-radius: 12px;
                padding: 20px;
                font-size: 14px;
                color: #CCCCCC;
                margin: 10px;
                box-shadow: 0 4px 12px rgba(0,0,0,0.3);
            }
        """)
        self.update_tasks_stats()
        scroll_layout.addWidget(self.tasks_stats_widget)
        
        scroll_area.setWidget(scroll_widget)
        scroll_area.setWidgetResizable(True)
        layout.addWidget(scroll_area)
        
        widget.setLayout(layout)
        return widget
    
    def update_tasks_display(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á"""
        try:
            from task_manager import task_manager, TaskStatus
            from datetime import datetime
            
            all_tasks = task_manager.get_all_tasks()
            
            if not all_tasks:
                self.tasks_list_widget.setPlainText("üìù –ù–µ—Ç –∑–∞–¥–∞—á. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—É—é –∑–∞–¥–∞—á—É!")
                return
            
            tasks_text = "üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–¥–∞—á:\\n\\n"
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –ø–æ —Å—Ç–∞—Ç—É—Å—É
            status_groups = {
                "in_progress": "üîÑ –í –ø—Ä–æ—Ü–µ—Å—Å–µ:",
                "planned": "‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã:",
                "completed": "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω—ã:"
            }
            
            for status, title in status_groups.items():
                status_tasks = [t for t in all_tasks if t.status.name.lower() == status]
                if status_tasks:
                    tasks_text += f"\\n{title}\\n"
                    for task in status_tasks[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ 10 –∑–∞–¥–∞—á –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
                        time_str = task.start_time.strftime('%H:%M') if hasattr(task, 'start_time') else "00:00"
                        priority_icon = "üî¥" if hasattr(task, 'priority') and task.priority == "high" else "üü°" if hasattr(task, 'priority') and task.priority == "medium" else "üü¢"
                        tasks_text += f"  {priority_icon} {task.title} ({time_str})\\n"
            
            current_time = datetime.now().strftime('%H:%M:%S')
            tasks_text += f"\\nüïê –û–±–Ω–æ–≤–ª–µ–Ω–æ: {current_time}"
            
            self.tasks_list_widget.setPlainText(tasks_text)
            
        except Exception as e:
            self.tasks_list_widget.setPlainText(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á: {e}")
    
    def update_tasks_stats(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–¥–∞—á"""
        try:
            from task_manager import task_manager, TaskStatus
            
            all_tasks = task_manager.get_all_tasks()
            completed = len([t for t in all_tasks if t.status == TaskStatus.COMPLETED])
            in_progress = len([t for t in all_tasks if t.status == TaskStatus.IN_PROGRESS])
            planned = len([t for t in all_tasks if t.status == TaskStatus.PLANNED])
            
            completion_rate = (completed / len(all_tasks) * 100) if all_tasks else 0
            
            stats_html = f"""
            <div style='text-align: center;'>
                <h3 style='color: #4CAF50; margin: 0;'>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–¥–∞—á</h3>
                <p style='margin: 10px 0;'>
                    <span style='color: #FFD700;'>–í—Å–µ–≥–æ: {len(all_tasks)}</span> | 
                    <span style='color: #4CAF50;'>–í—ã–ø–æ–ª–Ω–µ–Ω–æ: {completed}</span> | 
                    <span style='color: #FF9800;'>–í —Ä–∞–±–æ—Ç–µ: {in_progress}</span> | 
                    <span style='color: #2196F3;'>–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ: {planned}</span>
                </p>
                <p style='color: #FF2B43; font-weight: bold;'>–ü—Ä–æ–≥—Ä–µ—Å—Å: {completion_rate:.1f}%</p>
            </div>
            """
            
            self.tasks_stats_widget.setText(stats_html)
            
        except Exception as e:
            self.tasks_stats_widget.setText(f"–û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")'''
        
        # –ó–∞–º–µ–Ω—è–µ–º —Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ –Ω–∞ –Ω–æ–≤—ã–π
        content = content[:old_tasks_tab_start] + new_tasks_tab + content[next_method:]
        
        print("–í–∫–ª–∞–¥–∫–∞ –∑–∞–¥–∞—á –º–æ–¥–µ—Ä–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!")
        return content
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –º–æ–¥–µ—Ä–Ω–∏–∑–∞—Ü–∏–∏ –≤–∫–ª–∞–¥–∫–∏ –∑–∞–¥–∞—á: {e}")
        return None

def modernize_ai_tab():
    """–ú–æ–¥–µ—Ä–Ω–∏–∑–∏—Ä—É–µ—Ç –≤–∫–ª–∞–¥–∫—É –ò–ò"""
    
    try:
        with open("hybrid_app.py", 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ù–∞—Ö–æ–¥–∏–º –∏ –∑–∞–º–µ–Ω—è–µ–º create_ai_tab
        old_ai_start = content.find("def create_ai_tab(self):")
        if old_ai_start == -1:
            print("–ú–µ—Ç–æ–¥ create_ai_tab –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return content
        
        next_method = content.find("\n    def ", old_ai_start + 1)
        if next_method == -1:
            next_method = len(content)
        
        new_ai_tab = '''def create_ai_tab(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –≤–∫–ª–∞–¥–∫–∏ –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫–∞"""
        ai_widget = QWidget()
        layout = QVBoxLayout()
        
        # –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        title = QLabel("ü§ñ –ò–ò-–ü–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏")
        title.setStyleSheet("""
            font-size: 20px; 
            font-weight: bold; 
            padding: 15px; 
            text-align: center;
            background: qlineargradient(x1:0, y1:0, x2:1, y2:0, stop:0 #9C27B0, stop:1 #673AB7);
            border-radius: 10px;
            color: white;
            margin: 10px;
        """)
        title.setAlignment(Qt.AlignCenter)
        layout.addWidget(title)
        
        # –û–±–ª–∞—Å—Ç—å –≤–≤–æ–¥–∞ –∑–∞–ø—Ä–æ—Å–∞
        input_layout = QHBoxLayout()
        
        self.ai_input = QLineEdit()
        self.ai_input.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å –∫ –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫—É...")
        self.ai_input.setStyleSheet("""
            QLineEdit {
                background: qlineargradient(x1:0, y1:0, x2:1, y2:1, stop:0 #2D2D2D, stop:1 #3D3D3D);
                border: 2px solid #9C27B0;
                border-radius: 10px;
                padding: 15px;
                font-size: 14px;
                color: #CCCCCC;
                min-height: 20px;
            }
            QLineEdit:focus {
                border: 2px solid #BA68C8;
                box-shadow: 0 0 10px rgba(156, 39, 176, 0.3);
            }
        """)
        input_layout.addWidget(self.ai_input)
        
        # –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
        send_btn = QPushButton("üöÄ –°–ø—Ä–æ—Å–∏—Ç—å –ò–ò")
        send_btn.clicked.connect(self.process_ai_request)
        send_btn.setStyleSheet("""
            QPushButton {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1, stop:0 #9C27B0, stop:1 #7B1FA2);
                color: white;
                border: none;
                padding: 15px 25px;
                font-size: 14px;
                border-radius: 10px;
                font-weight: bold;
                min-width: 150px;
                box-shadow: 0 4px 8px rgba(156, 39, 176, 0.3);
            }
            QPushButton:hover {
                background: qlineargradient(x1:0, y1:0, x2:0, y2:1, stop:0 #BA68C8, stop:1 #9C27B0);
                transform: translateY(-2px);
            }
        """)
        input_layout.addWidget(send_btn)
        
        layout.addLayout(input_layout)
        
        # –û–±–ª–∞—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ò–ò
        self.ai_results = QTextEdit()
        self.ai_results.setReadOnly(True)
        self.ai_results.setStyleSheet("""
            QTextEdit {
                background: qlineargradient(x1:0, y1:0, x2:1, y2:1, stop:0 #2D2D2D, stop:1 #3D3D3D);
                border: 2px solid #9C27B0;
                border-radius: 12px;
                padding: 20px;
                font-family: 'Consolas', 'Monaco', monospace;
                font-size: 14px;
                color: #CCCCCC;
                selection-background-color: #9C27B0;
                box-shadow: 0 4px 12px rgba(0,0,0,0.3);
            }
        """)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º
        welcome_text = """ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ò–ò-–ü–æ–º–æ—â–Ω–∏–∫!

–Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º —Å:
‚Ä¢ üìã –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∑–∞–¥–∞—á –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
‚Ä¢ ‚è∞ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –≤—Ä–µ–º–µ–Ω–∏
‚Ä¢ üéØ –ü–æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π —Ü–µ–ª–µ–π
‚Ä¢ üìä –ê–Ω–∞–ª–∏–∑–æ–º –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
‚Ä¢ üí° –°–æ–≤–µ—Ç–∞–º–∏ –ø–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏

–ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –≤—ã—à–µ –∏ –Ω–∞–∂–º–∏—Ç–µ "–°–ø—Ä–æ—Å–∏—Ç—å –ò–ò"!

–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:
- "–ö–∞–∫ –ª—É—á—à–µ —Å–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –¥–µ–Ω—å?"
- "–ü–æ—Å–æ–≤–µ—Ç—É–π —Ç–µ—Ö–Ω–∏–∫–∏ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏"
- "–ö–∞–∫ –ø–æ–≤—ã—Å–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å?"
"""
        self.ai_results.setPlainText(welcome_text)
        layout.addWidget(self.ai_results)
        
        # –ë—ã—Å—Ç—Ä—ã–µ –∫–Ω–æ–ø–∫–∏
        quick_buttons_layout = QHBoxLayout()
        
        quick_buttons = [
            ("üìã –ü–ª–∞–Ω –¥–Ω—è", "–°–æ–∑–¥–∞–π –ø–ª–∞–Ω –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–Ω—è"),
            ("‚è∞ –¢–∞–π–º-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç", "–î–∞–π —Å–æ–≤–µ—Ç—ã –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –≤—Ä–µ–º–µ–Ω–µ–º"),
            ("üéØ –¶–µ–ª–∏", "–ü–æ–º–æ–≥–∏ –ø–æ—Å—Ç–∞–≤–∏—Ç—å SMART —Ü–µ–ª–∏"),
            ("üí™ –ú–æ—Ç–∏–≤–∞—Ü–∏—è", "–î–∞–π –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–æ–≤–µ—Ç")
        ]
        
        for btn_text, prompt in quick_buttons:
            btn = QPushButton(btn_text)
            btn.clicked.connect(lambda checked, p=prompt: self.quick_ai_request(p))
            btn.setStyleSheet("""
                QPushButton {
                    background: qlineargradient(x1:0, y1:0, x2:0, y2:1, stop:0 #673AB7, stop:1 #512DA8);
                    color: white;
                    border: none;
                    padding: 10px 15px;
                    font-size: 12px;
                    border-radius: 8px;
                    font-weight: bold;
                    min-width: 120px;
                }
                QPushButton:hover {
                    background: qlineargradient(x1:0, y1:0, x2:0, y2:1, stop:0 #7986CB, stop:1 #673AB7);
                }
            """)
            quick_buttons_layout.addWidget(btn)
        
        layout.addLayout(quick_buttons_layout)
        
        ai_widget.setLayout(layout)
        return ai_widget
    
    def process_ai_request(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –ò–ò"""
        query = self.ai_input.text().strip()
        if not query:
            return
        
        # –°–∏–º—É–ª—è—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –ò–ò
        import random
        from datetime import datetime
        
        responses = {
            "–ø–ª–∞–Ω": [
                "üìã –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –ø–ª–∞–Ω –¥–Ω—è:\\n\\n1. üåÖ –£—Ç—Ä–æ (6:00-9:00): –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –≤–∞–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏\\n2. ‚òÄÔ∏è –î–µ–Ω—å (9:00-13:00): –û—Å–Ω–æ–≤–Ω–∞—è —Ä–∞–±–æ—Ç–∞\\n3. üçΩÔ∏è –û–±–µ–¥ (13:00-14:00): –û—Ç–¥—ã—Ö –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ\\n4. üåÜ –í–µ—á–µ—Ä (14:00-18:00): –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–µ–ª\\n5. üåô –ù–æ—á—å: –ü–æ–¥–≤–µ–¥–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤",
                "üéØ –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π –¥–µ–Ω—å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å:\\n\\n‚Ä¢ –ß–µ—Ç–∫–æ–≥–æ —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤\\n‚Ä¢ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –≤–∞–∂–Ω—ã—Ö –∑–∞–¥–∞—á\\n‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω—ã—Ö –ø–µ—Ä–µ—Ä—ã–≤–æ–≤\\n‚Ä¢ –ê–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"
            ],
            "–≤—Ä–µ–º—è": [
                "‚è∞ –¢–µ—Ö–Ω–∏–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–µ–º:\\n\\nüçÖ Pomodoro: 25 –º–∏–Ω —Ä–∞–±–æ—Ç—ã + 5 –º–∏–Ω –æ—Ç–¥—ã—Ö–∞\\nüìä Time blocking: –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∑–∞–¥–∞—á\\nüéØ Eisenhower Matrix: –í–∞–∂–Ω–æ–µ vs –°—Ä–æ—á–Ω–æ–µ\\n‚ö° GTD: Getting Things Done —Å–∏—Å—Ç–µ–º–∞",
                "üí° –°–µ–∫—Ä–µ—Ç—ã –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:\\n\\n‚Ä¢ –ù–∞—á–∏–Ω–∞–π—Ç–µ —Å —Å–∞–º–æ–≥–æ —Å–ª–æ–∂–Ω–æ–≥–æ\\n‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–∞–≤–∏–ª–æ 2 –º–∏–Ω—É—Ç\\n‚Ä¢ –ì—Ä—É–ø–ø–∏—Ä—É–π—Ç–µ –ø–æ—Ö–æ–∂–∏–µ –∑–∞–¥–∞—á–∏\\n‚Ä¢ –ò–∑–±–µ–≥–∞–π—Ç–µ –º–Ω–æ–≥–æ–∑–∞–¥–∞—á–Ω–æ—Å—Ç–∏"
            ],
            "—Ü–µ–ª–∏": [
                "üéØ SMART —Ü–µ–ª–∏:\\n\\nS - Specific (–ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ)\\nM - Measurable (–ò–∑–º–µ—Ä–∏–º—ã–µ)\\nA - Achievable (–î–æ—Å—Ç–∏–∂–∏–º—ã–µ)\\nR - Relevant (–†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ)\\nT - Time-bound (–û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏)\\n\\n–ü—Ä–∏–º–µ—Ä: '–ò–∑—É—á–∏—Ç—å Python –∑–∞ 3 –º–µ—Å—è—Ü–∞, —É–¥–µ–ª—è—è 1 —á–∞—Å –≤ –¥–µ–Ω—å'",
                "üöÄ –°—Ç—Ä–∞—Ç–µ–≥–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–µ–π:\\n\\n1. –†–∞–∑–±–µ–π—Ç–µ –±–æ–ª—å—à—É—é —Ü–µ–ª—å –Ω–∞ –º–∞–ª–µ–Ω—å–∫–∏–µ —à–∞–≥–∏\\n2. –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–µ—Å—Å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ\\n3. –ü—Ä–∞–∑–¥–Ω—É–π—Ç–µ –º–∞–ª–µ–Ω—å–∫–∏–µ –ø–æ–±–µ–¥—ã\\n4. –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–π—Ç–µ –ø–ª–∞–Ω –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"
            ],
            "–º–æ—Ç–∏–≤–∞—Ü–∏—è": [
                "üí™ –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–π –∑–∞—Ä—è–¥:\\n\\n'–£—Å–ø–µ—Ö - —ç—Ç–æ —Å—É–º–º–∞ –º–∞–ª–µ–Ω—å–∫–∏—Ö —É—Å–∏–ª–∏–π, –ø–æ–≤—Ç–æ—Ä—è–µ–º—ã—Ö –¥–µ–Ω—å –∑–∞ –¥–Ω–µ–º.'\\n\\nüåü –ü–æ–º–Ω–∏—Ç–µ: –∫–∞–∂–¥–∞—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç –≤–∞—Å –∫ —Ü–µ–ª–∏!\\n‚ö° –í—ã —É–∂–µ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø—É—Ç–∏!",
                "üî• –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –º–æ—Ç–∏–≤–∞—Ü–∏–∏:\\n\\n‚Ä¢ –í–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Å–≤–æ–π —É—Å–ø–µ—Ö\\n‚Ä¢ –í–µ–¥–∏—Ç–µ –¥–Ω–µ–≤–Ω–∏–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π\\n‚Ä¢ –û–∫—Ä—É–∂–∞–π—Ç–µ —Å–µ–±—è –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–º–∏ –ª—é–¥—å–º–∏\\n‚Ä¢ –ü–æ–º–Ω–∏—Ç–µ —Å–≤–æ–µ '–ó–∞—á–µ–º'"
            ]
        }
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–ø—Ä–æ—Å–∞
        query_lower = query.lower()
        response_type = "–æ–±—â–∏–π"
        
        for key in responses.keys():
            if key in query_lower:
                response_type = key
                break
        
        if response_type in responses:
            response = random.choice(responses[response_type])
        else:
            response = f"ü§ñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à –∑–∞–ø—Ä–æ—Å: '{query}'\\n\\nüí° –≠—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –í–æ—Ç —á—Ç–æ —è –¥—É–º–∞—é:\\n\\n‚Ä¢ –ù–∞—á–Ω–∏—Ç–µ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ü–µ–ª–∏\\n‚Ä¢ –†–∞–∑–±–µ–π—Ç–µ –∑–∞–¥–∞—á—É –Ω–∞ –º–∞–ª–µ–Ω—å–∫–∏–µ —à–∞–≥–∏\\n‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ—Ö–Ω–∏–∫–∏ —Ç–∞–π–º-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞\\n‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–µ—Å—Å\\n\\n‚ö° –ü–æ–º–Ω–∏—Ç–µ: –ø–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–æ –≤–∞–∂–Ω–µ–µ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤–∞!"
        
        current_time = datetime.now().strftime('%H:%M:%S')
        full_response = f"‚ùì –í–∞—à –≤–æ–ø—Ä–æ—Å: {query}\\n\\n{response}\\n\\nüïê –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {current_time}"
        
        self.ai_results.setPlainText(full_response)
        self.ai_input.clear()
    
    def quick_ai_request(self, prompt):
        """–ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—Ä–æ—Å –∫ –ò–ò"""
        self.ai_input.setText(prompt)
        self.process_ai_request()'''
        
        content = content[:old_ai_start] + new_ai_tab + content[next_method:]
        print("–í–∫–ª–∞–¥–∫–∞ –ò–ò –º–æ–¥–µ—Ä–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!")
        return content
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –º–æ–¥–µ—Ä–Ω–∏–∑–∞—Ü–∏–∏ –≤–∫–ª–∞–¥–∫–∏ –ò–ò: {e}")
        return None

def apply_all_modernizations():
    """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –≤—Å–µ –º–æ–¥–µ—Ä–Ω–∏–∑–∞—Ü–∏–∏"""
    
    try:
        with open("hybrid_app.py", 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–æ–¥–µ—Ä–Ω–∏–∑–∞—Ü–∏—é –∑–∞–¥–∞—á
        content = modernize_tasks_tab()
        if content is None:
            return
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–æ–¥–µ—Ä–Ω–∏–∑–∞—Ü–∏—é –ò–ò
        content = modernize_ai_tab()
        if content is None:
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with open("hybrid_app.py", 'w', encoding='utf-8') as f:
            f.write(content)
        
        print("–í—Å–µ –≤–∫–ª–∞–¥–∫–∏ —É—Å–ø–µ—à–Ω–æ –º–æ–¥–µ—Ä–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã!")
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–æ–¥–µ—Ä–Ω–∏–∑–∞—Ü–∏–∏: {e}")

if __name__ == "__main__":
    apply_all_modernizations()
