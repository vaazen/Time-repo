"""
üîó –ú–µ–Ω–µ–¥–∂–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π —Å –≤–Ω–µ—à–Ω–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç Slack, Trello, Notion
"""

import requests
import json
import logging
from datetime import datetime
from typing import List, Dict, Optional, Any
import tkinter as tk
from tkinter import messagebox, simpledialog
import threading

class SlackIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å–æ Slack"""
    
    def __init__(self, bot_token: str = None, webhook_url: str = None):
        self.bot_token = bot_token
        self.webhook_url = webhook_url
        self.base_url = "https://slack.com/api"
        self.headers = {"Authorization": f"Bearer {bot_token}"} if bot_token else {}
        
    def send_task_notification(self, task: Dict, channel: str = "#general") -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–¥–∞—á–µ –≤ Slack"""
        try:
            message = {
                "channel": channel,
                "text": f"üìã –ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞: {task.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}",
                "attachments": [
                    {
                        "color": "good",
                        "fields": [
                            {"title": "–û–ø–∏—Å–∞–Ω–∏–µ", "value": task.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è'), "short": False},
                            {"title": "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç", "value": task.get('priority', 'medium'), "short": True},
                            {"title": "–î–µ–¥–ª–∞–π–Ω", "value": task.get('deadline', '–ù–µ —É–∫–∞–∑–∞–Ω'), "short": True}
                        ]
                    }
                ]
            }
            
            if self.webhook_url:
                response = requests.post(self.webhook_url, json=message)
                return response.status_code == 200
            elif self.bot_token:
                response = requests.post(f"{self.base_url}/chat.postMessage", 
                                       headers=self.headers, json=message)
                return response.status_code == 200
            return False
        except Exception as e:
            logging.error(f"Slack notification failed: {e}")
            return False
    
    def get_channels(self) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤"""
        try:
            if not self.bot_token:
                return []
            
            response = requests.get(f"{self.base_url}/conversations.list", headers=self.headers)
            if response.status_code == 200:
                data = response.json()
                return data.get('channels', [])
            return []
        except Exception as e:
            logging.error(f"Failed to get Slack channels: {e}")
            return []

class TrelloIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Trello"""
    
    def __init__(self, api_key: str = None, token: str = None):
        self.api_key = api_key
        self.token = token
        self.base_url = "https://api.trello.com/1"
        
    def create_card(self, board_id: str, list_id: str, task: Dict) -> Optional[str]:
        """–°–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É –≤ Trello"""
        try:
            url = f"{self.base_url}/cards"
            params = {
                "key": self.api_key,
                "token": self.token,
                "idList": list_id,
                "name": task.get('title', '–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞'),
                "desc": task.get('description', ''),
                "due": task.get('deadline', None)
            }
            
            response = requests.post(url, params=params)
            if response.status_code == 200:
                card_data = response.json()
                return card_data.get('id')
            return None
        except Exception as e:
            logging.error(f"Trello card creation failed: {e}")
            return None
    
    def get_boards(self) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å–æ–∫"""
        try:
            url = f"{self.base_url}/members/me/boards"
            params = {"key": self.api_key, "token": self.token}
            
            response = requests.get(url, params=params)
            if response.status_code == 200:
                return response.json()
            return []
        except Exception as e:
            logging.error(f"Failed to get Trello boards: {e}")
            return []
    
    def get_lists(self, board_id: str) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–∫–∏ –¥–æ—Å–∫–∏"""
        try:
            url = f"{self.base_url}/boards/{board_id}/lists"
            params = {"key": self.api_key, "token": self.token}
            
            response = requests.get(url, params=params)
            if response.status_code == 200:
                return response.json()
            return []
        except Exception as e:
            logging.error(f"Failed to get Trello lists: {e}")
            return []

class NotionIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Notion"""
    
    def __init__(self, token: str = None):
        self.token = token
        self.base_url = "https://api.notion.com/v1"
        self.headers = {
            "Authorization": f"Bearer {token}",
            "Content-Type": "application/json",
            "Notion-Version": "2022-06-28"
        } if token else {}
    
    def create_page(self, database_id: str, task: Dict) -> Optional[str]:
        """–°–æ–∑–¥–∞—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö Notion"""
        try:
            url = f"{self.base_url}/pages"
            
            properties = {
                "–ù–∞–∑–≤–∞–Ω–∏–µ": {"title": [{"text": {"content": task.get('title', '–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞')}}]},
                "–°—Ç–∞—Ç—É—Å": {"select": {"name": task.get('status', '–ù–µ –Ω–∞—á–∞—Ç–æ')}},
                "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç": {"select": {"name": task.get('priority', '–°—Ä–µ–¥–Ω–∏–π')}}
            }
            
            if task.get('deadline'):
                properties["–î–µ–¥–ª–∞–π–Ω"] = {"date": {"start": task['deadline']}}
            
            data = {
                "parent": {"database_id": database_id},
                "properties": properties
            }
            
            if task.get('description'):
                data["children"] = [
                    {
                        "object": "block",
                        "type": "paragraph",
                        "paragraph": {
                            "rich_text": [{"type": "text", "text": {"content": task['description']}}]
                        }
                    }
                ]
            
            response = requests.post(url, headers=self.headers, json=data)
            if response.status_code == 200:
                page_data = response.json()
                return page_data.get('id')
            return None
        except Exception as e:
            logging.error(f"Notion page creation failed: {e}")
            return None
    
    def get_databases(self) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            url = f"{self.base_url}/search"
            data = {"filter": {"value": "database", "property": "object"}}
            
            response = requests.post(url, headers=self.headers, json=data)
            if response.status_code == 200:
                result = response.json()
                return result.get('results', [])
            return []
        except Exception as e:
            logging.error(f"Failed to get Notion databases: {e}")
            return []

class IntegrationsManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –≤—Å–µ—Ö –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π"""
    
    def __init__(self):
        self.slack = None
        self.trello = None
        self.notion = None
        self.settings = {}
        
    def setup_slack(self, bot_token: str = None, webhook_url: str = None):
        """–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å–æ Slack"""
        self.slack = SlackIntegration(bot_token, webhook_url)
        self.settings['slack'] = {'bot_token': bot_token, 'webhook_url': webhook_url}
        
    def setup_trello(self, api_key: str, token: str):
        """–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å Trello"""
        self.trello = TrelloIntegration(api_key, token)
        self.settings['trello'] = {'api_key': api_key, 'token': token}
        
    def setup_notion(self, token: str):
        """–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å Notion"""
        self.notion = NotionIntegration(token)
        self.settings['notion'] = {'token': token}
    
    def sync_task_to_all(self, task: Dict) -> Dict[str, bool]:
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á—É —Å–æ –≤—Å–µ–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏"""
        results = {}
        
        # Slack
        if self.slack:
            results['slack'] = self.slack.send_task_notification(task)
        
        # Trello
        if self.trello and self.settings.get('trello', {}).get('default_board'):
            board_id = self.settings['trello']['default_board']
            list_id = self.settings['trello'].get('default_list')
            if list_id:
                card_id = self.trello.create_card(board_id, list_id, task)
                results['trello'] = card_id is not None
        
        # Notion
        if self.notion and self.settings.get('notion', {}).get('default_database'):
            database_id = self.settings['notion']['default_database']
            page_id = self.notion.create_page(database_id, task)
            results['notion'] = page_id is not None
        
        return results

class IntegrationsUI:
    """–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è–º–∏"""
    
    def __init__(self, parent, integrations_manager: IntegrationsManager):
        self.parent = parent
        self.manager = integrations_manager
        
    def create_integrations_tab(self, notebook):
        """–°–æ–∑–¥–∞—Ç—å –≤–∫–ª–∞–¥–∫—É –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π"""
        integrations_frame = tk.Frame(notebook)
        notebook.add(integrations_frame, text="üîó –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = tk.Label(integrations_frame, text="üîó –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –≤–Ω–µ—à–Ω–∏–º–∏ —Å–µ—Ä–≤–∏—Å–∞–º–∏", 
                              font=("Arial", 16, "bold"))
        title_label.pack(pady=10)
        
        # Slack —Å–µ–∫—Ü–∏—è
        slack_frame = tk.LabelFrame(integrations_frame, text="üì± Slack", font=("Arial", 12, "bold"))
        slack_frame.pack(fill=tk.X, padx=10, pady=5)
        
        tk.Button(slack_frame, text="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å Slack", command=self.setup_slack_dialog).pack(pady=5)
        tk.Button(slack_frame, text="–¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", command=self.test_slack).pack(pady=5)
        
        # Trello —Å–µ–∫—Ü–∏—è
        trello_frame = tk.LabelFrame(integrations_frame, text="üìã Trello", font=("Arial", 12, "bold"))
        trello_frame.pack(fill=tk.X, padx=10, pady=5)
        
        tk.Button(trello_frame, text="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å Trello", command=self.setup_trello_dialog).pack(pady=5)
        tk.Button(trello_frame, text="–í—ã–±—Ä–∞—Ç—å –¥–æ—Å–∫—É", command=self.select_trello_board).pack(pady=5)
        
        # Notion —Å–µ–∫—Ü–∏—è
        notion_frame = tk.LabelFrame(integrations_frame, text="üìù Notion", font=("Arial", 12, "bold"))
        notion_frame.pack(fill=tk.X, padx=10, pady=5)
        
        tk.Button(notion_frame, text="–ù–∞—Å—Ç—Ä–æ–∏—Ç—å Notion", command=self.setup_notion_dialog).pack(pady=5)
        tk.Button(notion_frame, text="–í—ã–±—Ä–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö", command=self.select_notion_database).pack(pady=5)
        
        # –°—Ç–∞—Ç—É—Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π
        self.status_text = tk.Text(integrations_frame, height=10, width=60)
        self.status_text.pack(pady=10, padx=10, fill=tk.BOTH, expand=True)
        
        self.update_status()
        
        return integrations_frame
    
    def setup_slack_dialog(self):
        """–î–∏–∞–ª–æ–≥ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Slack"""
        dialog = tk.Toplevel(self.parent)
        dialog.title("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Slack")
        dialog.geometry("400x300")
        
        tk.Label(dialog, text="–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:", font=("Arial", 12, "bold")).pack(pady=10)
        
        # Webhook URL
        tk.Label(dialog, text="Webhook URL (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è):").pack(anchor=tk.W, padx=10)
        webhook_entry = tk.Entry(dialog, width=50)
        webhook_entry.pack(padx=10, pady=5)
        
        tk.Label(dialog, text="–ò–õ–ò Bot Token:").pack(anchor=tk.W, padx=10, pady=(20, 0))
        token_entry = tk.Entry(dialog, width=50, show="*")
        token_entry.pack(padx=10, pady=5)
        
        def save_slack():
            webhook = webhook_entry.get().strip()
            token = token_entry.get().strip()
            
            if webhook or token:
                self.manager.setup_slack(token if token else None, webhook if webhook else None)
                messagebox.showinfo("–£—Å–ø–µ—Ö", "Slack –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞!")
                self.update_status()
                dialog.destroy()
            else:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ Webhook URL –∏–ª–∏ Bot Token")
        
        tk.Button(dialog, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", command=save_slack, bg="#4CAF50", fg="white").pack(pady=20)
    
    def setup_trello_dialog(self):
        """–î–∏–∞–ª–æ–≥ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Trello"""
        dialog = tk.Toplevel(self.parent)
        dialog.title("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Trello")
        dialog.geometry("400x250")
        
        tk.Label(dialog, text="API Key:", font=("Arial", 10, "bold")).pack(anchor=tk.W, padx=10, pady=(10, 0))
        api_key_entry = tk.Entry(dialog, width=50)
        api_key_entry.pack(padx=10, pady=5)
        
        tk.Label(dialog, text="Token:", font=("Arial", 10, "bold")).pack(anchor=tk.W, padx=10)
        token_entry = tk.Entry(dialog, width=50, show="*")
        token_entry.pack(padx=10, pady=5)
        
        def save_trello():
            api_key = api_key_entry.get().strip()
            token = token_entry.get().strip()
            
            if api_key and token:
                self.manager.setup_trello(api_key, token)
                messagebox.showinfo("–£—Å–ø–µ—Ö", "Trello –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞!")
                self.update_status()
                dialog.destroy()
            else:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ API Key –∏ Token")
        
        tk.Button(dialog, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", command=save_trello, bg="#0079BF", fg="white").pack(pady=20)
    
    def setup_notion_dialog(self):
        """–î–∏–∞–ª–æ–≥ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Notion"""
        dialog = tk.Toplevel(self.parent)
        dialog.title("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Notion")
        dialog.geometry("400x200")
        
        tk.Label(dialog, text="Integration Token:", font=("Arial", 10, "bold")).pack(anchor=tk.W, padx=10, pady=(10, 0))
        token_entry = tk.Entry(dialog, width=50, show="*")
        token_entry.pack(padx=10, pady=5)
        
        def save_notion():
            token = token_entry.get().strip()
            
            if token:
                self.manager.setup_notion(token)
                messagebox.showinfo("–£—Å–ø–µ—Ö", "Notion –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞!")
                self.update_status()
                dialog.destroy()
            else:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ Integration Token")
        
        tk.Button(dialog, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", command=save_notion, bg="#000000", fg="white").pack(pady=20)
    
    def test_slack(self):
        """–¢–µ—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è Slack"""
        if not self.manager.slack:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ Slack –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é")
            return
        
        test_task = {
            "title": "–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–¥–∞—á–∞",
            "description": "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–∑ Time Blocking App",
            "priority": "high",
            "deadline": datetime.now().strftime("%Y-%m-%d")
        }
        
        success = self.manager.slack.send_task_notification(test_task)
        if success:
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
        else:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")
    
    def select_trello_board(self):
        """–í—ã–±–æ—Ä –¥–æ—Å–∫–∏ Trello"""
        if not self.manager.trello:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ Trello –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é")
            return
        
        def load_boards():
            boards = self.manager.trello.get_boards()
            if boards:
                board_names = [f"{board['name']} ({board['id']})" for board in boards]
                selected = simpledialog.askstring("–í—ã–±–æ—Ä –¥–æ—Å–∫–∏", f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–æ—Å–∫–∏:\n" + "\n".join(board_names) + "\n\n–í–≤–µ–¥–∏—Ç–µ ID –¥–æ—Å–∫–∏:")
                if selected:
                    self.manager.settings.setdefault('trello', {})['default_board'] = selected
                    messagebox.showinfo("–£—Å–ø–µ—Ö", f"–í—ã–±—Ä–∞–Ω–∞ –¥–æ—Å–∫–∞: {selected}")
            else:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ—Å–∫–∏")
        
        threading.Thread(target=load_boards, daemon=True).start()
    
    def select_notion_database(self):
        """–í—ã–±–æ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö Notion"""
        if not self.manager.notion:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ Notion –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é")
            return
        
        def load_databases():
            databases = self.manager.notion.get_databases()
            if databases:
                db_names = [f"{db.get('title', [{}])[0].get('plain_text', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} ({db['id']})" for db in databases]
                selected = simpledialog.askstring("–í—ã–±–æ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö", f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:\n" + "\n".join(db_names) + "\n\n–í–≤–µ–¥–∏—Ç–µ ID –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:")
                if selected:
                    self.manager.settings.setdefault('notion', {})['default_database'] = selected
                    messagebox.showinfo("–£—Å–ø–µ—Ö", f"–í—ã–±—Ä–∞–Ω–∞ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {selected}")
            else:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        
        threading.Thread(target=load_databases, daemon=True).start()
    
    def update_status(self):
        """–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π"""
        self.status_text.delete(1.0, tk.END)
        
        status_text = "üìä –°—Ç–∞—Ç—É—Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π:\n\n"
        
        # Slack
        if self.manager.slack:
            status_text += "‚úÖ Slack: –ù–∞—Å—Ç—Ä–æ–µ–Ω\n"
        else:
            status_text += "‚ùå Slack: –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω\n"
        
        # Trello
        if self.manager.trello:
            status_text += "‚úÖ Trello: –ù–∞—Å—Ç—Ä–æ–µ–Ω\n"
        else:
            status_text += "‚ùå Trello: –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω\n"
        
        # Notion
        if self.manager.notion:
            status_text += "‚úÖ Notion: –ù–∞—Å—Ç—Ä–æ–µ–Ω\n"
        else:
            status_text += "‚ùå Notion: –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω\n"
        
        status_text += "\nüìã –ù–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
        for service, settings in self.manager.settings.items():
            status_text += f"  {service.upper()}:\n"
            for key, value in settings.items():
                if 'token' in key.lower() or 'key' in key.lower():
                    value = "***—Å–∫—Ä—ã—Ç–æ***" if value else "–Ω–µ –∑–∞–¥–∞–Ω–æ"
                status_text += f"    {key}: {value}\n"
        
        self.status_text.insert(1.0, status_text)

def integrate_external_services(main_app):
    """–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–Ω–µ—à–Ω–∏–µ —Å–µ—Ä–≤–∏—Å—ã –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
    try:
        integrations_manager = IntegrationsManager()
        integrations_ui = IntegrationsUI(main_app, integrations_manager)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∫–ª–∞–¥–∫—É –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π
        if hasattr(main_app, 'notebook'):
            integrations_ui.create_integrations_tab(main_app.notebook)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
        main_app.integrations_manager = integrations_manager
        main_app.integrations_ui = integrations_ui
        
        return True
    except Exception as e:
        logging.error(f"Failed to integrate external services: {str(e)}")
        return False
